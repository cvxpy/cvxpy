# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sparsecholesky_swig
else:
    import _sparsecholesky_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sparsecholesky_swig.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _sparsecholesky_swig.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _sparsecholesky_swig.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _sparsecholesky_swig.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _sparsecholesky_swig.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _sparsecholesky_swig.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _sparsecholesky_swig.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _sparsecholesky_swig.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _sparsecholesky_swig.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _sparsecholesky_swig.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _sparsecholesky_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _sparsecholesky_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _sparsecholesky_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _sparsecholesky_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _sparsecholesky_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _sparsecholesky_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _sparsecholesky_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sparsecholesky_swig:
_sparsecholesky_swig.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _sparsecholesky_swig.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _sparsecholesky_swig.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _sparsecholesky_swig.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _sparsecholesky_swig.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _sparsecholesky_swig.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _sparsecholesky_swig.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _sparsecholesky_swig.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _sparsecholesky_swig.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _sparsecholesky_swig.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _sparsecholesky_swig.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _sparsecholesky_swig.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _sparsecholesky_swig.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _sparsecholesky_swig.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _sparsecholesky_swig.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        return _sparsecholesky_swig.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _sparsecholesky_swig.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _sparsecholesky_swig.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _sparsecholesky_swig.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _sparsecholesky_swig.IntVector_rend(self)

    def clear(self) -> "void":
        return _sparsecholesky_swig.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _sparsecholesky_swig.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _sparsecholesky_swig.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _sparsecholesky_swig.IntVector_erase(self, *args)

    def __init__(self, *args):
        _sparsecholesky_swig.IntVector_swiginit(self, _sparsecholesky_swig.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _sparsecholesky_swig.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _sparsecholesky_swig.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _sparsecholesky_swig.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _sparsecholesky_swig.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _sparsecholesky_swig.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _sparsecholesky_swig.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _sparsecholesky_swig.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _sparsecholesky_swig.IntVector_capacity(self)
    __swig_destroy__ = _sparsecholesky_swig.delete_IntVector

# Register IntVector in _sparsecholesky_swig:
_sparsecholesky_swig.IntVector_swigregister(IntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _sparsecholesky_swig.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _sparsecholesky_swig.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _sparsecholesky_swig.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _sparsecholesky_swig.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _sparsecholesky_swig.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _sparsecholesky_swig.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _sparsecholesky_swig.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _sparsecholesky_swig.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _sparsecholesky_swig.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _sparsecholesky_swig.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _sparsecholesky_swig.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _sparsecholesky_swig.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _sparsecholesky_swig.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _sparsecholesky_swig.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        return _sparsecholesky_swig.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _sparsecholesky_swig.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _sparsecholesky_swig.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _sparsecholesky_swig.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _sparsecholesky_swig.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _sparsecholesky_swig.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _sparsecholesky_swig.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _sparsecholesky_swig.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _sparsecholesky_swig.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _sparsecholesky_swig.DoubleVector_swiginit(self, _sparsecholesky_swig.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _sparsecholesky_swig.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _sparsecholesky_swig.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _sparsecholesky_swig.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _sparsecholesky_swig.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _sparsecholesky_swig.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _sparsecholesky_swig.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _sparsecholesky_swig.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _sparsecholesky_swig.DoubleVector_capacity(self)
    __swig_destroy__ = _sparsecholesky_swig.delete_DoubleVector

# Register DoubleVector in _sparsecholesky_swig:
_sparsecholesky_swig.DoubleVector_swigregister(DoubleVector)

class CholeskyFailure(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg: "std::string const &"):
        _sparsecholesky_swig.CholeskyFailure_swiginit(self, _sparsecholesky_swig.new_CholeskyFailure(msg))
    __swig_destroy__ = _sparsecholesky_swig.delete_CholeskyFailure

# Register CholeskyFailure in _sparsecholesky_swig:
_sparsecholesky_swig.CholeskyFailure_swigregister(CholeskyFailure)


def sparse_chol_from_vecs(n: "int", in_rows: "IntVector", in_cols: "IntVector", in_vals: "DoubleVector", out_pivots: "IntVector", out_rows: "IntVector", out_cols: "IntVector", out_vals: "DoubleVector") -> "void":
    return _sparsecholesky_swig.sparse_chol_from_vecs(n, in_rows, in_cols, in_vals, out_pivots, out_rows, out_cols, out_vals)


