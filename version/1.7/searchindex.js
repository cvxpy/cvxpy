Search.setIndex({"alltitles":{"1. Log-log curvature":[[46,"log-log-curvature"]],"1D Model":[[32,"d-model"]],"2. Log-log curvature ruleset":[[46,"log-log-curvature-ruleset"]],"3. DGP problems":[[46,"dgp-problems"]],"4. Next steps":[[46,"next-steps"]],"API Documentation":[[0,null]],"AddExpression":[[2,"addexpression"]],"Additional notes":[[9,"additional-notes"]],"Advanced":[[54,"advanced"]],"Advanced Constraints":[[70,null]],"Advanced Features":[[69,null]],"Advanced applications":[[54,"advanced-applications"]],"Aerospace Design via Quasiconvex Optimization":[[52,null]],"Affine Atoms":[[2,null]],"Allocating interdiction effort to catch a smuggler":[[24,"allocating-interdiction-effort-to-catch-a-smuggler"]],"An alternative conic form":[[14,"an-alternative-conic-form"]],"Antenna array selection":[[18,"antenna-array-selection"]],"Assumptions":[[9,"assumptions"],[9,"id1"]],"Atom":[[1,"atom"]],"Atomic Functions":[[75,null]],"Atoms":[[1,null],[46,"atoms"]],"Atoms table":[[61,"atoms-table"]],"Attributes":[[70,"attributes"],[79,"attributes"]],"Back-End Reductions":[[9,null]],"Basic applications":[[54,"basic-applications"]],"Basic examples":[[54,"basic-examples"]],"Benchmarks":[[14,"benchmarks"]],"Breaking changes":[[79,"breaking-changes"]],"Bug fixes":[[79,"bug-fixes"]],"Bugfixes":[[79,"bugfixes"]],"Buildings":[[24,"buildings"]],"CBC options":[[78,null]],"CLARABEL options:":[[78,null]],"COPT":[[63,null]],"COPT options:":[[78,null]],"CPLEX":[[63,null]],"CPLEX options:":[[78,null]],"CUOPT":[[63,null]],"CUOPT options:":[[78,null]],"CVXOPT and GLPK":[[63,null]],"CVXOPT options":[[78,null]],"CVXPY 1.0":[[79,"cvxpy-1-0"]],"CVXPY 1.1":[[79,"cvxpy-1-1"]],"CVXPY 1.2":[[79,"cvxpy-1-2"]],"CVXPY 1.3":[[79,"cvxpy-1-3"]],"CVXPY 1.4":[[79,"cvxpy-1-4"]],"CVXPY 1.5":[[79,"cvxpy-1-5"]],"CVXPY 1.6":[[79,"cvxpy-1-6"]],"CVXPY 1.6.1":[[79,"cvxpy-1-6-1"]],"CVXPY 1.7":[[79,"cvxpy-1-7"]],"CVXPY Short Course":[[68,null]],"CVXPY\u2019s conic form":[[14,"cvxpy-s-conic-form"]],"CallbackParam":[[6,"callbackparam"]],"Can I copy CVXPY expressions?":[[59,"can-i-copy-cvxpy-expressions"]],"Can I use NumPy functions on CVXPY objects?":[[59,"can-i-use-numpy-functions-on-cvxpy-objects"]],"Can I use SciPy sparse matrices with CVXPY?":[[59,"can-i-use-scipy-sparse-matrices-with-cvxpy"]],"Canonicalization backends":[[69,"canonicalization-backends"]],"Capacity of a Communication Channel":[[15,null]],"Cbc (Clp, Cgl)":[[63,null]],"Chain":[[8,"chain"]],"Changes to CVXPY":[[79,null]],"Changing the problem":[[77,"changing-the-problem"]],"Chebychev design of an FIR filter given a desired H(\\omega)":[[23,null]],"Choosing a solver":[[78,"choosing-a-solver"]],"Citing CVXPY":[[64,null]],"Clarifications for scalar functions":[[75,"clarifications-for-scalar-functions"]],"Clarifications on elementwise functions":[[75,"clarifications-on-elementwise-functions"]],"Clarifications on vector and matrix functions":[[75,"clarifications-on-vector-and-matrix-functions"]],"Code style":[[14,"code-style"]],"Color Images":[[35,"color-images"]],"Complex valued expressions":[[70,"complex-valued-expressions"]],"Complex2Real":[[11,"complex2real"]],"Composition rules":[[74,"composition-rules"]],"Computing a sparse solution of a set of linear inequalities":[[34,null]],"Conclusion":[[19,"conclusion"]],"Conic solvers":[[14,"conic-solvers"]],"Consensus optimization":[[21,null]],"Constant":[[6,"constant"]],"Constraint":[[5,"constraint"]],"Constraints":[[5,null],[77,"constraints"]],"Constraints and atoms":[[79,"constraints-and-atoms"],[79,"id6"]],"Contributing":[[14,null]],"Contribution checklist":[[14,"contribution-checklist"]],"Core classes":[[8,"core-classes"]],"CuClarabel":[[63,null]],"Curvature":[[71,"curvature"],[74,"curvature"]],"Curvature rules":[[71,"curvature-rules"]],"Custom Solvers":[[78,"custom-solvers"]],"CvxAttr2Constr":[[11,"cvxattr2constr"]],"DAQP options:":[[78,null]],"DCP problems":[[71,"dcp-problems"]],"DGP atoms":[[72,"dgp-atoms"]],"DGP fundamentals":[[46,null]],"DGP problems":[[72,"dgp-problems"]],"DQCP atoms":[[74,"dqcp-atoms"]],"DQCP problems":[[74,"dqcp-problems"]],"Data Generation":[[19,"data-generation"]],"Data generation":[[18,"data-generation"],[45,"data-generation"]],"Dcp2Cone":[[9,"dcp2cone"]],"Default reshape order warning":[[79,"default-reshape-order-warning"]],"Derivatives":[[54,"derivatives"]],"Derivatives fundamentals":[[43,null]],"Details on required formatting of solution.primal_vars":[[9,"details-on-required-formatting-of-solution-primal-vars"]],"Development environment":[[14,"development-environment"]],"Dgp2Dcp":[[11,"dgp2dcp"]],"Disciplined Convex Programming":[[71,null]],"Disciplined Geometric Programming":[[72,null]],"Disciplined Parametrized Programming":[[73,null]],"Disciplined Quasiconvex Programming":[[74,null]],"Disciplined geometric programming":[[54,"disciplined-geometric-programming"]],"Disciplined quasiconvex programming":[[54,"disciplined-quasiconvex-programming"]],"Disclaimer":[[8,"disclaimer"]],"DivExpression":[[2,"divexpression"]],"Dropping ECOS dependency":[[79,"dropping-ecos-dependency"]],"Dual variables":[[14,"dual-variables"],[69,"dual-variables"]],"Dualize":[[9,"dualize"]],"ECOS deprecation":[[79,"ecos-deprecation"],[79,"id4"]],"ECOS options:":[[78,null]],"Elementwise functions":[[72,"elementwise-functions"],[75,"elementwise-functions"]],"Entropy maximization":[[26,null]],"EvalParams":[[11,"evalparams"]],"Evaluating the model":[[55,"evaluating-the-model"],[57,"evaluating-the-model"]],"Evaluation":[[22,"evaluation"]],"Example":[[15,"example"],[22,"example"],[27,"example"],[28,"example"],[30,"example"],[31,"example"],[36,"example"],[37,"example"],[38,"example"],[39,"example"],[40,"example"],[41,"example"],[42,"example"],[58,"example"]],"Example 1":[[71,"example-1"]],"Example 2":[[71,"example-2"]],"Example to solve":[[24,"example-to-solve"]],"Examples":[[54,null]],"ExpCone":[[5,"expcone"]],"Expression":[[6,"expression"]],"Expressions":[[6,null],[71,"expressions"]],"FAQ":[[59,null]],"Fault detection":[[22,null]],"Finance":[[54,"finance"]],"FiniteSet":[[5,"finiteset"]],"Fitting":[[45,"fitting"]],"Fitting censored data":[[19,null]],"Fitting the model":[[55,"fitting-the-model"],[57,"fitting-the-model"]],"FlipObjective":[[11,"flipobjective"]],"Formulate and solve problem":[[25,"formulate-and-solve-problem"],[26,"formulate-and-solve-problem"]],"Fractional optimization":[[51,null]],"Functions":[[61,null]],"Functions along an axis":[[75,"functions-along-an-axis"]],"Functions from geometric programming":[[46,"functions-from-geometric-programming"]],"GLOP and PDLP":[[63,null]],"GLOP options:":[[78,null]],"GUROBI":[[63,null]],"GUROBI options:":[[78,null]],"General principles":[[14,"general-principles"]],"General system improvements":[[79,"general-system-improvements"],[79,"id8"]],"Generate problem data":[[20,"generate-problem-data"],[26,"generate-problem-data"],[29,"generate-problem-data"],[33,"generate-problem-data"],[34,"generate-problem-data"]],"Generating data":[[55,"generating-data"],[57,"generating-data"]],"Getting the standard form":[[69,"getting-the-standard-form"]],"Gradient":[[43,"gradient"]],"Grayscale Images":[[35,"grayscale-images"]],"Guard placement example":[[24,"guard-placement-example"]],"Guards":[[24,"guards"]],"HIGHS options:":[[78,null]],"Helper Functions":[[32,"helper-functions"]],"Helper functions":[[20,"helper-functions"],[24,"helper-functions"]],"HiGHS":[[63,null]],"Highlights":[[79,"highlights"]],"How do I cite CVXPY?":[[59,"how-do-i-cite-cvxpy"]],"How do I constrain a CVXPY matrix expression to be positive semidefinite?":[[59,"how-do-i-constrain-a-cvxpy-matrix-expression-to-be-positive-semidefinite"]],"How do I create a variable that has multiple special properties, such as boolean and symmetric?":[[59,"how-do-i-create-a-variable-that-has-multiple-special-properties-such-as-boolean-and-symmetric"]],"How do I create variables with more than 2 dimensions?":[[59,"how-do-i-create-variables-with-more-than-2-dimensions"]],"How do I create variables with special properties, such as boolean or symmetric variables?":[[59,"how-do-i-create-variables-with-special-properties-such-as-boolean-or-symmetric-variables"]],"How do I find DCP errors?":[[59,"how-do-i-find-dcp-errors"]],"How do I know which version of CVXPY I\u2019m using?":[[59,"how-do-i-know-which-version-of-cvxpy-i-m-using"]],"How does CVXPY work?":[[59,"how-does-cvxpy-work"]],"Import and setup packages":[[20,"import-and-setup-packages"]],"Important":[[70,null]],"Indexing and slicing":[[75,"indexing-and-slicing"]],"Infeasible and unbounded problems":[[77,"infeasible-and-unbounded-problems"]],"Infix operators":[[71,"infix-operators"],[72,"infix-operators"]],"Initialize problem data":[[23,"initialize-problem-data"]],"Install":[[63,null]],"Install with Additional Solver Support":[[63,"install-with-additional-solver-support"]],"Introduction":[[18,"introduction"],[20,"introduction"],[23,"introduction"],[25,"introduction"],[26,"introduction"],[29,"introduction"],[33,"introduction"],[34,"introduction"]],"Iterated weighted \\ell_1 heuristic":[[31,"iterated-weighted-ell-1-heuristic"]],"Iterative log heuristic":[[34,"iterative-log-heuristic"]],"Kalman filtering":[[32,"kalman-filtering"]],"Kalman filtering recovery":[[32,"kalman-filtering-recovery"]],"Known issues":[[79,"known-issues"]],"Leaf":[[6,"leaf"]],"Least-squares":[[37,null]],"License":[[14,"license"],[66,null]],"Linear program":[[38,null]],"Log-log curvature":[[72,"log-log-curvature"]],"Log-log curvature rules":[[72,"log-log-curvature-rules"]],"Logistic regression with \\ell_1 regularization":[[56,null]],"MOSEK":[[63,null]],"MOSEK options":[[78,null]],"MPAX":[[63,null]],"MPAX options":[[78,null]],"Machine Learning: Lasso Regression":[[55,null]],"Machine Learning: Ridge Regression":[[57,null]],"Machine learning":[[54,"machine-learning"]],"Maximize":[[7,"maximize"]],"Maximizing the volume of a box":[[47,null]],"Method of multipliers":[[16,null]],"Middle-End Reductions":[[11,null]],"Min/max game":[[24,"min-max-game"]],"Minimize":[[7,"minimize"]],"Minimize beamwidth of an array with arbitrary 2-D geometry":[[18,null]],"Minimizing Condition Number by Scaling":[[28,null]],"Minimum-length least squares":[[53,null]],"Mixed-integer programs":[[70,"mixed-integer-programs"]],"Mixed-integer quadratic program":[[39,null]],"Modeling frameworks":[[67,"modeling-frameworks"]],"Module contents":[[10,"module-cvxpy.reductions.dcp2cone"],[12,"module-cvxpy.reductions.qp2quad_form"]],"Monomial fit to each component":[[45,"monomial-fit-to-each-component"]],"MulExpression":[[2,"mulexpression"]],"Multiple Attributes":[[70,"multiple-attributes"]],"Multiple sources and destinations":[[24,"multiple-sources-and-destinations"]],"N-dimensional expressions":[[69,"n-dimensional-expressions"]],"NAG":[[63,null]],"NAG options:":[[78,null]],"NegExpression":[[2,"negexpression"]],"New GPU solvers":[[79,"new-gpu-solvers"]],"New atoms and transforms":[[79,"new-atoms-and-transforms"]],"New features":[[79,"new-features"],[79,"id1"],[79,"id2"],[79,"id3"]],"NonPos":[[5,"nonpos"]],"NonPos deprecation":[[79,"nonpos-deprecation"]],"Nonnegative matrix factorization":[[29,null]],"Notable patches since CVXPY 1.1.0":[[79,"notable-patches-since-cvxpy-1-1-0"]],"Note":[[3,null],[3,null],[3,null],[4,null],[4,null],[70,null],[78,null],[78,null],[79,null]],"NumPy Compatibility":[[79,"numpy-compatibility"]],"OLS using uncensored data":[[19,"ols-using-uncensored-data"]],"OSQP options:":[[78,null]],"Object Oriented Convex Optimization":[[17,null]],"OpRelEntrConeQuad":[[5,"oprelentrconequad"]],"Operators":[[75,"operators"]],"Optimal Power and Bandwidth Allocation in a Gaussian Channel":[[30,null]],"Optimal parade route":[[31,null]],"Optimization formulation":[[31,"optimization-formulation"]],"Other":[[13,"other"]],"Other Atoms":[[4,null]],"Other problem statuses":[[77,"other-problem-statuses"]],"Output results":[[29,"output-results"]],"Overview":[[79,"overview"]],"PDLP options:":[[78,null]],"PIQP":[[63,null]],"PIQP options:":[[78,null]],"PROXQP":[[63,null]],"PROXQP options:":[[78,null]],"PSD":[[5,"psd"]],"Parameter":[[6,"parameter"]],"Parameters":[[77,"parameters"]],"Perform alternating minimization":[[29,"perform-alternating-minimization"]],"Perron-Frobenius matrix completion":[[48,null]],"Perturbation analysis":[[44,"perturbation-analysis"]],"Pnorm":[[4,"id28"]],"PowCone3D":[[5,"powcone3d"]],"PowConeND":[[5,"powconend"]],"Power":[[72,"power"],[75,"power"]],"Power Assignment in a Wireless Communication System":[[27,null]],"Power control":[[49,null]],"Problem":[[7,"problem"]],"Problem Data":[[32,"problem-data"]],"Problem arithmetic":[[69,"problem-arithmetic"]],"Problem specification and data":[[18,"problem-specification-and-data"]],"Problem statement":[[22,"problem-statement"],[31,"problem-statement"],[32,"problem-statement"]],"Problems":[[7,null]],"QOCO":[[63,null]],"QOCO options:":[[78,null]],"Qp2SymbolicQp":[[9,"qp2symbolicqp"]],"Quadratic program":[[40,null]],"Queuing design":[[44,null]],"Rank-one nonnegative matrix factorization":[[50,null]],"Reading and writing the value of a sparse expression":[[70,"reading-and-writing-the-value-of-a-sparse-expression"]],"Recovery":[[22,"recovery"]],"Reduction":[[8,"reduction"]],"Reductions":[[8,null],[79,"reductions"]],"References":[[46,"references"]],"Registering a solver":[[14,"registering-a-solver"]],"Regular OLS":[[19,"regular-ols"]],"Regularization path":[[57,"regularization-path"]],"Regularization path and feature selection":[[55,"regularization-path-and-feature-selection"]],"RelEntrConeQuad":[[5,"relentrconequad"]],"Related Projects":[[67,null]],"Relaxation":[[31,"relaxation"]],"Repeatedly solving a DPP problem":[[73,"repeatedly-solving-a-dpp-problem"]],"Representation of atoms":[[1,"representation-of-atoms"]],"Resources":[[65,null]],"Result plots":[[18,"result-plots"],[23,"result-plots"],[33,"result-plots"],[34,"result-plots"]],"Results plot":[[25,"results-plot"]],"Robust Kalman filtering":[[32,"robust-kalman-filtering"]],"Robust Kalman filtering for vehicle tracking":[[32,null]],"Robust Kalman filtering recovery":[[32,"robust-kalman-filtering-recovery"]],"Running the test suite":[[63,"running-the-test-suite"]],"Running unit tests":[[14,"running-unit-tests"]],"SCIP":[[63,null]],"SCIP options:":[[78,null]],"SCIPY":[[63,null]],"SCIPY options:":[[78,null]],"SCS options":[[78,null]],"SDPA":[[63,null]],"SDPA options":[[78,null]],"SDPT3":[[63,null]],"SOC":[[5,"soc"]],"Scalar functions":[[72,"scalar-functions"],[75,"scalar-functions"]],"Scalarize":[[13,"scalarize"]],"SciPy dependency bump":[[79,"scipy-dependency-bump"]],"Second-order cone program":[[42,null]],"Security example":[[24,"security-example"]],"Security\u2019s objective":[[24,"security-s-objective"]],"Semidefinite matrices":[[70,"semidefinite-matrices"]],"Semidefinite program":[[41,null]],"Sensitivity analysis":[[43,"sensitivity-analysis"]],"Sensitivity analysis and gradients":[[73,"sensitivity-analysis-and-gradients"]],"Sensitvities":[[44,"sensitvities"]],"Setting solver options":[[78,"setting-solver-options"]],"Setup":[[19,"setup"]],"Sign":[[71,"sign"]],"Simulation":[[32,"simulation"]],"SizeMetrics":[[7,"sizemetrics"]],"Sizing of clock meshes":[[20,null]],"Slacks":[[9,"slacks"]],"Smuggler\u2019s objective":[[24,"smuggler-s-objective"]],"Smuggler\u2019s path example":[[24,"smuggler-s-path-example"]],"Solution":[[8,"solution"]],"Solution approach":[[22,"solution-approach"]],"Solution map":[[43,"solution-map"]],"Solve for several \\alpha values":[[33,"solve-for-several-alpha-values"]],"Solve method options":[[78,"solve-method-options"]],"Solve problem and display results":[[20,"solve-problem-and-display-results"]],"Solve the minimax (Chebychev) design problem":[[23,"solve-the-minimax-chebychev-design-problem"]],"Solve using bisection algorithm":[[18,"solve-using-bisection-algorithm"]],"Solver Features":[[78,null]],"Solver interfaces":[[14,"solver-interfaces"],[79,"solver-interfaces"],[79,"id7"]],"Solver stats":[[78,"solver-stats"]],"SolverStats":[[7,"solverstats"]],"Solvers":[[67,"solvers"]],"Solving DGP problems":[[46,"solving-dgp-problems"]],"Solving DQCP problems":[[74,"solving-dqcp-problems"]],"Solving disciplined geometric programs":[[78,"solving-disciplined-geometric-programs"]],"SolvingChain":[[8,"solvingchain"]],"Sparse array support":[[79,"sparse-array-support"]],"Sparse covariance estimation for Gaussian variables":[[33,null]],"Sparsity Attribute":[[70,"sparsity-attribute"]],"Structured prediction":[[45,null]],"Submodules":[[10,"submodules"],[12,"submodules"]],"Subpackages":[[10,"subpackages"],[12,"subpackages"]],"SuppFunc":[[13,"suppfunc"]],"SuppFuncAtom":[[4,"suppfuncatom"]],"Support vector machine classifier with \\ell_1-regularization":[[58,null]],"TODO":[[24,null],[24,"id1"]],"The DPP ruleset":[[73,"the-dpp-ruleset"]],"Topic references":[[22,"topic-references"],[24,"topic-references"],[31,"topic-references"]],"Total variation in-painting":[[35,null]],"Transformations and mathematical formulation":[[24,"transformations-and-mathematical-formulation"]],"Transforms":[[13,null],[69,"transforms"],[79,"transforms"]],"Transpose":[[72,"transpose"],[75,"transpose"]],"Types of Reductions":[[8,"types-of-reductions"]],"Update on reshape order":[[79,"update-on-reshape-order"]],"Usage":[[9,"usage"]],"User Guide":[[76,null]],"Using constraints to take into account of censored data":[[19,"using-constraints-to-take-into-account-of-censored-data"]],"Variable":[[6,"variable"]],"Vector/matrix functions":[[72,"vector-matrix-functions"],[75,"vector-matrix-functions"]],"Vectors and matrices":[[77,"vectors-and-matrices"]],"Vehicle tracking example":[[32,"vehicle-tracking-example"]],"Viewing solver output":[[78,"viewing-solver-output"]],"Warm start":[[78,"warm-start"]],"Warning":[[14,null],[14,null],[69,null],[78,null]],"Water Filling in Communications":[[36,null]],"Welcome to CVXPY 1.7":[[62,null]],"What are the differences between CVXPY\u2019s solvers?":[[59,"what-are-the-differences-between-cvxpy-s-solvers"]],"What do I do if I get a DCPError exception?":[[59,"what-do-i-do-if-i-get-a-dcperror-exception"]],"What do I do if I get a SolverError exception?":[[59,"what-do-i-do-if-i-get-a-solvererror-exception"]],"What do I do if I get \u201cException: Cannot evaluate the truth value of a constraint\u201d?":[[59,"what-do-i-do-if-i-get-exception-cannot-evaluate-the-truth-value-of-a-constraint"]],"What is CVXPY?":[[77,null]],"What is DPP?":[[73,"what-is-dpp"]],"What solvers does CVXPY support?":[[59,"what-solvers-does-cvxpy-support"]],"Where can I get help with CVXPY?":[[59,"where-can-i-get-help-with-cvxpy"]],"Where can I learn more about convex optimization?":[[59,"where-can-i-learn-more-about-convex-optimization"]],"Why does it take so long to compile my Problem?":[[59,"why-does-it-take-so-long-to-compile-my-problem"]],"Wishlist":[[14,"wishlist"]],"Without default solvers":[[63,null]],"Writing tests":[[14,"writing-tests"]],"Writing the objective function":[[55,"writing-the-objective-function"],[57,"writing-the-objective-function"]],"Writing unit tests":[[14,"writing-unit-tests"]],"XPRESS":[[63,null]],"XPRESS options:":[[78,null]],"Zero":[[5,"zero"]],"\\ell_1 trend filtering":[[25,null]],"\\ell_1-norm heuristic":[[34,"ell-1-norm-heuristic"]],"abs":[[3,"abs"]],"bmat":[[2,"bmat"]],"broadcast_to":[[2,"broadcast-to"]],"conj":[[2,"conj"]],"conv deprecation":[[79,"conv-deprecation"]],"convolve":[[2,"convolve"]],"cummax":[[4,"cummax"]],"cumprod":[[4,"cumprod"]],"cumsum":[[2,"cumsum"]],"cvar":[[4,"cvar"]],"cvxpy.atoms.elementwise package":[[3,null]],"cvxpy.reductions.dcp2cone package":[[10,null]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing module":[[10,"module-cvxpy.reductions.dcp2cone.cone_matrix_stuffing"]],"cvxpy.reductions.dcp2cone.dcp2cone module":[[10,"module-cvxpy.reductions.dcp2cone.dcp2cone"]],"cvxpy.reductions.qp2quad_form package":[[12,null]],"cvxpy.reductions.qp2quad_form.qp2symbolic_qp module":[[12,"module-cvxpy.reductions.qp2quad_form.qp2symbolic_qp"]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing module":[[12,"module-cvxpy.reductions.qp2quad_form.qp_matrix_stuffing"]],"diag":[[2,"diag"]],"diff":[[2,"diff"]],"diff_pos":[[4,"diff-pos"]],"dotsort":[[4,"dotsort"]],"entr":[[3,"entr"]],"exp":[[3,"exp"]],"eye_minus_inv":[[4,"eye-minus-inv"]],"geo_mean":[[4,"geo-mean"]],"gmatmul":[[4,"gmatmul"]],"harmonic_mean":[[4,"harmonic-mean"]],"hstack":[[2,"hstack"]],"huber":[[3,"huber"]],"imag":[[2,"imag"]],"index":[[2,"index"]],"inv_pos":[[3,"inv-pos"]],"inv_prod":[[4,"inv-prod"]],"kl_div":[[3,"kl-div"]],"kron":[[2,"kron"]],"lambda_max":[[4,"lambda-max"]],"lambda_min":[[4,"lambda-min"]],"lambda_sum_largest":[[4,"lambda-sum-largest"]],"lambda_sum_smallest":[[4,"lambda-sum-smallest"]],"log":[[3,"log"]],"log1p":[[3,"log1p"]],"log_det":[[4,"log-det"]],"log_normcdf":[[3,"log-normcdf"]],"log_sum_exp":[[4,"log-sum-exp"]],"loggamma":[[3,"loggamma"]],"logistic":[[3,"logistic"]],"matmul":[[2,"matmul"]],"matrix_frac":[[4,"matrix-frac"]],"max":[[4,"max"]],"maximum":[[3,"maximum"]],"mean":[[2,"mean"]],"min":[[4,"min"]],"minimum":[[3,"minimum"]],"mixed_norm":[[4,"mixed-norm"]],"moveaxis":[[2,"moveaxis"]],"multiply":[[2,"multiply"]],"neg":[[3,"neg"]],"norm":[[4,"norm"]],"norm1":[[4,"norm1"]],"norm2":[[4,"norm2"]],"normNuc":[[4,"normnuc"]],"norm_inf":[[4,"norm-inf"]],"one_minus_pos":[[4,"one-minus-pos"]],"outer":[[2,"outer"]],"partial_trace":[[2,"partial-trace"]],"partial_transpose":[[2,"partial-transpose"]],"permute_dims":[[2,"permute-dims"]],"perspective":[[4,"perspective"]],"pf_eigenvalue":[[4,"pf-eigenvalue"]],"pnorm":[[4,"pnorm"]],"pos":[[3,"pos"]],"power":[[3,"power"]],"prod":[[4,"prod"]],"promote":[[2,"promote"]],"psd_wrap":[[2,"psd-wrap"]],"ptp":[[4,"ptp"]],"quad_form":[[4,"quad-form"]],"quad_over_lin":[[4,"quad-over-lin"]],"real":[[2,"real"]],"rel_entr":[[3,"rel-entr"]],"reshape":[[2,"reshape"]],"resolvent":[[4,"resolvent"]],"scalene":[[3,"scalene"]],"sigma_max":[[4,"sigma-max"]],"sqrt":[[3,"sqrt"]],"square":[[3,"square"]],"std":[[4,"std"]],"sum":[[2,"sum"]],"sum_largest":[[4,"sum-largest"]],"sum_smallest":[[4,"sum-smallest"]],"sum_squares":[[4,"sum-squares"]],"swapaxes":[[2,"swapaxes"]],"tr_inv":[[4,"tr-inv"]],"trace":[[2,"trace"]],"transpose":[[2,"transpose"]],"tv":[[4,"tv"]],"upper_tri":[[2,"upper-tri"]],"var":[[4,"var"]],"vdot":[[2,"vdot"]],"vec":[[2,"vec"]],"vec_to_upper_tri":[[2,"vec-to-upper-tri"]],"von_neumann_entr":[[4,"von-neumann-entr"]],"vstack":[[2,"vstack"]],"xexp":[[3,"xexp"]]},"docurls":["api_reference/cvxpy.html","api_reference/cvxpy.atoms.html","api_reference/cvxpy.atoms.affine.html","api_reference/cvxpy.atoms.elementwise.html","api_reference/cvxpy.atoms.other_atoms.html","api_reference/cvxpy.constraints.html","api_reference/cvxpy.expressions.html","api_reference/cvxpy.problems.html","api_reference/cvxpy.reductions.html","api_reference/cvxpy.reductions.back_end.html","api_reference/cvxpy.reductions.dcp2cone.html","api_reference/cvxpy.reductions.middle_end.html","api_reference/cvxpy.reductions.qp2quad_form.html","api_reference/cvxpy.transforms.html","contributing/index.html","examples/applications/Channel_capacity_BV4.57.html","examples/applications/MM.html","examples/applications/OOCO.html","examples/applications/ant_array_min_beamwidth.html","examples/applications/censored_data.html","examples/applications/clock_mesh.html","examples/applications/consensus_opt.html","examples/applications/fault_detection.html","examples/applications/fir_chebychev_design.html","examples/applications/interdiction.html","examples/applications/l1_trend_filter.html","examples/applications/max_entropy.html","examples/applications/maximise_minimum_SINR_BV4.20.html","examples/applications/min_condition_number_by_scaling.html","examples/applications/nonneg_matrix_fact.html","examples/applications/optimal_power_gaussian_channel_BV4.62.html","examples/applications/parade_route.html","examples/applications/robust_kalman.html","examples/applications/sparse_covariance_est.html","examples/applications/sparse_solution.html","examples/applications/tv_inpainting.html","examples/applications/water_filling_BVex5.2.html","examples/basic/least_squares.html","examples/basic/linear_program.html","examples/basic/mixed_integer_quadratic_program.html","examples/basic/quadratic_program.html","examples/basic/sdp.html","examples/basic/socp.html","examples/derivatives/fundamentals.html","examples/derivatives/queuing_design.html","examples/derivatives/structured_prediction.html","examples/dgp/dgp_fundamentals.html","examples/dgp/max_volume_box.html","examples/dgp/pf_matrix_completion.html","examples/dgp/power_control.html","examples/dgp/rank_one_nmf.html","examples/dqcp/concave_fractional_function.html","examples/dqcp/hypersonic_shape_design.html","examples/dqcp/minimum_length_least_squares.html","examples/index.html","examples/machine_learning/lasso_regression.html","examples/machine_learning/logistic_regression.html","examples/machine_learning/ridge_regression.html","examples/machine_learning/svm.html","faq/index.html","functions/functions_table.html","functions/index.html","index.html","install/index.html","resources/citing/index.html","resources/index.html","resources/license/index.html","resources/related_projects/index.html","resources/short_course/index.html","tutorial/advanced/index.html","tutorial/constraints/index.html","tutorial/dcp/index.html","tutorial/dgp/index.html","tutorial/dpp/index.html","tutorial/dqcp/index.html","tutorial/functions/index.html","tutorial/index.html","tutorial/intro/index.html","tutorial/solvers/index.html","updates/index.html"],"envversion":{"sphinx":65,"sphinx.domains.c":3,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":9,"sphinx.domains.index":1,"sphinx.domains.javascript":3,"sphinx.domains.math":2,"sphinx.domains.python":4,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.todo":2,"sphinx.ext.viewcode":1},"indexentries":{"__add__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__add__",false]],"__call__() (cvxpy.transforms.suppfunc.suppfunc method)":[[13,"cvxpy.transforms.suppfunc.SuppFunc.__call__",false]],"__div__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__div__",false]],"__eq__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__eq__",false]],"__ge__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__ge__",false]],"__init__() (cvxpy.reductions.reduction.reduction method)":[[8,"cvxpy.reductions.reduction.Reduction.__init__",false]],"__le__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__le__",false]],"__lshift__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__lshift__",false]],"__matmul__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__matmul__",false]],"__mul__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__mul__",false]],"__pow__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__pow__",false]],"__radd__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__radd__",false]],"__rdiv__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__rdiv__",false]],"__rlshift__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__rlshift__",false]],"__rmatmul__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__rmatmul__",false]],"__rmul__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__rmul__",false]],"__rrshift__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__rrshift__",false]],"__rshift__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__rshift__",false]],"__rsub__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__rsub__",false]],"__rtruediv__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__rtruediv__",false]],"__sub__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__sub__",false]],"__truediv__() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.__truediv__",false]],"abs (class in cvxpy)":[[3,"cvxpy.abs",false]],"accepts() (cvxpy.reductions.chain.chain method)":[[8,"cvxpy.reductions.chain.Chain.accepts",false]],"accepts() (cvxpy.reductions.complex2real.complex2real.complex2real method)":[[11,"cvxpy.reductions.complex2real.complex2real.Complex2Real.accepts",false]],"accepts() (cvxpy.reductions.cvx_attr2constr.cvxattr2constr method)":[[11,"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr.accepts",false]],"accepts() (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conematrixstuffing method)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.accepts",false]],"accepts() (cvxpy.reductions.dcp2cone.dcp2cone.dcp2cone method)":[[9,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.accepts",false],[10,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.accepts",false]],"accepts() (cvxpy.reductions.dgp2dcp.dgp2dcp.dgp2dcp method)":[[11,"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.accepts",false]],"accepts() (cvxpy.reductions.eval_params.evalparams method)":[[11,"cvxpy.reductions.eval_params.EvalParams.accepts",false]],"accepts() (cvxpy.reductions.flip_objective.flipobjective method)":[[11,"cvxpy.reductions.flip_objective.FlipObjective.accepts",false]],"accepts() (cvxpy.reductions.qp2quad_form.qp2symbolic_qp.qp2symbolicqp method)":[[9,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp.accepts",false],[12,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp.accepts",false]],"accepts() (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.qpmatrixstuffing static method)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.accepts",false]],"accepts() (cvxpy.reductions.reduction.reduction method)":[[8,"cvxpy.reductions.reduction.Reduction.accepts",false]],"accepts() (in module cvxpy.reductions.qp2quad_form.qp2symbolic_qp)":[[12,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.accepts",false]],"addexpression (class in cvxpy.atoms.affine.add_expr)":[[2,"cvxpy.atoms.affine.add_expr.AddExpression",false]],"apply() (cvxpy.reductions.chain.chain method)":[[8,"cvxpy.reductions.chain.Chain.apply",false]],"apply() (cvxpy.reductions.complex2real.complex2real.complex2real method)":[[11,"cvxpy.reductions.complex2real.complex2real.Complex2Real.apply",false]],"apply() (cvxpy.reductions.cone2cone.affine2direct.slacks static method)":[[9,"cvxpy.reductions.cone2cone.affine2direct.Slacks.apply",false]],"apply() (cvxpy.reductions.cvx_attr2constr.cvxattr2constr method)":[[11,"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr.apply",false]],"apply() (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conematrixstuffing method)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.apply",false]],"apply() (cvxpy.reductions.dcp2cone.dcp2cone.dcp2cone method)":[[9,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.apply",false],[10,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.apply",false]],"apply() (cvxpy.reductions.dgp2dcp.dgp2dcp.dgp2dcp method)":[[11,"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.apply",false]],"apply() (cvxpy.reductions.eval_params.evalparams method)":[[11,"cvxpy.reductions.eval_params.EvalParams.apply",false]],"apply() (cvxpy.reductions.flip_objective.flipobjective method)":[[11,"cvxpy.reductions.flip_objective.FlipObjective.apply",false]],"apply() (cvxpy.reductions.qp2quad_form.qp2symbolic_qp.qp2symbolicqp method)":[[9,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp.apply",false],[12,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp.apply",false]],"apply() (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.qpmatrixstuffing method)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.apply",false]],"apply() (cvxpy.reductions.reduction.reduction method)":[[8,"cvxpy.reductions.reduction.Reduction.apply",false]],"apply_param_jac() (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.paramconeprog method)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.apply_param_jac",false]],"apply_param_jac() (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.paramquadprog method)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.apply_param_jac",false]],"apply_parameters() (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.paramconeprog method)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.apply_parameters",false]],"apply_parameters() (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.paramquadprog method)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.apply_parameters",false]],"approx_error (cvxpy.atoms.geo_mean.geo_mean attribute)":[[4,"cvxpy.atoms.geo_mean.geo_mean.approx_error",false]],"atom (class in cvxpy.atoms.atom)":[[1,"cvxpy.atoms.atom.Atom",false]],"atoms() (cvxpy.problem method)":[[7,"cvxpy.Problem.atoms",false]],"attr (cvxpy.reductions.solution.solution attribute)":[[8,"cvxpy.reductions.solution.Solution.attr",false]],"axis (cvxpy.atoms.cumprod.cumprod attribute)":[[4,"cvxpy.atoms.cumprod.cumprod.axis",false]],"axis (cvxpy.constraints.second_order.soc attribute)":[[5,"cvxpy.constraints.second_order.SOC.axis",false]],"axis (cvxpy.cumsum attribute)":[[2,"cvxpy.cumsum.axis",false]],"backward() (cvxpy.problem method)":[[7,"cvxpy.Problem.backward",false]],"bmat() (in module cvxpy)":[[2,"cvxpy.bmat",false]],"broadcast_to (class in cvxpy)":[[2,"cvxpy.broadcast_to",false]],"built-in function":[[70,"Leaf",false],[78,"solve",false]],"callbackparam (class in cvxpy.expressions.constants.callback_param)":[[6,"cvxpy.expressions.constants.callback_param.CallbackParam",false]],"canonicalize_expr() (cvxpy.reductions.dcp2cone.dcp2cone.dcp2cone method)":[[9,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.canonicalize_expr",false],[10,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.canonicalize_expr",false]],"canonicalize_expr() (cvxpy.reductions.dgp2dcp.dgp2dcp.dgp2dcp method)":[[11,"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.canonicalize_expr",false]],"canonicalize_tree() (cvxpy.reductions.dcp2cone.dcp2cone.dcp2cone method)":[[9,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.canonicalize_tree",false],[10,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.canonicalize_tree",false]],"chain (class in cvxpy.reductions.chain)":[[8,"cvxpy.reductions.chain.Chain",false]],"compilation_time (cvxpy.problem property)":[[7,"cvxpy.Problem.compilation_time",false]],"complex2real (class in cvxpy.reductions.complex2real.complex2real)":[[11,"cvxpy.reductions.complex2real.complex2real.Complex2Real",false]],"conedims (class in cvxpy.reductions.dcp2cone.cone_matrix_stuffing)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims",false]],"conedims (class in cvxpy.reductions.qp2quad_form.qp_matrix_stuffing)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ConeDims",false]],"conematrixstuffing (class in cvxpy.reductions.dcp2cone.cone_matrix_stuffing)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing",false]],"conj (class in cvxpy)":[[2,"cvxpy.conj",false]],"constant (class in cvxpy.expressions.constants)":[[6,"cvxpy.expressions.constants.Constant",false]],"constants() (cvxpy.problem method)":[[7,"cvxpy.Problem.constants",false]],"constraint (class in cvxpy.constraints.constraint)":[[5,"cvxpy.constraints.constraint.Constraint",false]],"constraints (cvxpy.problem property)":[[7,"cvxpy.Problem.constraints",false]],"constraints (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conematrixstuffing attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.CONSTRAINTS",false]],"convolve (class in cvxpy)":[[2,"cvxpy.convolve",false]],"cummax (class in cvxpy.atoms.cummax)":[[4,"cvxpy.atoms.cummax.cummax",false]],"cumprod (class in cvxpy.atoms.cumprod)":[[4,"cvxpy.atoms.cumprod.cumprod",false]],"cumsum (class in cvxpy)":[[2,"cvxpy.cumsum",false]],"curvature (cvxpy.expressions.expression.expression property)":[[6,"cvxpy.expressions.expression.Expression.curvature",false]],"cvar() (in module cvxpy.atoms.cvar)":[[4,"cvxpy.atoms.cvar.cvar",false]],"cvxattr2constr (class in cvxpy.reductions.cvx_attr2constr)":[[11,"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr",false]],"cvxpy.reductions.dcp2cone":[[10,"module-cvxpy.reductions.dcp2cone",false]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing":[[10,"module-cvxpy.reductions.dcp2cone.cone_matrix_stuffing",false]],"cvxpy.reductions.dcp2cone.dcp2cone":[[10,"module-cvxpy.reductions.dcp2cone.dcp2cone",false]],"cvxpy.reductions.qp2quad_form":[[12,"module-cvxpy.reductions.qp2quad_form",false]],"cvxpy.reductions.qp2quad_form.qp2symbolic_qp":[[12,"module-cvxpy.reductions.qp2quad_form.qp2symbolic_qp",false]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing":[[12,"module-cvxpy.reductions.qp2quad_form.qp_matrix_stuffing",false]],"dcp2cone (class in cvxpy.reductions.dcp2cone.dcp2cone)":[[9,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone",false],[10,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone",false]],"derivative() (cvxpy.problem method)":[[7,"cvxpy.Problem.derivative",false]],"dgp2dcp (class in cvxpy.reductions.dgp2dcp.dgp2dcp)":[[11,"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp",false]],"diag() (in module cvxpy)":[[2,"cvxpy.diag",false]],"diff() (in module cvxpy)":[[2,"cvxpy.diff",false]],"diff_pos() (in module cvxpy.atoms.one_minus_pos)":[[4,"cvxpy.atoms.one_minus_pos.diff_pos",false]],"divexpression (class in cvxpy.atoms.affine.binary_operators)":[[2,"cvxpy.atoms.affine.binary_operators.DivExpression",false]],"domain (cvxpy.atoms.atom.atom property)":[[1,"cvxpy.atoms.atom.Atom.domain",false]],"domain (cvxpy.expressions.expression.expression property)":[[6,"cvxpy.expressions.expression.Expression.domain",false]],"dotsort (class in cvxpy.atoms.dotsort)":[[4,"cvxpy.atoms.dotsort.dotsort",false]],"dual_value (cvxpy.constraints.nonpos.nonpos property)":[[5,"cvxpy.constraints.nonpos.NonPos.dual_value",false]],"dual_vars (cvxpy.reductions.solution.solution attribute)":[[8,"cvxpy.reductions.solution.Solution.dual_vars",false]],"dualize (class in cvxpy.reductions.cone2cone.affine2direct)":[[9,"cvxpy.reductions.cone2cone.affine2direct.Dualize",false]],"entr (class in cvxpy)":[[3,"cvxpy.entr",false]],"eq_dim (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.EQ_DIM",false]],"evalparams (class in cvxpy.reductions.eval_params)":[[11,"cvxpy.reductions.eval_params.EvalParams",false]],"exp (class in cvxpy)":[[3,"cvxpy.exp",false]],"exp (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.exp",false]],"exp (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.conedims attribute)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ConeDims.exp",false]],"exp_dim (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.EXP_DIM",false]],"expcone (class in cvxpy.constraints.exponential)":[[5,"cvxpy.constraints.exponential.ExpCone",false]],"expr (cvxpy.atoms.cumprod.cumprod attribute)":[[4,"cvxpy.atoms.cumprod.cumprod.expr",false]],"expr (cvxpy.cumsum attribute)":[[2,"cvxpy.cumsum.expr",false]],"expression (class in cvxpy.expressions.expression)":[[6,"cvxpy.expressions.expression.Expression",false]],"extend_bounds() (cvxpy.reductions.cone2cone.affine2direct.slacks static method)":[[9,"cvxpy.reductions.cone2cone.affine2direct.Slacks.extend_bounds",false]],"extra_stats (cvxpy.problems.problem.solverstats attribute)":[[7,"cvxpy.problems.problem.SolverStats.extra_stats",false],[7,"id0",false]],"eye_minus_inv (class in cvxpy.atoms.eye_minus_inv)":[[4,"cvxpy.atoms.eye_minus_inv.eye_minus_inv",false]],"finiteset (class in cvxpy.constraints.finite_set)":[[5,"cvxpy.constraints.finite_set.FiniteSet",false]],"flipobjective (class in cvxpy.reductions.flip_objective)":[[11,"cvxpy.reductions.flip_objective.FlipObjective",false]],"from_dict() (cvxpy.problems.problem.solverstats class method)":[[7,"cvxpy.problems.problem.SolverStats.from_dict",false]],"geo_mean (class in cvxpy.atoms.geo_mean)":[[4,"cvxpy.atoms.geo_mean.geo_mean",false]],"get_problem_data() (cvxpy.problem method)":[[7,"cvxpy.Problem.get_problem_data",false]],"gmatmul (class in cvxpy.atoms.gmatmul)":[[4,"cvxpy.atoms.gmatmul.gmatmul",false]],"grad (cvxpy.atoms.atom.atom property)":[[1,"cvxpy.atoms.atom.Atom.grad",false]],"grad (cvxpy.expressions.expression.expression property)":[[6,"cvxpy.expressions.expression.Expression.grad",false]],"harmonic_mean() (in module cvxpy.atoms.harmonic_mean)":[[4,"cvxpy.atoms.harmonic_mean.harmonic_mean",false]],"hstack() (in module cvxpy)":[[2,"cvxpy.hstack",false]],"huber (class in cvxpy)":[[3,"cvxpy.huber",false]],"imag (class in cvxpy)":[[2,"cvxpy.imag",false]],"index (class in cvxpy.atoms.affine.index)":[[2,"cvxpy.atoms.affine.index.index",false]],"indicator (class in cvxpy.transforms)":[[13,"cvxpy.transforms.indicator",false]],"ineq_form (cvxpy.constraints.finite_set.finiteset property)":[[5,"cvxpy.constraints.finite_set.FiniteSet.ineq_form",false]],"inv_pos() (in module cvxpy)":[[3,"cvxpy.inv_pos",false]],"inv_prod() (in module cvxpy.atoms.inv_prod)":[[4,"cvxpy.atoms.inv_prod.inv_prod",false]],"invert() (cvxpy.reductions.chain.chain method)":[[8,"cvxpy.reductions.chain.Chain.invert",false]],"invert() (cvxpy.reductions.complex2real.complex2real.complex2real method)":[[11,"cvxpy.reductions.complex2real.complex2real.Complex2Real.invert",false]],"invert() (cvxpy.reductions.cone2cone.affine2direct.dualize static method)":[[9,"cvxpy.reductions.cone2cone.affine2direct.Dualize.invert",false]],"invert() (cvxpy.reductions.cvx_attr2constr.cvxattr2constr method)":[[11,"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr.invert",false]],"invert() (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conematrixstuffing method)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.invert",false]],"invert() (cvxpy.reductions.dgp2dcp.dgp2dcp.dgp2dcp method)":[[11,"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.invert",false]],"invert() (cvxpy.reductions.eval_params.evalparams method)":[[11,"cvxpy.reductions.eval_params.EvalParams.invert",false]],"invert() (cvxpy.reductions.flip_objective.flipobjective method)":[[11,"cvxpy.reductions.flip_objective.FlipObjective.invert",false]],"invert() (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.qpmatrixstuffing method)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.invert",false]],"invert() (cvxpy.reductions.reduction.reduction method)":[[8,"cvxpy.reductions.reduction.Reduction.invert",false]],"is_affine() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_affine",false]],"is_atom_affine() (cvxpy.atoms.atom.atom method)":[[1,"cvxpy.atoms.atom.Atom.is_atom_affine",false]],"is_atom_concave() (cvxpy.atoms.atom.atom method)":[[1,"cvxpy.atoms.atom.Atom.is_atom_concave",false]],"is_atom_convex() (cvxpy.atoms.atom.atom method)":[[1,"cvxpy.atoms.atom.Atom.is_atom_convex",false]],"is_atom_log_log_affine() (cvxpy.atoms.atom.atom method)":[[1,"cvxpy.atoms.atom.Atom.is_atom_log_log_affine",false]],"is_atom_log_log_concave() (cvxpy.atoms.atom.atom method)":[[1,"cvxpy.atoms.atom.Atom.is_atom_log_log_concave",false]],"is_atom_log_log_convex() (cvxpy.atoms.atom.atom method)":[[1,"cvxpy.atoms.atom.Atom.is_atom_log_log_convex",false]],"is_concave() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_concave",false]],"is_constant() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_constant",false]],"is_convex() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_convex",false]],"is_dcp() (cvxpy.constraints.constraint.constraint method)":[[5,"cvxpy.constraints.constraint.Constraint.is_dcp",false]],"is_dcp() (cvxpy.constraints.exponential.expcone method)":[[5,"cvxpy.constraints.exponential.ExpCone.is_dcp",false]],"is_dcp() (cvxpy.constraints.exponential.oprelentrconequad method)":[[5,"cvxpy.constraints.exponential.OpRelEntrConeQuad.is_dcp",false]],"is_dcp() (cvxpy.constraints.exponential.relentrconequad method)":[[5,"cvxpy.constraints.exponential.RelEntrConeQuad.is_dcp",false]],"is_dcp() (cvxpy.constraints.finite_set.finiteset method)":[[5,"cvxpy.constraints.finite_set.FiniteSet.is_dcp",false]],"is_dcp() (cvxpy.constraints.nonpos.nonpos method)":[[5,"cvxpy.constraints.nonpos.NonPos.is_dcp",false]],"is_dcp() (cvxpy.constraints.power.powcone3d method)":[[5,"cvxpy.constraints.power.PowCone3D.is_dcp",false]],"is_dcp() (cvxpy.constraints.power.powconend method)":[[5,"cvxpy.constraints.power.PowConeND.is_dcp",false]],"is_dcp() (cvxpy.constraints.psd.psd method)":[[5,"cvxpy.constraints.psd.PSD.is_dcp",false]],"is_dcp() (cvxpy.constraints.second_order.soc method)":[[5,"cvxpy.constraints.second_order.SOC.is_dcp",false]],"is_dcp() (cvxpy.constraints.zero.zero method)":[[5,"cvxpy.constraints.zero.Zero.is_dcp",false]],"is_dcp() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_dcp",false]],"is_dcp() (cvxpy.maximize method)":[[7,"cvxpy.Maximize.is_dcp",false]],"is_dcp() (cvxpy.minimize method)":[[7,"cvxpy.Minimize.is_dcp",false]],"is_dcp() (cvxpy.problem method)":[[7,"cvxpy.Problem.is_dcp",false]],"is_decr() (cvxpy.atoms.atom.atom method)":[[1,"cvxpy.atoms.atom.Atom.is_decr",false]],"is_dgp() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_dgp",false]],"is_dgp() (cvxpy.maximize method)":[[7,"cvxpy.Maximize.is_dgp",false]],"is_dgp() (cvxpy.minimize method)":[[7,"cvxpy.Minimize.is_dgp",false]],"is_dgp() (cvxpy.problem method)":[[7,"cvxpy.Problem.is_dgp",false]],"is_dpp() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_dpp",false]],"is_dpp() (cvxpy.problem method)":[[7,"cvxpy.Problem.is_dpp",false]],"is_dqcp() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_dqcp",false]],"is_dqcp() (cvxpy.problem method)":[[7,"cvxpy.Problem.is_dqcp",false]],"is_incr() (cvxpy.atoms.atom.atom method)":[[1,"cvxpy.atoms.atom.Atom.is_incr",false]],"is_log_log_affine() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_log_log_affine",false]],"is_log_log_concave() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_log_log_concave",false]],"is_log_log_convex() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_log_log_convex",false]],"is_mixed_integer() (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.paramconeprog method)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.is_mixed_integer",false]],"is_mixed_integer() (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.paramquadprog method)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.is_mixed_integer",false]],"is_nonneg() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_nonneg",false]],"is_nonpos() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_nonpos",false]],"is_qp() (cvxpy.problem method)":[[7,"cvxpy.Problem.is_qp",false]],"is_zero() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.is_zero",false]],"kl_div (class in cvxpy)":[[3,"cvxpy.kl_div",false]],"kron (class in cvxpy)":[[2,"cvxpy.kron",false]],"lambda_max (class in cvxpy.atoms.lambda_max)":[[4,"cvxpy.atoms.lambda_max.lambda_max",false]],"lambda_min() (in module cvxpy.atoms.lambda_min)":[[4,"cvxpy.atoms.lambda_min.lambda_min",false]],"lambda_sum_largest() (in module cvxpy.atoms.lambda_sum_largest)":[[4,"cvxpy.atoms.lambda_sum_largest.lambda_sum_largest",false]],"lambda_sum_smallest() (in module cvxpy.atoms.lambda_sum_smallest)":[[4,"cvxpy.atoms.lambda_sum_smallest.lambda_sum_smallest",false]],"leaf (class in cvxpy.expressions.leaf)":[[6,"cvxpy.expressions.leaf.Leaf",false]],"leaf()":[[70,"Leaf",false]],"leq_dim (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.LEQ_DIM",false]],"linearize() (cvxpy.transforms method)":[[13,"cvxpy.transforms.linearize",false]],"log (class in cvxpy)":[[3,"cvxpy.log",false]],"log1p (class in cvxpy)":[[3,"cvxpy.log1p",false]],"log_det (class in cvxpy.atoms.log_det)":[[4,"cvxpy.atoms.log_det.log_det",false]],"log_normcdf (class in cvxpy)":[[3,"cvxpy.log_normcdf",false]],"log_sum_exp (class in cvxpy.atoms.log_sum_exp)":[[4,"cvxpy.atoms.log_sum_exp.log_sum_exp",false]],"log_sum_exp() (cvxpy.transforms.scalarize method)":[[13,"cvxpy.transforms.scalarize.log_sum_exp",false]],"loggamma (class in cvxpy)":[[3,"cvxpy.loggamma",false]],"logistic (class in cvxpy)":[[3,"cvxpy.logistic",false]],"matmul() (in module cvxpy)":[[2,"cvxpy.matmul",false]],"matrix_frac() (in module cvxpy.atoms.matrix_frac)":[[4,"cvxpy.atoms.matrix_frac.matrix_frac",false]],"max (class in cvxpy.atoms.max)":[[4,"cvxpy.atoms.max.max",false]],"max() (cvxpy.transforms.scalarize method)":[[13,"cvxpy.transforms.scalarize.max",false]],"max_big_small_squared (cvxpy.problems.problem.sizemetrics attribute)":[[7,"cvxpy.problems.problem.SizeMetrics.max_big_small_squared",false]],"max_data_dimension (cvxpy.problems.problem.sizemetrics attribute)":[[7,"cvxpy.problems.problem.SizeMetrics.max_data_dimension",false]],"maximize (class in cvxpy)":[[7,"cvxpy.Maximize",false]],"maximum (class in cvxpy)":[[3,"cvxpy.maximum",false]],"mean() (in module cvxpy.atoms.stats)":[[2,"cvxpy.atoms.stats.mean",false]],"min() (in module cvxpy.atoms.min)":[[4,"cvxpy.atoms.min.min",false]],"minimize (class in cvxpy)":[[7,"cvxpy.Minimize",false]],"minimum() (in module cvxpy)":[[3,"cvxpy.minimum",false]],"mixed_norm() (in module cvxpy.atoms.mixed_norm)":[[4,"cvxpy.atoms.mixed_norm.mixed_norm",false]],"module":[[10,"module-cvxpy.reductions.dcp2cone",false],[10,"module-cvxpy.reductions.dcp2cone.cone_matrix_stuffing",false],[10,"module-cvxpy.reductions.dcp2cone.dcp2cone",false],[12,"module-cvxpy.reductions.qp2quad_form",false],[12,"module-cvxpy.reductions.qp2quad_form.qp2symbolic_qp",false],[12,"module-cvxpy.reductions.qp2quad_form.qp_matrix_stuffing",false]],"moveaxis (class in cvxpy)":[[2,"cvxpy.moveaxis",false]],"mulexpression (class in cvxpy.atoms.affine.binary_operators)":[[2,"cvxpy.atoms.affine.binary_operators.MulExpression",false]],"multiply (class in cvxpy)":[[2,"cvxpy.multiply",false]],"name() (cvxpy.expressions.expression.expression method)":[[6,"cvxpy.expressions.expression.Expression.name",false]],"name() (cvxpy.expressions.variable.variable method)":[[6,"cvxpy.expressions.variable.Variable.name",false]],"ndim (cvxpy.expressions.constants.callback_param.callbackparam property)":[[6,"cvxpy.expressions.constants.callback_param.CallbackParam.ndim",false]],"ndim (cvxpy.expressions.constants.constant property)":[[6,"cvxpy.expressions.constants.Constant.ndim",false]],"ndim (cvxpy.expressions.constants.parameter.parameter property)":[[6,"cvxpy.expressions.constants.parameter.Parameter.ndim",false]],"ndim (cvxpy.expressions.expression.expression property)":[[6,"cvxpy.expressions.expression.Expression.ndim",false]],"ndim (cvxpy.expressions.leaf.leaf property)":[[6,"cvxpy.expressions.leaf.Leaf.ndim",false]],"ndim (cvxpy.expressions.variable.variable property)":[[6,"cvxpy.expressions.variable.Variable.ndim",false]],"neg() (in module cvxpy)":[[3,"cvxpy.neg",false]],"negexpression (class in cvxpy.atoms.affine.unary_operators)":[[2,"cvxpy.atoms.affine.unary_operators.NegExpression",false]],"nonneg (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.nonneg",false]],"nonpos (class in cvxpy.constraints.nonpos)":[[5,"cvxpy.constraints.nonpos.NonPos",false]],"nonpos (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.conedims attribute)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ConeDims.nonpos",false]],"norm() (in module cvxpy.atoms.norm)":[[4,"cvxpy.atoms.norm.norm",false]],"norm1 (class in cvxpy.atoms.norm1)":[[4,"cvxpy.atoms.norm1.norm1",false]],"norm2() (in module cvxpy.atoms.norm)":[[4,"cvxpy.atoms.norm.norm2",false]],"norm_inf (class in cvxpy.atoms)":[[4,"cvxpy.atoms.norm_inf",false]],"normnuc (class in cvxpy.atoms.norm_nuc)":[[4,"cvxpy.atoms.norm_nuc.normNuc",false]],"num_iters (cvxpy.problems.problem.solverstats attribute)":[[7,"cvxpy.problems.problem.SolverStats.num_iters",false],[7,"id1",false]],"num_scalar_data (cvxpy.problems.problem.sizemetrics attribute)":[[7,"cvxpy.problems.problem.SizeMetrics.num_scalar_data",false]],"num_scalar_eq_constr (cvxpy.problems.problem.sizemetrics attribute)":[[7,"cvxpy.problems.problem.SizeMetrics.num_scalar_eq_constr",false]],"num_scalar_leq_constr (cvxpy.problems.problem.sizemetrics attribute)":[[7,"cvxpy.problems.problem.SizeMetrics.num_scalar_leq_constr",false]],"num_scalar_variables (cvxpy.problems.problem.sizemetrics attribute)":[[7,"cvxpy.problems.problem.SizeMetrics.num_scalar_variables",false]],"objective (cvxpy.problem property)":[[7,"cvxpy.Problem.objective",false]],"one_minus_pos (class in cvxpy.atoms)":[[4,"cvxpy.atoms.one_minus_pos",false]],"oprelentrconequad (class in cvxpy.constraints.exponential)":[[5,"cvxpy.constraints.exponential.OpRelEntrConeQuad",false]],"opt_val (cvxpy.reductions.solution.solution attribute)":[[8,"cvxpy.reductions.solution.Solution.opt_val",false]],"outer() (in module cvxpy)":[[2,"cvxpy.outer",false]],"p3d_dim (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.P3D_DIM",false]],"paramconeprog (class in cvxpy.reductions.dcp2cone.cone_matrix_stuffing)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg",false]],"parameter (class in cvxpy.expressions.constants.parameter)":[[6,"cvxpy.expressions.constants.parameter.Parameter",false]],"parameters() (cvxpy.problem method)":[[7,"cvxpy.Problem.parameters",false]],"paramquadprog (class in cvxpy.reductions.qp2quad_form.qp_matrix_stuffing)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg",false]],"partial_optimize() (cvxpy.transforms.partial_optimize method)":[[13,"cvxpy.transforms.partial_optimize.partial_optimize",false]],"partial_trace() (in module cvxpy)":[[2,"cvxpy.partial_trace",false]],"partial_transpose() (in module cvxpy)":[[2,"cvxpy.partial_transpose",false]],"permute_dims (class in cvxpy)":[[2,"cvxpy.permute_dims",false]],"perspective (class in cvxpy.atoms.perspective)":[[4,"cvxpy.atoms.perspective.perspective",false]],"pf_eigenvalue (class in cvxpy.atoms.pf_eigenvalue)":[[4,"cvxpy.atoms.pf_eigenvalue.pf_eigenvalue",false]],"pnorm (class in cvxpy.atoms.pnorm)":[[4,"cvxpy.atoms.pnorm.Pnorm",false]],"pnorm() (in module cvxpy.atoms.pnorm)":[[4,"cvxpy.atoms.pnorm.pnorm",false]],"pos() (in module cvxpy)":[[3,"cvxpy.pos",false]],"powcone3d (class in cvxpy.constraints.power)":[[5,"cvxpy.constraints.power.PowCone3D",false]],"powconend (class in cvxpy.constraints.power)":[[5,"cvxpy.constraints.power.PowConeND",false]],"power (class in cvxpy)":[[3,"cvxpy.power",false]],"prepend() (cvxpy.reductions.solvers.solving_chain.solvingchain method)":[[8,"cvxpy.reductions.solvers.solving_chain.SolvingChain.prepend",false]],"primal_vars (cvxpy.reductions.solution.solution attribute)":[[8,"cvxpy.reductions.solution.Solution.primal_vars",false]],"problem (class in cvxpy)":[[7,"cvxpy.Problem",false]],"prod() (in module cvxpy.atoms.prod)":[[4,"cvxpy.atoms.prod.prod",false]],"project() (cvxpy.expressions.constants.callback_param.callbackparam method)":[[6,"cvxpy.expressions.constants.callback_param.CallbackParam.project",false]],"project() (cvxpy.expressions.constants.parameter.parameter method)":[[6,"cvxpy.expressions.constants.parameter.Parameter.project",false]],"project() (cvxpy.expressions.leaf.leaf method)":[[6,"cvxpy.expressions.leaf.Leaf.project",false]],"project() (cvxpy.expressions.variable.variable method)":[[6,"cvxpy.expressions.variable.Variable.project",false]],"project_and_assign() (cvxpy.expressions.constants.callback_param.callbackparam method)":[[6,"cvxpy.expressions.constants.callback_param.CallbackParam.project_and_assign",false]],"project_and_assign() (cvxpy.expressions.constants.parameter.parameter method)":[[6,"cvxpy.expressions.constants.parameter.Parameter.project_and_assign",false]],"project_and_assign() (cvxpy.expressions.leaf.leaf method)":[[6,"cvxpy.expressions.leaf.Leaf.project_and_assign",false]],"project_and_assign() (cvxpy.expressions.variable.variable method)":[[6,"cvxpy.expressions.variable.Variable.project_and_assign",false]],"promote() (in module cvxpy.atoms.affine.promote)":[[2,"cvxpy.atoms.affine.promote.promote",false]],"psd (class in cvxpy.constraints.psd)":[[5,"cvxpy.constraints.psd.PSD",false]],"psd (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.psd",false]],"psd (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.conedims attribute)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ConeDims.psd",false]],"psd_dim (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.PSD_DIM",false]],"psd_wrap (class in cvxpy.atoms.affine.wraps)":[[2,"cvxpy.atoms.affine.wraps.psd_wrap",false]],"ptp() (in module cvxpy.atoms.ptp)":[[4,"cvxpy.atoms.ptp.ptp",false]],"qp2symbolicqp (class in cvxpy.reductions.qp2quad_form.qp2symbolic_qp)":[[9,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp",false],[12,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp",false]],"qpmatrixstuffing (class in cvxpy.reductions.qp2quad_form.qp_matrix_stuffing)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing",false]],"quad_form() (in module cvxpy.atoms.quad_form)":[[4,"cvxpy.atoms.quad_form.quad_form",false]],"quad_over_lin (class in cvxpy.atoms.quad_over_lin)":[[4,"cvxpy.atoms.quad_over_lin.quad_over_lin",false]],"real() (in module cvxpy)":[[2,"cvxpy.real",false]],"reduce() (cvxpy.reductions.reduction.reduction method)":[[8,"cvxpy.reductions.reduction.Reduction.reduce",false]],"reduction (class in cvxpy.reductions.reduction)":[[8,"cvxpy.reductions.reduction.Reduction",false]],"reduction_attributes() (cvxpy.reductions.cvx_attr2constr.cvxattr2constr method)":[[11,"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr.reduction_attributes",false]],"reductions (cvxpy.reductions.chain.chain attribute)":[[8,"cvxpy.reductions.chain.Chain.reductions",false]],"reductions (cvxpy.reductions.solvers.solving_chain.solvingchain attribute)":[[8,"cvxpy.reductions.solvers.solving_chain.SolvingChain.reductions",false]],"register_solve() (cvxpy.problem class method)":[[7,"cvxpy.Problem.register_solve",false]],"rel_entr (class in cvxpy)":[[3,"cvxpy.rel_entr",false]],"relentrconequad (class in cvxpy.constraints.exponential)":[[5,"cvxpy.constraints.exponential.RelEntrConeQuad",false]],"reshape (class in cvxpy)":[[2,"cvxpy.reshape",false]],"resolvent() (in module cvxpy.atoms.eye_minus_inv)":[[4,"cvxpy.atoms.eye_minus_inv.resolvent",false]],"retrieve() (cvxpy.reductions.reduction.reduction method)":[[8,"cvxpy.reductions.reduction.Reduction.retrieve",false]],"scalene() (in module cvxpy)":[[3,"cvxpy.scalene",false]],"setup_time (cvxpy.problems.problem.solverstats attribute)":[[7,"cvxpy.problems.problem.SolverStats.setup_time",false],[7,"id2",false]],"shape (cvxpy.constraints.finite_set.finiteset property)":[[5,"cvxpy.constraints.finite_set.FiniteSet.shape",false]],"shape (cvxpy.constraints.nonpos.nonpos property)":[[5,"cvxpy.constraints.nonpos.NonPos.shape",false]],"shape (cvxpy.expressions.constants.callback_param.callbackparam property)":[[6,"cvxpy.expressions.constants.callback_param.CallbackParam.shape",false]],"shape (cvxpy.expressions.constants.constant property)":[[6,"cvxpy.expressions.constants.Constant.shape",false]],"shape (cvxpy.expressions.constants.parameter.parameter property)":[[6,"cvxpy.expressions.constants.parameter.Parameter.shape",false]],"shape (cvxpy.expressions.expression.expression property)":[[6,"cvxpy.expressions.expression.Expression.shape",false]],"shape (cvxpy.expressions.leaf.leaf property)":[[6,"cvxpy.expressions.leaf.Leaf.shape",false]],"shape (cvxpy.expressions.variable.variable property)":[[6,"cvxpy.expressions.variable.Variable.shape",false]],"sigma_max (class in cvxpy.atoms.sigma_max)":[[4,"cvxpy.atoms.sigma_max.sigma_max",false]],"sign (cvxpy.expressions.expression.expression property)":[[6,"cvxpy.expressions.expression.Expression.sign",false]],"size (cvxpy.constraints.finite_set.finiteset property)":[[5,"cvxpy.constraints.finite_set.FiniteSet.size",false]],"size (cvxpy.constraints.nonpos.nonpos property)":[[5,"cvxpy.constraints.nonpos.NonPos.size",false]],"size (cvxpy.expressions.constants.callback_param.callbackparam property)":[[6,"cvxpy.expressions.constants.callback_param.CallbackParam.size",false]],"size (cvxpy.expressions.constants.constant property)":[[6,"cvxpy.expressions.constants.Constant.size",false]],"size (cvxpy.expressions.constants.parameter.parameter property)":[[6,"cvxpy.expressions.constants.parameter.Parameter.size",false]],"size (cvxpy.expressions.expression.expression property)":[[6,"cvxpy.expressions.expression.Expression.size",false]],"size (cvxpy.expressions.leaf.leaf property)":[[6,"cvxpy.expressions.leaf.Leaf.size",false]],"size (cvxpy.expressions.variable.variable property)":[[6,"cvxpy.expressions.variable.Variable.size",false]],"size_metrics (cvxpy.problem property)":[[7,"cvxpy.Problem.size_metrics",false]],"sizemetrics (class in cvxpy.problems.problem)":[[7,"cvxpy.problems.problem.SizeMetrics",false]],"slacks (class in cvxpy.reductions.cone2cone.affine2direct)":[[9,"cvxpy.reductions.cone2cone.affine2direct.Slacks",false]],"soc (class in cvxpy.constraints.second_order)":[[5,"cvxpy.constraints.second_order.SOC",false]],"soc (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.soc",false]],"soc (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.conedims attribute)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ConeDims.soc",false]],"soc_dim (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.SOC_DIM",false]],"solution (class in cvxpy.reductions.solution)":[[8,"cvxpy.reductions.solution.Solution",false]],"solve()":[[78,"solve",false]],"solve() (cvxpy.problem method)":[[7,"cvxpy.Problem.solve",false]],"solve() (cvxpy.reductions.solvers.solving_chain.solvingchain method)":[[8,"cvxpy.reductions.solvers.solving_chain.SolvingChain.solve",false]],"solve_time (cvxpy.problems.problem.solverstats attribute)":[[7,"cvxpy.problems.problem.SolverStats.solve_time",false],[7,"id3",false]],"solve_via_data() (cvxpy.reductions.solvers.solving_chain.solvingchain method)":[[8,"cvxpy.reductions.solvers.solving_chain.SolvingChain.solve_via_data",false]],"solver (cvxpy.reductions.solvers.solving_chain.solvingchain attribute)":[[8,"cvxpy.reductions.solvers.solving_chain.SolvingChain.solver",false]],"solver_name (cvxpy.problems.problem.solverstats attribute)":[[7,"cvxpy.problems.problem.SolverStats.solver_name",false],[7,"id4",false]],"solver_stats (cvxpy.problem property)":[[7,"cvxpy.Problem.solver_stats",false]],"solverstats (class in cvxpy.problems.problem)":[[7,"cvxpy.problems.problem.SolverStats",false]],"solvingchain (class in cvxpy.reductions.solvers.solving_chain)":[[8,"cvxpy.reductions.solvers.solving_chain.SolvingChain",false]],"split_adjoint() (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.paramconeprog method)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.split_adjoint",false]],"split_adjoint() (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.paramquadprog method)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.split_adjoint",false]],"split_solution() (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.paramconeprog method)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.split_solution",false]],"split_solution() (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.paramquadprog method)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.split_solution",false]],"sqrt() (in module cvxpy)":[[3,"cvxpy.sqrt",false]],"square() (in module cvxpy)":[[3,"cvxpy.square",false]],"status (cvxpy.problem property)":[[7,"cvxpy.Problem.status",false]],"status (cvxpy.reductions.solution.solution attribute)":[[8,"cvxpy.reductions.solution.Solution.status",false]],"std() (in module cvxpy.atoms.stats)":[[4,"cvxpy.atoms.stats.std",false]],"stuffed_objective() (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conematrixstuffing method)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.stuffed_objective",false]],"stuffed_objective() (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.qpmatrixstuffing method)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.stuffed_objective",false]],"sum() (in module cvxpy)":[[2,"cvxpy.sum",false]],"sum_largest (class in cvxpy.atoms.sum_largest)":[[4,"cvxpy.atoms.sum_largest.sum_largest",false]],"sum_smallest() (in module cvxpy.atoms.sum_smallest)":[[4,"cvxpy.atoms.sum_smallest.sum_smallest",false]],"sum_squares() (in module cvxpy.atoms.sum_squares)":[[4,"cvxpy.atoms.sum_squares.sum_squares",false]],"suppfunc (class in cvxpy.transforms.suppfunc)":[[13,"cvxpy.transforms.suppfunc.SuppFunc",false]],"suppfuncatom (class in cvxpy.atoms.suppfunc)":[[4,"cvxpy.atoms.suppfunc.SuppFuncAtom",false]],"swapaxes (class in cvxpy)":[[2,"cvxpy.swapaxes",false]],"t (cvxpy.constraints.second_order.soc attribute)":[[5,"cvxpy.constraints.second_order.SOC.t",false]],"t (cvxpy.expressions.constants.callback_param.callbackparam property)":[[6,"cvxpy.expressions.constants.callback_param.CallbackParam.T",false]],"t (cvxpy.expressions.constants.constant property)":[[6,"cvxpy.expressions.constants.Constant.T",false]],"t (cvxpy.expressions.constants.parameter.parameter property)":[[6,"cvxpy.expressions.constants.parameter.Parameter.T",false]],"t (cvxpy.expressions.expression.expression property)":[[6,"cvxpy.expressions.expression.Expression.T",false]],"t (cvxpy.expressions.leaf.leaf property)":[[6,"cvxpy.expressions.leaf.Leaf.T",false]],"t (cvxpy.expressions.variable.variable property)":[[6,"cvxpy.expressions.variable.Variable.T",false]],"targets_and_priorities() (cvxpy.transforms.scalarize method)":[[13,"cvxpy.transforms.scalarize.targets_and_priorities",false]],"tr_inv() (in module cvxpy.atoms.tr_inv)":[[4,"cvxpy.atoms.tr_inv.tr_inv",false]],"trace (class in cvxpy)":[[2,"cvxpy.trace",false]],"transpose (class in cvxpy)":[[2,"cvxpy.transpose",false]],"tv() (in module cvxpy.atoms.total_variation)":[[4,"cvxpy.atoms.total_variation.tv",false]],"unpack_results() (cvxpy.problem method)":[[7,"cvxpy.Problem.unpack_results",false]],"upper_tri (class in cvxpy)":[[2,"cvxpy.upper_tri",false]],"value (cvxpy.expressions.constants.callback_param.callbackparam property)":[[6,"cvxpy.expressions.constants.callback_param.CallbackParam.value",false]],"value (cvxpy.expressions.constants.constant property)":[[6,"cvxpy.expressions.constants.Constant.value",false]],"value (cvxpy.expressions.constants.parameter.parameter property)":[[6,"cvxpy.expressions.constants.parameter.Parameter.value",false]],"value (cvxpy.expressions.expression.expression property)":[[6,"cvxpy.expressions.expression.Expression.value",false]],"value (cvxpy.expressions.leaf.leaf property)":[[6,"cvxpy.expressions.leaf.Leaf.value",false]],"value (cvxpy.expressions.variable.variable property)":[[6,"cvxpy.expressions.variable.Variable.value",false]],"value (cvxpy.problem property)":[[7,"cvxpy.Problem.value",false]],"value() (cvxpy.constraints.constraint.constraint method)":[[5,"cvxpy.constraints.constraint.Constraint.value",false]],"value() (cvxpy.constraints.exponential.expcone method)":[[5,"cvxpy.constraints.exponential.ExpCone.value",false]],"value() (cvxpy.constraints.exponential.oprelentrconequad method)":[[5,"cvxpy.constraints.exponential.OpRelEntrConeQuad.value",false]],"value() (cvxpy.constraints.exponential.relentrconequad method)":[[5,"cvxpy.constraints.exponential.RelEntrConeQuad.value",false]],"value() (cvxpy.constraints.nonpos.nonpos method)":[[5,"cvxpy.constraints.nonpos.NonPos.value",false]],"value() (cvxpy.constraints.power.powcone3d method)":[[5,"cvxpy.constraints.power.PowCone3D.value",false]],"value() (cvxpy.constraints.power.powconend method)":[[5,"cvxpy.constraints.power.PowConeND.value",false]],"value() (cvxpy.constraints.psd.psd method)":[[5,"cvxpy.constraints.psd.PSD.value",false]],"value() (cvxpy.constraints.second_order.soc method)":[[5,"cvxpy.constraints.second_order.SOC.value",false]],"value() (cvxpy.constraints.zero.zero method)":[[5,"cvxpy.constraints.zero.Zero.value",false]],"var() (in module cvxpy.atoms.stats)":[[4,"cvxpy.atoms.stats.var",false]],"var_dict (cvxpy.problem property)":[[7,"cvxpy.Problem.var_dict",false]],"variable (class in cvxpy.expressions.variable)":[[6,"cvxpy.expressions.variable.Variable",false]],"variables() (cvxpy.problem method)":[[7,"cvxpy.Problem.variables",false]],"vdot() (in module cvxpy)":[[2,"cvxpy.vdot",false]],"vec() (in module cvxpy)":[[2,"cvxpy.vec",false]],"vec_to_upper_tri() (in module cvxpy.atoms.affine.upper_tri)":[[2,"cvxpy.atoms.affine.upper_tri.vec_to_upper_tri",false]],"violation() (cvxpy.constraints.constraint.constraint method)":[[5,"cvxpy.constraints.constraint.Constraint.violation",false]],"violation() (cvxpy.constraints.exponential.expcone method)":[[5,"cvxpy.constraints.exponential.ExpCone.violation",false]],"violation() (cvxpy.constraints.finite_set.finiteset method)":[[5,"cvxpy.constraints.finite_set.FiniteSet.violation",false]],"violation() (cvxpy.constraints.nonpos.nonpos method)":[[5,"cvxpy.constraints.nonpos.NonPos.violation",false]],"violation() (cvxpy.constraints.power.powcone3d method)":[[5,"cvxpy.constraints.power.PowCone3D.violation",false]],"violation() (cvxpy.constraints.power.powconend method)":[[5,"cvxpy.constraints.power.PowConeND.violation",false]],"violation() (cvxpy.constraints.psd.psd method)":[[5,"cvxpy.constraints.psd.PSD.violation",false]],"violation() (cvxpy.constraints.second_order.soc method)":[[5,"cvxpy.constraints.second_order.SOC.violation",false]],"violation() (cvxpy.constraints.zero.zero method)":[[5,"cvxpy.constraints.zero.Zero.violation",false]],"von_neumann_entr (class in cvxpy)":[[4,"cvxpy.von_neumann_entr",false]],"vstack() (in module cvxpy)":[[2,"cvxpy.vstack",false]],"w (cvxpy.atoms.geo_mean.geo_mean attribute)":[[4,"cvxpy.atoms.geo_mean.geo_mean.w",false]],"weighted_sum() (cvxpy.transforms.scalarize method)":[[13,"cvxpy.transforms.scalarize.weighted_sum",false]],"x (cvxpy.constraints.second_order.soc attribute)":[[5,"cvxpy.constraints.second_order.SOC.X",false]],"xexp (class in cvxpy)":[[3,"cvxpy.xexp",false]],"zero (class in cvxpy.constraints.zero)":[[5,"cvxpy.constraints.zero.Zero",false]],"zero (cvxpy.reductions.dcp2cone.cone_matrix_stuffing.conedims attribute)":[[10,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.zero",false]],"zero (cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.conedims attribute)":[[12,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ConeDims.zero",false]]},"objects":{"":[[70,0,1,0,"Leaf","Creates a Leaf object (e.g., Variable or Parameter). Only one attribute can be active (set to True)."],[78,0,1,0,"solve","Solves the problem using the specified method."]],"Leaf":[[70,1,2,0,"NSD","Is the variable constrained to be symmetric negative semidefinite?"],[70,1,2,0,"PSD","Is the variable constrained to be symmetric positive semidefinite?"],[70,1,2,0,"boolean","Is the variable boolean (i.e., 0 or 1)? True, which constrains the entire variable to be boolean, False, or a list of indices which should be constrained as boolean, where each index is a tuple of length exactly equal to the length of shape."],[70,1,2,0,"complex","Is the variable constrained to be complex-valued?"],[70,1,2,0,"diag","Is the variable constrained to be diagonal?"],[70,1,2,0,"hermitian","Is the variable constrained to be Hermitian?"],[70,1,2,0,"imag","Is the variable constrained to be imaginary?"],[70,1,2,0,"integer","Is the variable integer? The semantics are the same as the boolean argument."],[70,1,2,0,"neg","Is the variable constrained to be negative?"],[70,1,2,0,"nonneg","Is the variable constrained to be nonnegative?"],[70,1,2,0,"nonpos","Is the variable constrained to be nonpositive?"],[70,1,2,0,"pos","Is the variable constrained to be positive?"],[70,1,2,0,"shape","The variable dimensions, defaults to scalar (0D)."],[70,1,2,0,"sparsity","Fixed sparsity pattern for the variable."],[70,1,2,0,"symmetric","Is the variable constrained to be symmetric?"],[70,1,2,0,"value","A value to assign to the variable."]],"cvxpy":[[7,2,1,0,"Maximize","An optimization objective for maximization."],[7,2,1,0,"Minimize","An optimization objective for minimization."],[7,2,1,0,"Problem","A convex optimization problem."],[3,2,1,0,"abs","Bases: Elementwise"],[2,0,1,0,"bmat","Constructs a block matrix."],[2,2,1,0,"broadcast_to","Bases: AffAtom"],[2,2,1,0,"conj","Elementwise complex conjugate."],[2,2,1,0,"convolve","Bases: AffAtom"],[2,2,1,0,"cumsum","Bases: AffAtom, AxisAtom"],[2,0,1,0,"diag","Extracts the diagonal from a matrix or makes a vector a diagonal matrix."],[2,0,1,0,"diff","Vector of kth order differences."],[3,2,1,0,"entr","Bases: Elementwise"],[3,2,1,0,"exp","Bases: Elementwise"],[2,0,1,0,"hstack","Horizontal concatenation of an arbitrary number of Expressions."],[3,2,1,0,"huber","Bases: Elementwise"],[2,2,1,0,"imag","Extracts the imaginary part of an expression."],[3,0,1,0,"inv_pos","x^{-1} for x > 0."],[3,2,1,0,"kl_div","Bases: Elementwise"],[2,2,1,0,"kron","Bases: AffAtom"],[3,2,1,0,"log","Bases: Elementwise"],[3,2,1,0,"log1p","Bases: log"],[3,2,1,0,"log_normcdf","Bases:"],[3,2,1,0,"loggamma","Bases:"],[3,2,1,0,"logistic","Bases: Elementwise"],[2,0,1,0,"matmul","Matrix multiplication."],[3,2,1,0,"maximum","Bases: Elementwise"],[3,0,1,0,"minimum","Elementwise minimum of a sequence of expressions."],[2,2,1,0,"moveaxis","Bases:"],[2,2,1,0,"multiply","Bases: MulExpression"],[3,0,1,0,"neg","Alias for -minimum{x, 0}."],[2,0,1,0,"outer","Return the outer product of (x,y)."],[2,0,1,0,"partial_trace","Assumes \\texttt{expr} = X_1 \\otimes \\cdots \\otimes X_n is a 2D Kronecker product composed of n = \\texttt{len(dims)} implicit subsystems. Letting k = \\texttt{axis}, the returned expression represents the partial trace of \\texttt{expr} along its k^{\\text{th}} implicit subsystem:"],[2,0,1,0,"partial_transpose","Assumes \\texttt{expr} = X_1 \\otimes ... \\otimes X_n is a 2D Kronecker product composed of n = \\texttt{len(dims)} implicit subsystems. Letting k = \\texttt{axis}, the returned expression is a partial transpose of \\texttt{expr}, with the transpose applied to its k^{\\text{th}} implicit subsystem:"],[2,2,1,0,"permute_dims","Bases:"],[3,0,1,0,"pos","Alias for maximum{x,0}."],[3,2,1,0,"power","Bases: Elementwise"],[2,0,1,0,"real","Extracts the real part of an expression."],[3,2,1,0,"rel_entr","Bases: Elementwise"],[2,2,1,0,"reshape","Bases: AffAtom"],[3,0,1,0,"scalene","Alias for alpha*pos(x) + beta*neg(x)."],[3,0,1,0,"sqrt","The square root of an expression."],[3,0,1,0,"square","The square of an expression."],[2,0,1,0,"sum","Sum the entries of an expression over a given axis."],[2,2,1,0,"swapaxes","Bases:"],[2,2,1,0,"trace","Bases: AffAtom"],[2,2,1,0,"transpose","Bases: AffAtom"],[2,2,1,0,"upper_tri","Bases: AffAtom"],[2,0,1,0,"vdot","Return the standard inner product (or \"scalar product\") of (x,y)."],[2,0,1,0,"vec","Flattens the matrix X into a 1-d array."],[4,2,1,0,"von_neumann_entr","Bases: Atom"],[2,0,1,0,"vstack","Wrapper on vstack to ensure list argument."],[3,2,1,0,"xexp","Bases: Elementwise"]],"cvxpy.Maximize":[[7,3,1,0,"is_dcp","The objective must be concave."],[7,3,1,0,"is_dgp","The objective must be log-log concave."]],"cvxpy.Maximize.__init__":[[7,1,2,0,"expr","The expression to maximize."]],"cvxpy.Maximize.is_dcp":[[7,1,2,"cvxpy.Maximize.is_dcp","dpp","The objective must be concave."]],"cvxpy.Maximize.is_dgp":[[7,1,2,"cvxpy.Maximize.is_dgp","dpp","The objective must be log-log concave."]],"cvxpy.Minimize":[[7,3,1,0,"is_dcp","The objective must be convex."],[7,3,1,0,"is_dgp","The objective must be log-log convex."]],"cvxpy.Minimize.__init__":[[7,1,2,0,"expr","The expression to minimize."]],"cvxpy.Minimize.is_dcp":[[7,1,2,"cvxpy.Minimize.is_dcp","dpp","The objective must be convex."]],"cvxpy.Minimize.is_dgp":[[7,1,2,"cvxpy.Minimize.is_dgp","dpp","The objective must be log-log convex."]],"cvxpy.Problem":[[7,3,1,0,"atoms","Accessor method for atoms."],[7,3,1,0,"backward","Compute the gradient of a solution with respect to Parameters."],[7,4,1,0,"compilation_time","The number of seconds it took to compile the problem the last time it was compiled."],[7,3,1,0,"constants","Accessor method for constants."],[7,4,1,0,"constraints","A shallow copy of the problem's constraints."],[7,3,1,0,"derivative","Apply the derivative of the solution map to perturbations in the Parameters"],[7,3,1,0,"get_problem_data","Returns the problem data used in the call to the solver."],[7,3,1,0,"is_dcp","Does the problem satisfy DCP rules?"],[7,3,1,0,"is_dgp","Does the problem satisfy DGP rules?"],[7,3,1,0,"is_dpp","Does the problem satisfy DPP rules?"],[7,3,1,0,"is_dqcp","Does the problem satisfy the DQCP rules?"],[7,3,1,0,"is_qp","Is problem a quadratic program?"],[7,4,1,0,"objective","The problem's objective."],[7,3,1,0,"parameters","Accessor method for parameters."],[7,3,1,0,"register_solve","Adds a solve method to the Problem class."],[7,4,1,0,"size_metrics","Information about the problem's size."],[7,3,1,0,"solve","Compiles and solves the problem using the specified method."],[7,4,1,0,"solver_stats","Information returned by the solver."],[7,4,1,0,"status","The status from the last time the problem was solved; one of optimal, infeasible, or unbounded (with or without suffix inaccurate)."],[7,3,1,0,"unpack_results","Updates the problem state given the solver results."],[7,4,1,0,"value","The value from the last time the problem was solved (or None if not solved)."],[7,4,1,0,"var_dict","Expose all variables as a dictionary"],[7,3,1,0,"variables","Accessor method for variables."]],"cvxpy.Problem.__init__":[[7,1,2,0,"constraints","The constraints on the problem variables."],[7,1,2,0,"objective","The problem's objective."]],"cvxpy.Problem.get_problem_data":[[7,1,2,0,"canon_backend","'CPP' (default) | 'SCIPY' Specifies which backend to use for canonicalization, which can affect compilation time."],[7,1,2,0,"enforce_dpp","When True, a DPPError will be thrown when trying to parse a non-DPP problem (instead of just a warning)."],[7,1,2,0,"gp","If True, then parses the problem as a disciplined geometric program instead of a disciplined convex program."],[7,1,2,0,"ignore_dpp","When True, DPP problems will be treated as non-DPP, which may speed up compilation."],[7,1,2,0,"solver","The solver the problem data is for."],[7,1,2,0,"solver_opts","A dict of options that will be passed to the specific solver. In general, these options will override any default settings imposed by cvxpy."],[7,1,2,0,"verbose","If True, print verbose output related to problem compilation."]],"cvxpy.Problem.is_dcp":[[7,1,2,0,"dpp","If True, enforce the disciplined parametrized programming (DPP) ruleset; only relevant when the problem involves Parameters. DPP is a mild restriction of DCP."]],"cvxpy.Problem.is_dgp":[[7,1,2,0,"dpp","If True, enforce the disciplined parametrized programming (DPP) ruleset; only relevant when the problem involves Parameters. DPP is a mild restriction of DGP."]],"cvxpy.Problem.is_dpp":[[7,1,2,0,"context","Whether to check DPP-compliance for DCP or DGP; context should be either 'dcp' or 'dgp'."]],"cvxpy.Problem.register_solve":[[7,1,2,0,"func","The function that executes the solve method."],[7,1,2,0,"name","The keyword for the method."]],"cvxpy.Problem.solve":[[7,1,2,"cvxpy.Problem.solve","args","Compiles and solves the problem using the specified method."],[7,1,2,0,"kwargs","Additional solver specific arguments."]],"cvxpy.Problem.unpack_results":[[7,1,2,0,"chain","A solving chain that was used to solve the problem."],[7,1,2,0,"inverse_data","The inverse data returned by applying the chain to the problem."],[7,1,2,0,"solution","The solution returned by applying the chain to the problem and invoking the solver on the resulting data."]],"cvxpy.abs.__init__":[[3,1,2,"cvxpy.abs","x","Bases: Elementwise"]],"cvxpy.atoms":[[4,2,1,0,"norm_inf","Bases: AxisAtom"],[4,2,1,0,"one_minus_pos","Bases: Atom"]],"cvxpy.atoms.affine.add_expr":[[2,2,1,0,"AddExpression","Bases: AffAtom"]],"cvxpy.atoms.affine.add_expr.AddExpression.__init__":[[2,1,2,"cvxpy.atoms.affine.add_expr.AddExpression","arg_groups","Bases: AffAtom"]],"cvxpy.atoms.affine.binary_operators":[[2,2,1,0,"DivExpression","Bases: BinaryOperator"],[2,2,1,0,"MulExpression","Bases: BinaryOperator"]],"cvxpy.atoms.affine.binary_operators.DivExpression.__init__":[[2,1,2,"cvxpy.atoms.affine.binary_operators.DivExpression","lh_expr","Bases: BinaryOperator"],[2,1,2,"cvxpy.atoms.affine.binary_operators.DivExpression","rh_expr","Bases: BinaryOperator"]],"cvxpy.atoms.affine.binary_operators.MulExpression.__init__":[[2,1,2,0,"lh_exp","The left-hand side of the multiplication."],[2,1,2,0,"rh_exp","The right-hand side of the multiplication."]],"cvxpy.atoms.affine.index":[[2,2,1,0,"index","Bases: AffAtom"]],"cvxpy.atoms.affine.index.index.__init__":[[2,1,2,0,"expr","The expression indexed/sliced into."],[2,1,2,0,"key","The index/slicing key (i.e."],[2,1,2,"cvxpy.atoms.affine.index.index","orig_key","Bases: AffAtom"]],"cvxpy.atoms.affine.promote":[[2,0,1,0,"promote","Promote a scalar expression to a vector/matrix."]],"cvxpy.atoms.affine.promote.promote":[[2,1,2,0,"expr","The expression to promote."],[2,1,2,0,"shape","The shape to promote to."]],"cvxpy.atoms.affine.unary_operators":[[2,2,1,0,"NegExpression","Bases: UnaryOperator"]],"cvxpy.atoms.affine.unary_operators.NegExpression.__init__":[[2,1,2,"cvxpy.atoms.affine.unary_operators.NegExpression","expr","Bases: UnaryOperator"]],"cvxpy.atoms.affine.upper_tri":[[2,0,1,0,"vec_to_upper_tri","Reshapes a vector into an upper triangular matrix in row-major order. The strict argument specifies whether an upper or a strict upper triangular matrix should be returned. Inverts cp.upper_tri."]],"cvxpy.atoms.affine.upper_tri.vec_to_upper_tri":[[2,1,2,"cvxpy.atoms.affine.upper_tri.vec_to_upper_tri","expr","Reshapes a vector into an upper triangular matrix in row-major order. The strict argument specifies whether an upper or a strict upper triangular matrix should be returned. Inverts cp.upper_tri."],[2,1,2,"cvxpy.atoms.affine.upper_tri.vec_to_upper_tri","strict","Reshapes a vector into an upper triangular matrix in row-major order. The strict argument specifies whether an upper or a strict upper triangular matrix should be returned. Inverts cp.upper_tri."]],"cvxpy.atoms.affine.wraps":[[2,2,1,0,"psd_wrap","Asserts that a square matrix is PSD."]],"cvxpy.atoms.affine.wraps.psd_wrap.__init__":[[2,1,2,"cvxpy.atoms.affine.wraps.psd_wrap","arg","Asserts that a square matrix is PSD."]],"cvxpy.atoms.atom":[[1,2,1,0,"Atom","Bases: Expression"]],"cvxpy.atoms.atom.Atom":[[1,4,1,0,"domain","A list of constraints describing the closure of the region where the expression is finite."],[1,4,1,0,"grad","Gives the (sub/super)gradient of the expression w.r.t. each variable."],[1,3,1,0,"is_atom_affine","Is the atom affine?"],[1,3,1,0,"is_atom_concave","Is the atom concave?"],[1,3,1,0,"is_atom_convex","Is the atom convex?"],[1,3,1,0,"is_atom_log_log_affine","Is the atom log-log affine?"],[1,3,1,0,"is_atom_log_log_concave","Is the atom log-log concave?"],[1,3,1,0,"is_atom_log_log_convex","Is the atom log-log convex?"],[1,3,1,0,"is_decr","Is the composition non-increasing in argument idx?"],[1,3,1,0,"is_incr","Is the composition non-decreasing in argument idx?"]],"cvxpy.atoms.atom.Atom.__init__":[[1,1,2,"cvxpy.atoms.atom.Atom","args","Bases: Expression"]],"cvxpy.atoms.atom.Atom.is_decr":[[1,1,2,"cvxpy.atoms.atom.Atom.is_decr","idx","Is the composition non-increasing in argument idx?"]],"cvxpy.atoms.atom.Atom.is_incr":[[1,1,2,"cvxpy.atoms.atom.Atom.is_incr","idx","Is the composition non-decreasing in argument idx?"]],"cvxpy.atoms.cummax":[[4,2,1,0,"cummax","Bases: AxisAtom"]],"cvxpy.atoms.cummax.cummax.__init__":[[4,1,2,"cvxpy.atoms.cummax.cummax","axis","Bases: AxisAtom"],[4,1,2,"cvxpy.atoms.cummax.cummax","x","Bases: AxisAtom"]],"cvxpy.atoms.cumprod":[[4,2,1,0,"cumprod","Bases: AffAtom, AxisAtom"]],"cvxpy.atoms.cumprod.cumprod":[[4,5,1,0,"axis","The axis to multiply across."],[4,5,1,0,"expr","The expression being multiplied."]],"cvxpy.atoms.cumprod.cumprod.__init__":[[4,1,2,"cvxpy.atoms.cumprod.cumprod","axis","Bases: AffAtom, AxisAtom"],[4,1,2,"cvxpy.atoms.cumprod.cumprod","expr","Bases: AffAtom, AxisAtom"]],"cvxpy.atoms.cvar":[[4,0,1,0,"cvar","Conditional value at risk (CVaR) at probability level \\beta of a vector x."]],"cvxpy.atoms.cvar.cvar":[[4,1,2,0,"beta","The probability level, must be in the range [0, 1)."],[4,1,2,0,"x","The vector of samples."]],"cvxpy.atoms.dotsort":[[4,2,1,0,"dotsort","Bases: Atom"]],"cvxpy.atoms.dotsort.dotsort.__init__":[[4,1,2,"cvxpy.atoms.dotsort.dotsort","W","Bases: Atom"],[4,1,2,"cvxpy.atoms.dotsort.dotsort","X","Bases: Atom"]],"cvxpy.atoms.eye_minus_inv":[[4,2,1,0,"eye_minus_inv","Bases: Atom"],[4,0,1,0,"resolvent","The resolvent of a positive matrix, (sI - X)^{-1}."]],"cvxpy.atoms.eye_minus_inv.eye_minus_inv.__init__":[[4,1,2,0,"X","A positive square matrix."]],"cvxpy.atoms.eye_minus_inv.resolvent":[[4,1,2,0,"X","A positive square matrix."],[4,1,2,0,"s","A positive scalar."]],"cvxpy.atoms.geo_mean":[[4,2,1,0,"geo_mean","Bases: Atom"]],"cvxpy.atoms.geo_mean.geo_mean":[[4,5,1,0,"approx_error","The error in approximating p/sum(p) with w, given by \\|p/\\mathbf{1}^T p - w \\|_\\infty"],[4,5,1,0,"w","A rational approximation of p/sum(p)."]],"cvxpy.atoms.geo_mean.geo_mean.__init__":[[4,1,2,0,"max_denom","The maximum denominator to use in approximating p/sum(p) with geo_mean.w."],[4,1,2,0,"p","A vector of weights for the weighted geometric mean"],[4,1,2,0,"x","A column or row vector whose elements we will take the geometric mean of."]],"cvxpy.atoms.gmatmul":[[4,2,1,0,"gmatmul","Bases: Atom"]],"cvxpy.atoms.gmatmul.gmatmul.__init__":[[4,1,2,0,"A","A constant matrix."],[4,1,2,0,"X","A positive matrix."]],"cvxpy.atoms.harmonic_mean":[[4,0,1,0,"harmonic_mean","The harmonic mean of x."]],"cvxpy.atoms.harmonic_mean.harmonic_mean":[[4,1,2,0,"x","The expression whose harmonic mean is to be computed."]],"cvxpy.atoms.inv_prod":[[4,0,1,0,"inv_prod","The reciprocal of a product of the entries of a vector x."]],"cvxpy.atoms.inv_prod.inv_prod":[[4,1,2,"cvxpy.atoms.inv_prod.inv_prod","value","The reciprocal of a product of the entries of a vector x."]],"cvxpy.atoms.lambda_max":[[4,2,1,0,"lambda_max","Bases: Atom"]],"cvxpy.atoms.lambda_max.lambda_max.__init__":[[4,1,2,"cvxpy.atoms.lambda_max.lambda_max","A","Bases: Atom"]],"cvxpy.atoms.lambda_min":[[4,0,1,0,"lambda_min","Minimum eigenvalue; \\lambda_{\\min}(A)."]],"cvxpy.atoms.lambda_min.lambda_min":[[4,1,2,"cvxpy.atoms.lambda_min.lambda_min","X","Minimum eigenvalue; \\lambda_{\\min}(A)."]],"cvxpy.atoms.lambda_sum_largest":[[4,0,1,0,"lambda_sum_largest","Sum of the largest k eigenvalues."]],"cvxpy.atoms.lambda_sum_largest.lambda_sum_largest":[[4,1,2,"cvxpy.atoms.lambda_sum_largest.lambda_sum_largest","X","Sum of the largest k eigenvalues."],[4,1,2,"cvxpy.atoms.lambda_sum_largest.lambda_sum_largest","k","Sum of the largest k eigenvalues."]],"cvxpy.atoms.lambda_sum_smallest":[[4,0,1,0,"lambda_sum_smallest","Sum of the largest k eigenvalues."]],"cvxpy.atoms.lambda_sum_smallest.lambda_sum_smallest":[[4,1,2,"cvxpy.atoms.lambda_sum_smallest.lambda_sum_smallest","X","Sum of the largest k eigenvalues."],[4,1,2,"cvxpy.atoms.lambda_sum_smallest.lambda_sum_smallest","k","Sum of the largest k eigenvalues."]],"cvxpy.atoms.log_det":[[4,2,1,0,"log_det","Bases: Atom"]],"cvxpy.atoms.log_det.log_det.__init__":[[4,1,2,"cvxpy.atoms.log_det.log_det","A","Bases: Atom"]],"cvxpy.atoms.log_sum_exp":[[4,2,1,0,"log_sum_exp","Bases: AxisAtom"]],"cvxpy.atoms.log_sum_exp.log_sum_exp.__init__":[[4,1,2,"cvxpy.atoms.log_sum_exp.log_sum_exp","axis","Bases: AxisAtom"],[4,1,2,"cvxpy.atoms.log_sum_exp.log_sum_exp","keepdims","Bases: AxisAtom"],[4,1,2,"cvxpy.atoms.log_sum_exp.log_sum_exp","x","Bases: AxisAtom"]],"cvxpy.atoms.matrix_frac":[[4,0,1,0,"matrix_frac","tr X.T*P^-1*X"]],"cvxpy.atoms.matrix_frac.matrix_frac":[[4,1,2,"cvxpy.atoms.matrix_frac.matrix_frac","P","tr X.T*P^-1*X"],[4,1,2,"cvxpy.atoms.matrix_frac.matrix_frac","X","tr X.T*P^-1*X"]],"cvxpy.atoms.max":[[4,2,1,0,"max","Bases: AxisAtom"]],"cvxpy.atoms.max.max.__init__":[[4,1,2,"cvxpy.atoms.max.max","axis","Bases: AxisAtom"],[4,1,2,"cvxpy.atoms.max.max","keepdims","Bases: AxisAtom"],[4,1,2,"cvxpy.atoms.max.max","x","Bases: AxisAtom"]],"cvxpy.atoms.min":[[4,0,1,0,"min","\\min{i,j}\\{X_{i,j}\\}."]],"cvxpy.atoms.min.min":[[4,1,2,"cvxpy.atoms.min.min","axis","\\min{i,j}\\{X_{i,j}\\}."],[4,1,2,"cvxpy.atoms.min.min","keepdims","\\min{i,j}\\{X_{i,j}\\}."],[4,1,2,"cvxpy.atoms.min.min","x","\\min{i,j}\\{X_{i,j}\\}."]],"cvxpy.atoms.mixed_norm":[[4,0,1,0,"mixed_norm","Lp,q norm; (\\sum_k (\\sum_l \\lvert x_{k,l} \\rvert^p)^{q/p})^{1/q}."]],"cvxpy.atoms.mixed_norm.mixed_norm":[[4,1,2,0,"X","The matrix to take the l_{p,q} norm of."],[4,1,2,0,"p","The type of inner norm."],[4,1,2,0,"q","The type of outer norm."]],"cvxpy.atoms.norm":[[4,0,1,0,"norm","Wrapper on the different norm atoms."],[4,0,1,0,"norm2","The 2-norm of x."]],"cvxpy.atoms.norm.norm":[[4,1,2,0,"axis",""],[4,1,2,0,"keepdims","in the result as dimensions with size one."],[4,1,2,0,"p","The type of norm."],[4,1,2,0,"x","The value to take the norm of."]],"cvxpy.atoms.norm.norm2":[[4,1,2,"cvxpy.atoms.norm.norm2","axis","The 2-norm of x."],[4,1,2,0,"x","The value to take the norm of."]],"cvxpy.atoms.norm1":[[4,2,1,0,"norm1","Bases: AxisAtom"]],"cvxpy.atoms.norm1.norm1.__init__":[[4,1,2,"cvxpy.atoms.norm1.norm1","axis","Bases: AxisAtom"],[4,1,2,"cvxpy.atoms.norm1.norm1","expr","Bases: AxisAtom"],[4,1,2,"cvxpy.atoms.norm1.norm1","keepdims","Bases: AxisAtom"]],"cvxpy.atoms.norm_inf.__init__":[[4,1,2,"cvxpy.atoms.norm_inf","axis","Bases: AxisAtom"],[4,1,2,"cvxpy.atoms.norm_inf","expr","Bases: AxisAtom"],[4,1,2,"cvxpy.atoms.norm_inf","keepdims","Bases: AxisAtom"]],"cvxpy.atoms.norm_nuc":[[4,2,1,0,"normNuc","Bases: Atom"]],"cvxpy.atoms.norm_nuc.normNuc.__init__":[[4,1,2,"cvxpy.atoms.norm_nuc.normNuc","A","Bases: Atom"]],"cvxpy.atoms.one_minus_pos":[[4,0,1,0,"diff_pos","The difference x - y with domain {x, y : x > y > 0}."]],"cvxpy.atoms.one_minus_pos.__init__":[[4,1,2,0,"x","An Expression."]],"cvxpy.atoms.one_minus_pos.diff_pos":[[4,1,2,0,"x","An Expression."],[4,1,2,0,"y","An Expression."]],"cvxpy.atoms.perspective":[[4,2,1,0,"perspective","Bases: Atom"]],"cvxpy.atoms.perspective.perspective.__init__":[[4,1,2,"cvxpy.atoms.perspective.perspective","f","Bases: Atom"],[4,1,2,"cvxpy.atoms.perspective.perspective","f_recession","Bases: Atom"],[4,1,2,"cvxpy.atoms.perspective.perspective","s","Bases: Atom"]],"cvxpy.atoms.pf_eigenvalue":[[4,2,1,0,"pf_eigenvalue","Bases: Atom"]],"cvxpy.atoms.pf_eigenvalue.pf_eigenvalue.__init__":[[4,1,2,0,"X","A positive square matrix."]],"cvxpy.atoms.pnorm":[[4,2,1,0,"Pnorm","The vector p-norm, for p not equal to 1 or infinity."],[4,0,1,0,"pnorm","Factory function for a mathematical p-norm."]],"cvxpy.atoms.pnorm.Pnorm.__init__":[[4,1,2,"cvxpy.atoms.pnorm.Pnorm","axis","The vector p-norm, for p not equal to 1 or infinity."],[4,1,2,"cvxpy.atoms.pnorm.Pnorm","keepdims","The vector p-norm, for p not equal to 1 or infinity."],[4,1,2,"cvxpy.atoms.pnorm.Pnorm","max_denom","The vector p-norm, for p not equal to 1 or infinity."],[4,1,2,0,"p","We require that p > 1, but p \\neq \\infty."],[4,1,2,0,"x","The value to take the norm of."]],"cvxpy.atoms.pnorm.pnorm":[[4,1,2,"cvxpy.atoms.pnorm.pnorm","axis","Factory function for a mathematical p-norm."],[4,1,2,"cvxpy.atoms.pnorm.pnorm","keepdims","Factory function for a mathematical p-norm."],[4,1,2,"cvxpy.atoms.pnorm.pnorm","max_denom","Factory function for a mathematical p-norm."],[4,1,2,0,"p","The type of norm to construct; set this to np.inf or 'inf' to construct an infinity norm."],[4,1,2,"cvxpy.atoms.pnorm.pnorm","x","Factory function for a mathematical p-norm."]],"cvxpy.atoms.prod":[[4,0,1,0,"prod","Multiply the entries of an expression."]],"cvxpy.atoms.prod.prod":[[4,1,2,0,"axis","The axis along which to take the product; ignored if expr is a list."],[4,1,2,0,"expr","The expression to multiply the entries of, or a list of Expressions and numeric types."],[4,1,2,0,"keepdims","Whether to drop dimensions after taking the product; ignored if expr is a list."]],"cvxpy.atoms.ptp":[[4,0,1,0,"ptp","Range of values (maximum - minimum) along an axis."]],"cvxpy.atoms.ptp.ptp":[[4,1,2,"cvxpy.atoms.ptp.ptp","axis","Range of values (maximum - minimum) along an axis."],[4,1,2,"cvxpy.atoms.ptp.ptp","keepdims","Range of values (maximum - minimum) along an axis."],[4,1,2,"cvxpy.atoms.ptp.ptp","x","Range of values (maximum - minimum) along an axis."]],"cvxpy.atoms.quad_form":[[4,0,1,0,"quad_form","Alias for x^T P x."]],"cvxpy.atoms.quad_form.quad_form":[[4,1,2,0,"P",""],[4,1,2,0,"assume_PSD",""],[4,1,2,0,"x",""]],"cvxpy.atoms.quad_over_lin":[[4,2,1,0,"quad_over_lin","Bases: Atom"]],"cvxpy.atoms.quad_over_lin.quad_over_lin.__init__":[[4,1,2,"cvxpy.atoms.quad_over_lin.quad_over_lin","x","Bases: Atom"],[4,1,2,"cvxpy.atoms.quad_over_lin.quad_over_lin","y","Bases: Atom"]],"cvxpy.atoms.sigma_max":[[4,2,1,0,"sigma_max","Bases: Atom"]],"cvxpy.atoms.sigma_max.sigma_max.__init__":[[4,1,2,"cvxpy.atoms.sigma_max.sigma_max","A","Bases: Atom"]],"cvxpy.atoms.stats":[[2,0,1,0,"mean","Returns the mean of x."],[4,0,1,0,"std","Returns the standard deviation of x."],[4,0,1,0,"var","Returns the variance of x."]],"cvxpy.atoms.stats.mean":[[2,1,2,"cvxpy.atoms.stats.mean","axis","Returns the mean of x."],[2,1,2,"cvxpy.atoms.stats.mean","keepdims","Returns the mean of x."],[2,1,2,"cvxpy.atoms.stats.mean","x","Returns the mean of x."]],"cvxpy.atoms.stats.std":[[4,1,2,"cvxpy.atoms.stats.std","axis","Returns the standard deviation of x."],[4,1,2,"cvxpy.atoms.stats.std","ddof","Returns the standard deviation of x."],[4,1,2,"cvxpy.atoms.stats.std","keepdims","Returns the standard deviation of x."],[4,1,2,"cvxpy.atoms.stats.std","x","Returns the standard deviation of x."]],"cvxpy.atoms.stats.var":[[4,1,2,"cvxpy.atoms.stats.var","axis","Returns the variance of x."],[4,1,2,"cvxpy.atoms.stats.var","ddof","Returns the variance of x."],[4,1,2,"cvxpy.atoms.stats.var","keepdims","Returns the variance of x."],[4,1,2,"cvxpy.atoms.stats.var","x","Returns the variance of x."]],"cvxpy.atoms.sum_largest":[[4,2,1,0,"sum_largest","Bases: Atom"]],"cvxpy.atoms.sum_largest.sum_largest.__init__":[[4,1,2,"cvxpy.atoms.sum_largest.sum_largest","k","Bases: Atom"],[4,1,2,"cvxpy.atoms.sum_largest.sum_largest","x","Bases: Atom"]],"cvxpy.atoms.sum_smallest":[[4,0,1,0,"sum_smallest","Sum of the smallest k values."]],"cvxpy.atoms.sum_smallest.sum_smallest":[[4,1,2,"cvxpy.atoms.sum_smallest.sum_smallest","k","Sum of the smallest k values."],[4,1,2,"cvxpy.atoms.sum_smallest.sum_smallest","x","Sum of the smallest k values."]],"cvxpy.atoms.sum_squares":[[4,0,1,0,"sum_squares","The sum of the squares of the entries."]],"cvxpy.atoms.sum_squares.sum_squares":[[4,1,2,0,"expr","The expression to take the sum of squares of."]],"cvxpy.atoms.suppfunc":[[4,2,1,0,"SuppFuncAtom",""]],"cvxpy.atoms.suppfunc.SuppFuncAtom.__init__":[[4,1,2,"cvxpy.atoms.suppfunc.SuppFuncAtom","parent",""],[4,1,2,"cvxpy.atoms.suppfunc.SuppFuncAtom","y",""]],"cvxpy.atoms.total_variation":[[4,0,1,0,"tv","Total variation of a vector, matrix, or list of matrices."]],"cvxpy.atoms.total_variation.tv":[[4,1,2,0,"args","Additional matrices extending the third dimension of value."],[4,1,2,0,"value","The value to take the total variation of."]],"cvxpy.atoms.tr_inv":[[4,0,1,0,"tr_inv","\\mathrm{tr}\\left(X^{-1} \\right), where X is positive definite."]],"cvxpy.atoms.tr_inv.tr_inv":[[4,1,2,"cvxpy.atoms.tr_inv.tr_inv","X","\\mathrm{tr}\\left(X^{-1} \\right), where X is positive definite."]],"cvxpy.bmat":[[2,1,2,0,"block_lists","The blocks of the block matrix."]],"cvxpy.broadcast_to.__init__":[[2,1,2,"cvxpy.broadcast_to","expr","Bases: AffAtom"],[2,1,2,"cvxpy.broadcast_to","shape","Bases: AffAtom"]],"cvxpy.conj.__init__":[[2,1,2,"cvxpy.conj","expr","Elementwise complex conjugate."]],"cvxpy.constraints.constraint":[[5,2,1,0,"Constraint","Bases: Canonical"]],"cvxpy.constraints.constraint.Constraint":[[5,3,1,0,"is_dcp","Checks whether the constraint is DCP."],[5,3,1,0,"value","Checks whether the constraint violation is less than a tolerance."],[5,3,1,0,"violation","The numeric residual of the constraint."]],"cvxpy.constraints.constraint.Constraint.__init__":[[5,1,2,0,"args","A list of expression trees."],[5,1,2,0,"constr_id","A unique id for the constraint."]],"cvxpy.constraints.constraint.Constraint.is_dcp":[[5,1,2,"cvxpy.constraints.constraint.Constraint.is_dcp","dpp","Checks whether the constraint is DCP."]],"cvxpy.constraints.constraint.Constraint.value":[[5,1,2,0,"tolerance","The absolute tolerance to impose on the violation."]],"cvxpy.constraints.exponential":[[5,2,1,0,"ExpCone","Bases: Cone"],[5,2,1,0,"OpRelEntrConeQuad","Bases: Cone"],[5,2,1,0,"RelEntrConeQuad","Bases: Cone"]],"cvxpy.constraints.exponential.ExpCone":[[5,3,1,0,"is_dcp","An exponential constraint is DCP if each argument is affine."],[5,3,1,0,"value","Checks whether the constraint violation is less than a tolerance."],[5,3,1,0,"violation","The numeric residual of the constraint."]],"cvxpy.constraints.exponential.ExpCone.__init__":[[5,1,2,"cvxpy.constraints.exponential.ExpCone","constr_id","Bases: Cone"],[5,1,2,0,"x","x in the exponential cone."],[5,1,2,0,"y","y in the exponential cone."],[5,1,2,0,"z","z in the exponential cone."]],"cvxpy.constraints.exponential.ExpCone.is_dcp":[[5,1,2,"cvxpy.constraints.exponential.ExpCone.is_dcp","dpp","An exponential constraint is DCP if each argument is affine."]],"cvxpy.constraints.exponential.ExpCone.value":[[5,1,2,0,"tolerance","The absolute tolerance to impose on the violation."]],"cvxpy.constraints.exponential.OpRelEntrConeQuad":[[5,3,1,0,"is_dcp","An operator relative conic constraint is DCP when (A, b, C) is affine"],[5,3,1,0,"value","Checks whether the constraint violation is less than a tolerance."]],"cvxpy.constraints.exponential.OpRelEntrConeQuad.__init__":[[5,1,2,0,"X","x in the (approximate) operator relative entropy cone"],[5,1,2,0,"Y","y in the (approximate) operator relative entropy cone"],[5,1,2,0,"Z","Z in the (approximate) operator relative entropy cone"],[5,1,2,"cvxpy.constraints.exponential.OpRelEntrConeQuad","constr_id","Bases: Cone"],[5,1,2,0,"k","Must be positive."],[5,1,2,0,"m","Must be positive."]],"cvxpy.constraints.exponential.OpRelEntrConeQuad.is_dcp":[[5,1,2,"cvxpy.constraints.exponential.OpRelEntrConeQuad.is_dcp","dpp","An operator relative conic constraint is DCP when (A, b, C) is affine"]],"cvxpy.constraints.exponential.OpRelEntrConeQuad.value":[[5,1,2,0,"tolerance","The absolute tolerance to impose on the violation."]],"cvxpy.constraints.exponential.RelEntrConeQuad":[[5,3,1,0,"is_dcp","An exponential constraint is DCP if each argument is affine."],[5,3,1,0,"value","Checks whether the constraint violation is less than a tolerance."]],"cvxpy.constraints.exponential.RelEntrConeQuad.__init__":[[5,1,2,"cvxpy.constraints.exponential.RelEntrConeQuad","constr_id","Bases: Cone"],[5,1,2,0,"k","Number of scaling points in the approximation."],[5,1,2,0,"m","Number of quadrature points in the approximation."],[5,1,2,0,"x","x in the (approximate) scalar relative entropy cone"],[5,1,2,0,"y","y in the (approximate) scalar relative entropy cone"],[5,1,2,0,"z","z in the (approximate) scalar relative entropy cone"]],"cvxpy.constraints.exponential.RelEntrConeQuad.is_dcp":[[5,1,2,"cvxpy.constraints.exponential.RelEntrConeQuad.is_dcp","dpp","An exponential constraint is DCP if each argument is affine."]],"cvxpy.constraints.exponential.RelEntrConeQuad.value":[[5,1,2,0,"tolerance","The absolute tolerance to impose on the violation."]],"cvxpy.constraints.finite_set":[[5,2,1,0,"FiniteSet","Bases: Constraint"]],"cvxpy.constraints.finite_set.FiniteSet":[[5,4,1,0,"ineq_form","Choose between two constraining methodologies, use ineq_form=False while working with Parameter types."],[5,3,1,0,"is_dcp","A FiniteSet constraint is DCP if the constrained expression is affine."],[5,4,1,0,"shape","The shape of the constrained expression."],[5,4,1,0,"size","The size of the constrained expression."],[5,3,1,0,"violation","The numeric residual of the constraint."]],"cvxpy.constraints.finite_set.FiniteSet.__init__":[[5,1,2,"cvxpy.constraints.finite_set.FiniteSet","constr_id","Bases: Constraint"],[5,1,2,0,"expre","The given expression to be constrained."],[5,1,2,0,"ineq_form","Controls how this constraint is canonicalized into mixed integer linear constraints."],[5,1,2,0,"vec","The finite collection of values to which each entry of expre is to be constrained."]],"cvxpy.constraints.finite_set.FiniteSet.is_dcp":[[5,1,2,"cvxpy.constraints.finite_set.FiniteSet.is_dcp","dpp","A FiniteSet constraint is DCP if the constrained expression is affine."]],"cvxpy.constraints.nonpos":[[5,2,1,0,"NonPos","Bases: Constraint"]],"cvxpy.constraints.nonpos.NonPos":[[5,4,1,0,"dual_value","The value of the dual variable."],[5,3,1,0,"is_dcp","A NonPos constraint is DCP if its argument is convex."],[5,4,1,0,"shape","The shape of the constrained expression."],[5,4,1,0,"size","The size of the constrained expression."],[5,3,1,0,"value","Checks whether the constraint violation is less than a tolerance."],[5,3,1,0,"violation","The numeric residual of the constraint."]],"cvxpy.constraints.nonpos.NonPos.__init__":[[5,1,2,0,"constr_id","A unique id for the constraint."],[5,1,2,0,"expr","The expression to constrain."]],"cvxpy.constraints.nonpos.NonPos.is_dcp":[[5,1,2,"cvxpy.constraints.nonpos.NonPos.is_dcp","dpp","A NonPos constraint is DCP if its argument is convex."]],"cvxpy.constraints.nonpos.NonPos.value":[[5,1,2,0,"tolerance","The absolute tolerance to impose on the violation."]],"cvxpy.constraints.power":[[5,2,1,0,"PowCone3D","Bases: Cone"],[5,2,1,0,"PowConeND","Bases: Cone"]],"cvxpy.constraints.power.PowCone3D":[[5,3,1,0,"is_dcp","Checks whether the constraint is DCP."],[5,3,1,0,"value","Checks whether the constraint violation is less than a tolerance."],[5,3,1,0,"violation","The numeric residual of the constraint."]],"cvxpy.constraints.power.PowCone3D.__init__":[[5,1,2,"cvxpy.constraints.power.PowCone3D","alpha","Bases: Cone"],[5,1,2,"cvxpy.constraints.power.PowCone3D","constr_id","Bases: Cone"],[5,1,2,"cvxpy.constraints.power.PowCone3D","x","Bases: Cone"],[5,1,2,"cvxpy.constraints.power.PowCone3D","y","Bases: Cone"],[5,1,2,"cvxpy.constraints.power.PowCone3D","z","Bases: Cone"]],"cvxpy.constraints.power.PowCone3D.is_dcp":[[5,1,2,"cvxpy.constraints.power.PowCone3D.is_dcp","dpp","Checks whether the constraint is DCP."]],"cvxpy.constraints.power.PowCone3D.value":[[5,1,2,0,"tolerance","The absolute tolerance to impose on the violation."]],"cvxpy.constraints.power.PowConeND":[[5,3,1,0,"is_dcp","A power cone constraint is DCP if each argument is affine."],[5,3,1,0,"value","Checks whether the constraint violation is less than a tolerance."],[5,3,1,0,"violation","The numeric residual of the constraint."]],"cvxpy.constraints.power.PowConeND.__init__":[[5,1,2,"cvxpy.constraints.power.PowConeND","W","Bases: Cone"],[5,1,2,"cvxpy.constraints.power.PowConeND","alpha","Bases: Cone"],[5,1,2,"cvxpy.constraints.power.PowConeND","axis","Bases: Cone"],[5,1,2,"cvxpy.constraints.power.PowConeND","constr_id","Bases: Cone"],[5,1,2,"cvxpy.constraints.power.PowConeND","z","Bases: Cone"]],"cvxpy.constraints.power.PowConeND.is_dcp":[[5,1,2,"cvxpy.constraints.power.PowConeND.is_dcp","dpp","A power cone constraint is DCP if each argument is affine."]],"cvxpy.constraints.power.PowConeND.value":[[5,1,2,0,"tolerance","The absolute tolerance to impose on the violation."]],"cvxpy.constraints.psd":[[5,2,1,0,"PSD","Bases: Cone"]],"cvxpy.constraints.psd.PSD":[[5,3,1,0,"is_dcp","A PSD constraint is DCP if the constrained expression is affine."],[5,3,1,0,"value","Checks whether the constraint violation is less than a tolerance."],[5,3,1,0,"violation","The numeric residual of the constraint."]],"cvxpy.constraints.psd.PSD.__init__":[[5,1,2,0,"constr_id","A unique id for the constraint."],[5,1,2,0,"expr","The expression to constrain; must be two-dimensional."]],"cvxpy.constraints.psd.PSD.is_dcp":[[5,1,2,"cvxpy.constraints.psd.PSD.is_dcp","dpp","A PSD constraint is DCP if the constrained expression is affine."]],"cvxpy.constraints.psd.PSD.value":[[5,1,2,0,"tolerance","The absolute tolerance to impose on the violation."]],"cvxpy.constraints.second_order":[[5,2,1,0,"SOC","Bases: Cone"]],"cvxpy.constraints.second_order.SOC":[[5,5,1,0,"X","A matrix whose rows/columns are each a cone."],[5,5,1,0,"axis","Slice by column 0 or row 1."],[5,3,1,0,"is_dcp","An SOC constraint is DCP if each of its arguments is affine."],[5,5,1,0,"t","The scalar part of the second-order constraint."],[5,3,1,0,"value","Checks whether the constraint violation is less than a tolerance."],[5,3,1,0,"violation","The numeric residual of the constraint."]],"cvxpy.constraints.second_order.SOC.__init__":[[5,1,2,"cvxpy.constraints.second_order.SOC","X","Bases: Cone"],[5,1,2,"cvxpy.constraints.second_order.SOC","axis","Bases: Cone"],[5,1,2,"cvxpy.constraints.second_order.SOC","constr_id","Bases: Cone"],[5,1,2,"cvxpy.constraints.second_order.SOC","t","Bases: Cone"]],"cvxpy.constraints.second_order.SOC.is_dcp":[[5,1,2,"cvxpy.constraints.second_order.SOC.is_dcp","dpp","An SOC constraint is DCP if each of its arguments is affine."]],"cvxpy.constraints.second_order.SOC.value":[[5,1,2,0,"tolerance","The absolute tolerance to impose on the violation."]],"cvxpy.constraints.zero":[[5,2,1,0,"Zero","Bases: Constraint"]],"cvxpy.constraints.zero.Zero":[[5,3,1,0,"is_dcp","A zero constraint is DCP if its argument is affine."],[5,3,1,0,"value","Checks whether the constraint violation is less than a tolerance."],[5,3,1,0,"violation","The numeric residual of the constraint."]],"cvxpy.constraints.zero.Zero.__init__":[[5,1,2,"cvxpy.constraints.zero.Zero","constr_id","Bases: Constraint"],[5,1,2,"cvxpy.constraints.zero.Zero","expr","Bases: Constraint"]],"cvxpy.constraints.zero.Zero.is_dcp":[[5,1,2,"cvxpy.constraints.zero.Zero.is_dcp","dpp","A zero constraint is DCP if its argument is affine."]],"cvxpy.constraints.zero.Zero.value":[[5,1,2,0,"tolerance","The absolute tolerance to impose on the violation."]],"cvxpy.convolve.__init__":[[2,1,2,"cvxpy.convolve","args","Bases: AffAtom"]],"cvxpy.cumsum":[[2,5,1,0,"axis","The axis to sum across if 2D."],[2,5,1,0,"expr","The expression being summed."]],"cvxpy.cumsum.__init__":[[2,1,2,"cvxpy.cumsum","axis","Bases: AffAtom, AxisAtom"],[2,1,2,"cvxpy.cumsum","expr","Bases: AffAtom, AxisAtom"]],"cvxpy.diag":[[2,1,2,0,"expr","A vector or square matrix."],[2,1,2,0,"k","Diagonal in question."]],"cvxpy.diff":[[2,1,2,"cvxpy.diff","axis","Vector of kth order differences."],[2,1,2,"cvxpy.diff","k","Vector of kth order differences."],[2,1,2,"cvxpy.diff","x","Vector of kth order differences."]],"cvxpy.entr.__init__":[[3,1,2,"cvxpy.entr","x","Bases: Elementwise"]],"cvxpy.exp.__init__":[[3,1,2,"cvxpy.exp","x","Bases: Elementwise"]],"cvxpy.expressions.constants":[[6,2,1,0,"Constant","Bases: Leaf"]],"cvxpy.expressions.constants.Constant":[[6,4,1,0,"T","The transpose of the expression."],[6,4,1,0,"ndim","The number of dimensions in the expression's shape."],[6,4,1,0,"shape","Returns the (row, col) dimensions of the expression."],[6,4,1,0,"size","The number of entries in the expression."],[6,4,1,0,"value","The numeric value of the constant."]],"cvxpy.expressions.constants.Constant.__init__":[[6,1,2,"cvxpy.expressions.constants.Constant","name","Bases: Leaf"],[6,1,2,"cvxpy.expressions.constants.Constant","value","Bases: Leaf"]],"cvxpy.expressions.constants.callback_param":[[6,2,1,0,"CallbackParam","Bases: Parameter"]],"cvxpy.expressions.constants.callback_param.CallbackParam":[[6,4,1,0,"T","The transpose of the expression."],[6,4,1,0,"ndim","The number of dimensions in the expression's shape."],[6,3,1,0,"project","Project value onto the attribute set of the leaf."],[6,3,1,0,"project_and_assign","Project and assign a value to the variable."],[6,4,1,0,"shape","The dimensions of the expression."],[6,4,1,0,"size","The number of entries in the expression."],[6,4,1,0,"value","Evaluate the callback to get the value."]],"cvxpy.expressions.constants.callback_param.CallbackParam.__init__":[[6,1,2,"cvxpy.expressions.constants.callback_param.CallbackParam","callback","Bases: Parameter"],[6,1,2,"cvxpy.expressions.constants.callback_param.CallbackParam","kwargs","Bases: Parameter"],[6,1,2,"cvxpy.expressions.constants.callback_param.CallbackParam","shape","Bases: Parameter"]],"cvxpy.expressions.constants.callback_param.CallbackParam.project":[[6,1,2,"cvxpy.expressions.constants.callback_param.CallbackParam.project","sparse_path","Project value onto the attribute set of the leaf."],[6,1,2,0,"val","The value assigned."]],"cvxpy.expressions.constants.callback_param.CallbackParam.project_and_assign":[[6,1,2,"cvxpy.expressions.constants.callback_param.CallbackParam.project_and_assign","val","Project and assign a value to the variable."]],"cvxpy.expressions.constants.parameter":[[6,2,1,0,"Parameter","Bases: Leaf"]],"cvxpy.expressions.constants.parameter.Parameter":[[6,4,1,0,"T","The transpose of the expression."],[6,4,1,0,"ndim","The number of dimensions in the expression's shape."],[6,3,1,0,"project","Project value onto the attribute set of the leaf."],[6,3,1,0,"project_and_assign","Project and assign a value to the variable."],[6,4,1,0,"shape","The dimensions of the expression."],[6,4,1,0,"size","The number of entries in the expression."],[6,4,1,0,"value","The numeric value of the expression."]],"cvxpy.expressions.constants.parameter.Parameter.__init__":[[6,1,2,"cvxpy.expressions.constants.parameter.Parameter","id","Bases: Leaf"],[6,1,2,"cvxpy.expressions.constants.parameter.Parameter","kwargs","Bases: Leaf"],[6,1,2,"cvxpy.expressions.constants.parameter.Parameter","name","Bases: Leaf"],[6,1,2,"cvxpy.expressions.constants.parameter.Parameter","shape","Bases: Leaf"],[6,1,2,"cvxpy.expressions.constants.parameter.Parameter","value","Bases: Leaf"]],"cvxpy.expressions.constants.parameter.Parameter.project":[[6,1,2,"cvxpy.expressions.constants.parameter.Parameter.project","sparse_path","Project value onto the attribute set of the leaf."],[6,1,2,0,"val","The value assigned."]],"cvxpy.expressions.constants.parameter.Parameter.project_and_assign":[[6,1,2,"cvxpy.expressions.constants.parameter.Parameter.project_and_assign","val","Project and assign a value to the variable."]],"cvxpy.expressions.expression":[[6,2,1,0,"Expression","Bases: Canonical"]],"cvxpy.expressions.expression.Expression":[[6,4,1,0,"T","The transpose of the expression."],[6,3,1,0,"__add__","Expression : Sum two expressions."],[6,3,1,0,"__div__","Expression : One expression divided by another."],[6,3,1,0,"__eq__","Equality : Creates a constraint self == other."],[6,3,1,0,"__ge__","Return self>=value."],[6,3,1,0,"__le__","Inequality : Creates an inequality constraint self <= other."],[6,3,1,0,"__lshift__","PSD : Creates a negative semidefinite inequality."],[6,3,1,0,"__matmul__","Expression : Matrix multiplication of two expressions."],[6,3,1,0,"__mul__","Expression : The product of two expressions."],[6,3,1,0,"__pow__","Raise expression to a power."],[6,3,1,0,"__radd__","Expression : Sum two expressions."],[6,3,1,0,"__rdiv__","Expression : Called for Number / Expression."],[6,3,1,0,"__rlshift__","PSD : Creates a negative semidefinite inequality."],[6,3,1,0,"__rmatmul__","Expression : Called for matrix @ Expression."],[6,3,1,0,"__rmul__","Expression : Called for Number * Expression."],[6,3,1,0,"__rrshift__","PSD : Creates a positive semidefinite inequality."],[6,3,1,0,"__rshift__","PSD : Creates a positive semidefinite inequality."],[6,3,1,0,"__rsub__","Expression : The difference of two expressions."],[6,3,1,0,"__rtruediv__","Expression : Called for Number / Expression."],[6,3,1,0,"__sub__","Expression : The difference of two expressions."],[6,3,1,0,"__truediv__","Expression : One expression divided by another."],[6,4,1,0,"curvature","The curvature of the expression."],[6,4,1,0,"domain","The constraints describing the closure of the region where the expression is finite."],[6,4,1,0,"grad","Gives the (sub/super)gradient of the expression w.r.t. each variable."],[6,3,1,0,"is_affine","Is the expression affine?"],[6,3,1,0,"is_concave","Is the expression concave?"],[6,3,1,0,"is_constant","Is the expression constant?"],[6,3,1,0,"is_convex","Is the expression convex?"],[6,3,1,0,"is_dcp","Checks whether the Expression is DCP."],[6,3,1,0,"is_dgp","Checks whether the Expression is log-log DCP."],[6,3,1,0,"is_dpp","The expression is a disciplined parameterized expression."],[6,3,1,0,"is_dqcp","Checks whether the Expression is DQCP."],[6,3,1,0,"is_log_log_affine","Is the expression affine?"],[6,3,1,0,"is_log_log_concave","Is the expression log-log concave?"],[6,3,1,0,"is_log_log_convex","Is the expression log-log convex?"],[6,3,1,0,"is_nonneg","Is the expression positive?"],[6,3,1,0,"is_nonpos","Is the expression negative?"],[6,3,1,0,"is_zero","Is the expression all zero?"],[6,3,1,0,"name","str : The string representation of the expression."],[6,4,1,0,"ndim","The number of dimensions in the expression's shape."],[6,4,1,0,"shape","The expression dimensions."],[6,4,1,0,"sign","The sign of the expression."],[6,4,1,0,"size","The number of entries in the expression."],[6,4,1,0,"value","The numeric value of the expression."]],"cvxpy.expressions.expression.Expression.__add__":[[6,1,2,"cvxpy.expressions.expression.Expression.__add__","other","Expression : Sum two expressions."]],"cvxpy.expressions.expression.Expression.__div__":[[6,1,2,"cvxpy.expressions.expression.Expression.__div__","other","Expression : One expression divided by another."]],"cvxpy.expressions.expression.Expression.__eq__":[[6,1,2,"cvxpy.expressions.expression.Expression.__eq__","other","Equality : Creates a constraint self == other."]],"cvxpy.expressions.expression.Expression.__ge__":[[6,1,2,"cvxpy.expressions.expression.Expression.__ge__","other","Return self>=value."]],"cvxpy.expressions.expression.Expression.__le__":[[6,1,2,"cvxpy.expressions.expression.Expression.__le__","other","Inequality : Creates an inequality constraint self <= other."]],"cvxpy.expressions.expression.Expression.__lshift__":[[6,1,2,"cvxpy.expressions.expression.Expression.__lshift__","other","PSD : Creates a negative semidefinite inequality."]],"cvxpy.expressions.expression.Expression.__matmul__":[[6,1,2,"cvxpy.expressions.expression.Expression.__matmul__","other","Expression : Matrix multiplication of two expressions."]],"cvxpy.expressions.expression.Expression.__mul__":[[6,1,2,"cvxpy.expressions.expression.Expression.__mul__","other","Expression : The product of two expressions."]],"cvxpy.expressions.expression.Expression.__pow__":[[6,1,2,0,"power","The power to which to raise the expression."]],"cvxpy.expressions.expression.Expression.__radd__":[[6,1,2,"cvxpy.expressions.expression.Expression.__radd__","other","Expression : Sum two expressions."]],"cvxpy.expressions.expression.Expression.__rdiv__":[[6,1,2,"cvxpy.expressions.expression.Expression.__rdiv__","other","Expression : Called for Number / Expression."]],"cvxpy.expressions.expression.Expression.__rlshift__":[[6,1,2,"cvxpy.expressions.expression.Expression.__rlshift__","other","PSD : Creates a negative semidefinite inequality."]],"cvxpy.expressions.expression.Expression.__rmatmul__":[[6,1,2,"cvxpy.expressions.expression.Expression.__rmatmul__","other","Expression : Called for matrix @ Expression."]],"cvxpy.expressions.expression.Expression.__rmul__":[[6,1,2,"cvxpy.expressions.expression.Expression.__rmul__","other","Expression : Called for Number * Expression."]],"cvxpy.expressions.expression.Expression.__rrshift__":[[6,1,2,"cvxpy.expressions.expression.Expression.__rrshift__","other","PSD : Creates a positive semidefinite inequality."]],"cvxpy.expressions.expression.Expression.__rshift__":[[6,1,2,"cvxpy.expressions.expression.Expression.__rshift__","other","PSD : Creates a positive semidefinite inequality."]],"cvxpy.expressions.expression.Expression.__rsub__":[[6,1,2,"cvxpy.expressions.expression.Expression.__rsub__","other","Expression : The difference of two expressions."]],"cvxpy.expressions.expression.Expression.__rtruediv__":[[6,1,2,"cvxpy.expressions.expression.Expression.__rtruediv__","other","Expression : Called for Number / Expression."]],"cvxpy.expressions.expression.Expression.__sub__":[[6,1,2,"cvxpy.expressions.expression.Expression.__sub__","other","Expression : The difference of two expressions."]],"cvxpy.expressions.expression.Expression.__truediv__":[[6,1,2,"cvxpy.expressions.expression.Expression.__truediv__","other","Expression : One expression divided by another."]],"cvxpy.expressions.expression.Expression.is_dcp":[[6,1,2,0,"dpp","If True, enforce the disciplined parametrized programming (DPP) ruleset; only relevant when the problem involves Parameters."]],"cvxpy.expressions.expression.Expression.is_dgp":[[6,1,2,"cvxpy.expressions.expression.Expression.is_dgp","dpp","Checks whether the Expression is log-log DCP."]],"cvxpy.expressions.expression.Expression.is_dpp":[[6,1,2,"cvxpy.expressions.expression.Expression.is_dpp","context","The expression is a disciplined parameterized expression."]],"cvxpy.expressions.leaf":[[6,2,1,0,"Leaf","Bases: Expression"]],"cvxpy.expressions.leaf.Leaf":[[6,4,1,0,"T","The transpose of the expression."],[6,4,1,0,"ndim","The number of dimensions in the expression's shape."],[6,3,1,0,"project","Project value onto the attribute set of the leaf."],[6,3,1,0,"project_and_assign","Project and assign a value to the variable."],[6,4,1,0,"shape","The dimensions of the expression."],[6,4,1,0,"size","The number of entries in the expression."],[6,4,1,0,"value","The numeric value of the expression."]],"cvxpy.expressions.leaf.Leaf.__init__":[[6,1,2,0,"NSD","Is the variable constrained to be negative semidefinite?"],[6,1,2,0,"PSD","Is the variable constrained to be positive semidefinite?"],[6,1,2,0,"boolean","Is the variable boolean? True, which constrains the entire Variable to be boolean, False, or a list of indices which should be constrained as boolean, where each index is a tuple of length exactly equal to the length of shape."],[6,1,2,0,"bounds","An iterable of length two specifying lower and upper bounds."],[6,1,2,0,"complex","Is the variable complex valued?"],[6,1,2,0,"diag","Is the variable diagonal?"],[6,1,2,"cvxpy.expressions.leaf.Leaf","hermitian","Bases: Expression"],[6,1,2,"cvxpy.expressions.leaf.Leaf","imag","Bases: Expression"],[6,1,2,0,"integer","Is the variable integer? The semantics are the same as the boolean argument."],[6,1,2,0,"neg","Is the variable negative?"],[6,1,2,0,"nonneg","Is the variable constrained to be nonnegative?"],[6,1,2,0,"nonpos","Is the variable constrained to be nonpositive?"],[6,1,2,0,"pos","Is the variable positive?"],[6,1,2,0,"shape","Shape of the leaf, e.g., (3, 2) or 2."],[6,1,2,0,"sparsity","Is the variable sparse?"],[6,1,2,0,"symmetric","Is the variable symmetric?"],[6,1,2,0,"value","A value to assign to the leaf."]],"cvxpy.expressions.leaf.Leaf.project":[[6,1,2,"cvxpy.expressions.leaf.Leaf.project","sparse_path","Project value onto the attribute set of the leaf."],[6,1,2,0,"val","The value assigned."]],"cvxpy.expressions.leaf.Leaf.project_and_assign":[[6,1,2,"cvxpy.expressions.leaf.Leaf.project_and_assign","val","Project and assign a value to the variable."]],"cvxpy.expressions.variable":[[6,2,1,0,"Variable","Bases: Leaf"]],"cvxpy.expressions.variable.Variable":[[6,4,1,0,"T","The transpose of the expression."],[6,3,1,0,"name","The name of the variable."],[6,4,1,0,"ndim","The number of dimensions in the expression's shape."],[6,3,1,0,"project","Project value onto the attribute set of the leaf."],[6,3,1,0,"project_and_assign","Project and assign a value to the variable."],[6,4,1,0,"shape","The dimensions of the expression."],[6,4,1,0,"size","The number of entries in the expression."],[6,4,1,0,"value","The numeric value of the expression."]],"cvxpy.expressions.variable.Variable.__init__":[[6,1,2,"cvxpy.expressions.variable.Variable","kwargs","Bases: Leaf"],[6,1,2,"cvxpy.expressions.variable.Variable","name","Bases: Leaf"],[6,1,2,"cvxpy.expressions.variable.Variable","shape","Bases: Leaf"],[6,1,2,"cvxpy.expressions.variable.Variable","var_id","Bases: Leaf"]],"cvxpy.expressions.variable.Variable.project":[[6,1,2,"cvxpy.expressions.variable.Variable.project","sparse_path","Project value onto the attribute set of the leaf."],[6,1,2,0,"val","The value assigned."]],"cvxpy.expressions.variable.Variable.project_and_assign":[[6,1,2,"cvxpy.expressions.variable.Variable.project_and_assign","val","Project and assign a value to the variable."]],"cvxpy.hstack":[[2,1,2,0,"arg_list","The Expressions to concatenate."]],"cvxpy.huber.__init__":[[3,1,2,0,"M","A scalar constant."],[3,1,2,0,"x","The expression to which the huber function will be applied."]],"cvxpy.imag.__init__":[[2,1,2,"cvxpy.imag","expr","Extracts the imaginary part of an expression."]],"cvxpy.inv_pos":[[3,1,2,"cvxpy.inv_pos","x","x^{-1} for x > 0."]],"cvxpy.kl_div.__init__":[[3,1,2,"cvxpy.kl_div","x","Bases: Elementwise"],[3,1,2,"cvxpy.kl_div","y","Bases: Elementwise"]],"cvxpy.kron.__init__":[[2,1,2,"cvxpy.kron","lh_expr","Bases: AffAtom"],[2,1,2,"cvxpy.kron","rh_expr","Bases: AffAtom"]],"cvxpy.log.__init__":[[3,1,2,"cvxpy.log","x","Bases: Elementwise"]],"cvxpy.log1p.__init__":[[3,1,2,"cvxpy.log1p","x","Bases: log"]],"cvxpy.log_normcdf.__init__":[[3,1,2,"cvxpy.log_normcdf","x","Bases:"]],"cvxpy.loggamma.__init__":[[3,1,2,"cvxpy.loggamma","x","Bases:"]],"cvxpy.logistic.__init__":[[3,1,2,"cvxpy.logistic","x","Bases: Elementwise"]],"cvxpy.matmul":[[2,1,2,"cvxpy.matmul","lh_exp","Matrix multiplication."],[2,1,2,"cvxpy.matmul","rh_exp","Matrix multiplication."]],"cvxpy.maximum.__init__":[[3,1,2,"cvxpy.maximum","arg1","Bases: Elementwise"],[3,1,2,"cvxpy.maximum","arg2","Bases: Elementwise"],[3,1,2,"cvxpy.maximum","args","Bases: Elementwise"]],"cvxpy.minimum":[[3,1,2,"cvxpy.minimum","arg1","Elementwise minimum of a sequence of expressions."],[3,1,2,"cvxpy.minimum","arg2","Elementwise minimum of a sequence of expressions."],[3,1,2,"cvxpy.minimum","args","Elementwise minimum of a sequence of expressions."]],"cvxpy.moveaxis.__init__":[[2,1,2,0,"destination","The new positions for the moved axes."],[2,1,2,0,"expr","The expression to move axes of."],[2,1,2,0,"source","The original positions of the axes to move."]],"cvxpy.multiply.__init__":[[2,1,2,"cvxpy.multiply","lh_expr","Bases: MulExpression"],[2,1,2,"cvxpy.multiply","rh_expr","Bases: MulExpression"]],"cvxpy.neg":[[3,1,2,"cvxpy.neg","x","Alias for -minimum{x, 0}."]],"cvxpy.outer":[[2,1,2,0,"x","Input is flattened if not already a vector. The linear argument to the outer product."],[2,1,2,0,"y","Input is flattened if not already a vector. The transposed-linear argument to the outer product."]],"cvxpy.partial_trace":[[2,1,2,0,"axis","The index of the subsystem to be traced out from the tensor product that defines expr."],[2,1,2,0,"dims","A tuple of integers encoding the dimensions of each subsystem."],[2,1,2,0,"expr","The 2D expression to take the partial trace of."]],"cvxpy.partial_transpose":[[2,1,2,0,"axis","The index of the subsystem to be transposed from the tensor product that defines expr."],[2,1,2,0,"dims","A tuple of integers encoding the dimensions of each subsystem."],[2,1,2,0,"expr","The 2D expression to take the partial transpose of."]],"cvxpy.permute_dims.__init__":[[2,1,2,0,"axes","The new order of the axes."],[2,1,2,0,"expr","The expression to permute dimensions of."]],"cvxpy.pos":[[3,1,2,"cvxpy.pos","x","Alias for maximum{x,0}."]],"cvxpy.power.__init__":[[3,1,2,0,"max_denom","The maximum denominator considered in forming a rational approximation of p; only relevant when solving as a DCP program."],[3,1,2,0,"p","Scalar power."],[3,1,2,0,"x",""]],"cvxpy.problems.problem":[[7,2,1,0,"SizeMetrics","Reports various metrics regarding the problem."],[7,2,1,0,"SolverStats","Reports some of the miscellaneous information that is returned by the solver after solving but that is not captured directly by the Problem instance."]],"cvxpy.problems.problem.SizeMetrics":[[7,5,1,0,"max_big_small_squared","The maximum value of (big)(small)^2 over all data blocks of the problem, where (big) is the larger dimension and (small) is the smaller dimension for each data block."],[7,5,1,0,"max_data_dimension","The longest dimension of any data block constraint or parameter."],[7,5,1,0,"num_scalar_data","The number of scalar constants and parameters in the problem. The number of constants used across all matrices, vectors, in the problem. Some constants are not apparent when the problem is constructed: for example, The sum_squares expression is a wrapper for a quad_over_lin expression with a constant 1 in the denominator."],[7,5,1,0,"num_scalar_eq_constr","The number of scalar equality constraints in the problem."],[7,5,1,0,"num_scalar_leq_constr","The number of scalar inequality constraints in the problem."],[7,5,1,0,"num_scalar_variables","The number of scalar variables in the problem."]],"cvxpy.problems.problem.SizeMetrics.__init__":[[7,1,2,"cvxpy.problems.problem.SizeMetrics","problem","Reports various metrics regarding the problem."]],"cvxpy.problems.problem.SolverStats":[[7,5,1,"id0","extra_stats","Extra statistics specific to the solver; these statistics are typically returned directly from the solver, without modification by CVXPY. This object may be a dict, or a custom Python object."],[7,3,1,0,"from_dict","Construct a SolverStats object from a dictionary of attributes."],[7,5,1,"id1","num_iters","The number of iterations the solver had to go through to find a solution."],[7,5,1,"id2","setup_time","The time (in seconds) it took for the solver to setup the problem."],[7,5,1,"id3","solve_time","The time (in seconds) it took for the solver to solve the problem."],[7,5,1,"id4","solver_name","The name of the solver."]],"cvxpy.problems.problem.SolverStats.__init__":[[7,1,2,"cvxpy.problems.problem.SolverStats","extra_stats","Reports some of the miscellaneous information that is returned by the solver after solving but that is not captured directly by the Problem instance."],[7,1,2,"cvxpy.problems.problem.SolverStats","num_iters","Reports some of the miscellaneous information that is returned by the solver after solving but that is not captured directly by the Problem instance."],[7,1,2,"cvxpy.problems.problem.SolverStats","setup_time","Reports some of the miscellaneous information that is returned by the solver after solving but that is not captured directly by the Problem instance."],[7,1,2,"cvxpy.problems.problem.SolverStats","solve_time","Reports some of the miscellaneous information that is returned by the solver after solving but that is not captured directly by the Problem instance."],[7,1,2,"cvxpy.problems.problem.SolverStats","solver_name","Reports some of the miscellaneous information that is returned by the solver after solving but that is not captured directly by the Problem instance."]],"cvxpy.problems.problem.SolverStats.from_dict":[[7,1,2,0,"attr","A dictionary of attributes returned by the solver."],[7,1,2,0,"solver_name","The name of the solver."]],"cvxpy.real":[[2,1,2,"cvxpy.real","expr","Extracts the real part of an expression."]],"cvxpy.reductions":[[10,6,0,1,"dcp2cone",""],[12,6,0,1,"qp2quad_form",""]],"cvxpy.reductions.chain":[[8,2,1,0,"Chain","Bases: Reduction"]],"cvxpy.reductions.chain.Chain":[[8,3,1,0,"accepts","A problem is accepted if the sequence of reductions is valid."],[8,3,1,0,"apply","Applies the chain to a problem and returns an equivalent problem."],[8,3,1,0,"invert","Returns a solution to the original problem given the inverse_data."],[8,5,1,0,"reductions","A list of reductions."]],"cvxpy.reductions.chain.Chain.__init__":[[8,1,2,"cvxpy.reductions.chain.Chain","problem","Bases: Reduction"],[8,1,2,"cvxpy.reductions.chain.Chain","reductions","Bases: Reduction"]],"cvxpy.reductions.chain.Chain.accepts":[[8,1,2,0,"problem","The problem to check."]],"cvxpy.reductions.chain.Chain.apply":[[8,1,2,0,"problem","The problem to which the chain will be applied."],[8,1,2,0,"verbose","Whehter to print verbose output."]],"cvxpy.reductions.chain.Chain.invert":[[8,1,2,"cvxpy.reductions.chain.Chain.invert","inverse_data","Returns a solution to the original problem given the inverse_data."],[8,1,2,"cvxpy.reductions.chain.Chain.invert","solution","Returns a solution to the original problem given the inverse_data."]],"cvxpy.reductions.complex2real.complex2real":[[11,2,1,0,"Complex2Real","Bases: Reduction"]],"cvxpy.reductions.complex2real.complex2real.Complex2Real":[[11,3,1,0,"accepts","States whether the reduction accepts a problem."],[11,3,1,0,"apply","Applies the reduction to a problem and returns an equivalent problem."],[11,3,1,0,"invert","Returns a solution to the original problem given the inverse_data."]],"cvxpy.reductions.complex2real.complex2real.Complex2Real.__init__":[[11,1,2,"cvxpy.reductions.complex2real.complex2real.Complex2Real","problem","Bases: Reduction"]],"cvxpy.reductions.complex2real.complex2real.Complex2Real.accepts":[[11,1,2,0,"problem","The problem to check."]],"cvxpy.reductions.complex2real.complex2real.Complex2Real.apply":[[11,1,2,0,"problem","The problem to which the reduction will be applied."]],"cvxpy.reductions.complex2real.complex2real.Complex2Real.invert":[[11,1,2,0,"inverse_data","The data encoding the original problem."],[11,1,2,0,"solution","A solution to a problem that generated the inverse_data."]],"cvxpy.reductions.cone2cone.affine2direct":[[9,2,1,0,"Dualize","CVXPY represents cone programs as"],[9,2,1,0,"Slacks","CVXPY represents mixed-integer cone programs as"]],"cvxpy.reductions.cone2cone.affine2direct.Dualize":[[9,3,1,0,"invert","solution is a CVXPY Solution object, formatted where"]],"cvxpy.reductions.cone2cone.affine2direct.Dualize.invert":[[9,1,2,"cvxpy.reductions.cone2cone.affine2direct.Dualize.invert","inv_data","solution is a CVXPY Solution object, formatted where"],[9,1,2,"cvxpy.reductions.cone2cone.affine2direct.Dualize.invert","solution","solution is a CVXPY Solution object, formatted where"]],"cvxpy.reductions.cone2cone.affine2direct.Slacks":[[9,3,1,0,"apply","\"prob\" is a ParamConeProg which represents"],[9,3,1,0,"extend_bounds","Extend the bounds vector to be length num_vars, filling with fill_value."]],"cvxpy.reductions.cone2cone.affine2direct.Slacks.apply":[[9,1,2,"cvxpy.reductions.cone2cone.affine2direct.Slacks.apply","affine","\"prob\" is a ParamConeProg which represents"],[9,1,2,"cvxpy.reductions.cone2cone.affine2direct.Slacks.apply","prob","\"prob\" is a ParamConeProg which represents"]],"cvxpy.reductions.cone2cone.affine2direct.Slacks.extend_bounds":[[9,1,2,"cvxpy.reductions.cone2cone.affine2direct.Slacks.extend_bounds","bounds_vector","Extend the bounds vector to be length num_vars, filling with fill_value."],[9,1,2,"cvxpy.reductions.cone2cone.affine2direct.Slacks.extend_bounds","fill_value","Extend the bounds vector to be length num_vars, filling with fill_value."],[9,1,2,"cvxpy.reductions.cone2cone.affine2direct.Slacks.extend_bounds","num_vars","Extend the bounds vector to be length num_vars, filling with fill_value."]],"cvxpy.reductions.cvx_attr2constr":[[11,2,1,0,"CvxAttr2Constr","Bases: Reduction"]],"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr":[[11,3,1,0,"accepts","States whether the reduction accepts a problem."],[11,3,1,0,"apply","Applies the reduction to a problem and returns an equivalent problem."],[11,3,1,0,"invert","Returns a solution to the original problem given the inverse_data."],[11,3,1,0,"reduction_attributes","Returns the attributes that will be reduced."]],"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr.__init__":[[11,1,2,"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr","problem","Bases: Reduction"],[11,1,2,"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr","reduce_bounds","Bases: Reduction"]],"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr.accepts":[[11,1,2,0,"problem","The problem to check."]],"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr.apply":[[11,1,2,0,"problem","The problem to which the reduction will be applied."]],"cvxpy.reductions.cvx_attr2constr.CvxAttr2Constr.invert":[[11,1,2,0,"inverse_data","The data encoding the original problem."],[11,1,2,0,"solution","A solution to a problem that generated the inverse_data."]],"cvxpy.reductions.dcp2cone":[[10,6,0,1,"cone_matrix_stuffing",""],[10,6,0,1,"dcp2cone",""]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing":[[10,2,1,0,"ConeDims","Bases: object"],[10,2,1,0,"ConeMatrixStuffing","Bases: MatrixStuffing"],[10,2,1,0,"ParamConeProg","Bases: ParamProb"]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims":[[10,5,1,0,"EQ_DIM",""],[10,5,1,0,"EXP_DIM",""],[10,5,1,0,"LEQ_DIM",""],[10,5,1,0,"P3D_DIM",""],[10,5,1,0,"PSD_DIM",""],[10,5,1,0,"SOC_DIM",""],[10,5,1,0,"exp","The number of 3-dimensional exponential cones."],[10,5,1,0,"nonneg","The dimension of the non-negative cone."],[10,5,1,0,"psd","A list of the positive semidefinite cone dimensions, where the dimension of the PSD cone of k by k matrices is k."],[10,5,1,0,"soc","A list of the second-order cone dimensions."],[10,5,1,0,"zero","The dimension of the zero cone."]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims.__init__":[[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeDims","constr_map","Bases: object"]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing":[[10,5,1,0,"CONSTRAINTS",""],[10,3,1,0,"accepts","States whether the reduction accepts a problem."],[10,3,1,0,"apply","Returns a stuffed problem."],[10,3,1,0,"invert","Retrieves a solution to the original problem"],[10,3,1,0,"stuffed_objective",""]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.__init__":[[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing","canon_backend","Bases: MatrixStuffing"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing","quad_obj","Bases: MatrixStuffing"]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.accepts":[[10,1,2,0,"problem","The problem to check."]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.apply":[[10,1,2,0,"problem","must be affine"]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.invert":[[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.invert","inverse_data","Retrieves a solution to the original problem"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.invert","solution","Retrieves a solution to the original problem"]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.stuffed_objective":[[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.stuffed_objective","extractor",""],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ConeMatrixStuffing.stuffed_objective","problem",""]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg":[[10,3,1,0,"apply_param_jac","Multiplies by Jacobian of parameter mapping."],[10,3,1,0,"apply_parameters","Returns A, b after applying parameters (and reshaping)."],[10,3,1,0,"is_mixed_integer","Is the problem mixed-integer?"],[10,3,1,0,"split_adjoint","Adjoint of split_solution."],[10,3,1,0,"split_solution","Splits the solution into individual variables."]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.__init__":[[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","A","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","P","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","c","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","constraints","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","formatted","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","lower_bounds","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","param_id_to_col","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","parameters","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","upper_bounds","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","var_id_to_col","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","variables","Bases: ParamProb"],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg","x","Bases: ParamProb"]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.apply_param_jac":[[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.apply_param_jac","active_params","Multiplies by Jacobian of parameter mapping."],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.apply_param_jac","delA","Multiplies by Jacobian of parameter mapping."],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.apply_param_jac","delb","Multiplies by Jacobian of parameter mapping."],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.apply_param_jac","delc","Multiplies by Jacobian of parameter mapping."]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.apply_parameters":[[10,1,2,0,"id_to_param_value","(optional) dict mapping parameter ids to values."],[10,1,2,0,"keep_zeros","(optional) if True, store explicit zeros in A where parameters are affected."],[10,1,2,0,"quad_obj","(optional) if True, include quadratic objective term."],[10,1,2,0,"zero_offset","(optional) if True, zero out the constant offset in the parameter vector."]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.split_adjoint":[[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.split_adjoint","del_vars","Adjoint of split_solution."]],"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.split_solution":[[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.split_solution","active_vars","Splits the solution into individual variables."],[10,1,2,"cvxpy.reductions.dcp2cone.cone_matrix_stuffing.ParamConeProg.split_solution","sltn","Splits the solution into individual variables."]],"cvxpy.reductions.dcp2cone.dcp2cone":[[10,2,1,0,"Dcp2Cone","Bases: Canonicalization"]],"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone":[[10,3,1,0,"accepts","A problem is accepted if it is a minimization and is DCP."],[10,3,1,0,"apply","Converts a DCP problem to a conic form."],[10,3,1,0,"canonicalize_expr","Canonicalize an expression, w.r.t. canonicalized arguments."],[10,3,1,0,"canonicalize_tree","Recursively canonicalize an Expression."]],"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.__init__":[[10,1,2,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone","problem","Bases: Canonicalization"],[10,1,2,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone","quad_obj","Bases: Canonicalization"]],"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.accepts":[[10,1,2,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.accepts","problem","A problem is accepted if it is a minimization and is DCP."]],"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.apply":[[10,1,2,"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.apply","problem","Converts a DCP problem to a conic form."]],"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.canonicalize_expr":[[10,1,2,0,"affine_above",""],[10,1,2,0,"args",""],[10,1,2,0,"expr",""]],"cvxpy.reductions.dcp2cone.dcp2cone.Dcp2Cone.canonicalize_tree":[[10,1,2,0,"affine_above",""],[10,1,2,0,"expr",""]],"cvxpy.reductions.dgp2dcp.dgp2dcp":[[11,2,1,0,"Dgp2Dcp","Bases: Canonicalization"]],"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp":[[11,3,1,0,"accepts","A problem is accepted if it is DGP."],[11,3,1,0,"apply","Converts a DGP problem to a DCP problem."],[11,3,1,0,"canonicalize_expr","Canonicalize an expression, w.r.t. canonicalized arguments."],[11,3,1,0,"invert","Returns a solution to the original problem given the inverse_data."]],"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.__init__":[[11,1,2,"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp","problem","Bases: Canonicalization"]],"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.accepts":[[11,1,2,"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.accepts","problem","A problem is accepted if it is DGP."]],"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.apply":[[11,1,2,"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.apply","problem","Converts a DGP problem to a DCP problem."]],"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.canonicalize_expr":[[11,1,2,0,"args","Arguments to the expression."],[11,1,2,0,"canonicalize_params","Should constant subtrees containing parameters be canonicalized?"],[11,1,2,0,"expr","Expression to canonicalize."]],"cvxpy.reductions.dgp2dcp.dgp2dcp.Dgp2Dcp.invert":[[11,1,2,0,"inverse_data","The data encoding the original problem."],[11,1,2,0,"solution","A solution to a problem that generated the inverse_data."]],"cvxpy.reductions.eval_params":[[11,2,1,0,"EvalParams","Bases: Reduction"]],"cvxpy.reductions.eval_params.EvalParams":[[11,3,1,0,"accepts","States whether the reduction accepts a problem."],[11,3,1,0,"apply","Replace parameters with constant values."],[11,3,1,0,"invert","Returns a solution to the original problem given the inverse_data."]],"cvxpy.reductions.eval_params.EvalParams.__init__":[[11,1,2,"cvxpy.reductions.eval_params.EvalParams","problem","Bases: Reduction"]],"cvxpy.reductions.eval_params.EvalParams.accepts":[[11,1,2,0,"problem","The problem to check."]],"cvxpy.reductions.eval_params.EvalParams.apply":[[11,1,2,0,"problem","The problem whose parameters should be evaluated."]],"cvxpy.reductions.eval_params.EvalParams.invert":[[11,1,2,"cvxpy.reductions.eval_params.EvalParams.invert","inverse_data","Returns a solution to the original problem given the inverse_data."],[11,1,2,"cvxpy.reductions.eval_params.EvalParams.invert","solution","Returns a solution to the original problem given the inverse_data."]],"cvxpy.reductions.flip_objective":[[11,2,1,0,"FlipObjective","Bases: Reduction"]],"cvxpy.reductions.flip_objective.FlipObjective":[[11,3,1,0,"accepts","States whether the reduction accepts a problem."],[11,3,1,0,"apply","\\max(f(x)) = -\\min(-f(x))"],[11,3,1,0,"invert","Map the solution of the flipped problem to that of the original."]],"cvxpy.reductions.flip_objective.FlipObjective.__init__":[[11,1,2,"cvxpy.reductions.flip_objective.FlipObjective","problem","Bases: Reduction"]],"cvxpy.reductions.flip_objective.FlipObjective.accepts":[[11,1,2,0,"problem","The problem to check."]],"cvxpy.reductions.flip_objective.FlipObjective.apply":[[11,1,2,0,"problem","The problem whose objective is to be flipped."]],"cvxpy.reductions.flip_objective.FlipObjective.invert":[[11,1,2,0,"inverse_data","The inverse data returned by an invocation to apply."],[11,1,2,0,"solution","A solution object."]],"cvxpy.reductions.qp2quad_form":[[12,6,0,1,"qp2symbolic_qp",""],[12,6,0,1,"qp_matrix_stuffing",""]],"cvxpy.reductions.qp2quad_form.qp2symbolic_qp":[[12,2,1,0,"Qp2SymbolicQp","Bases: Canonicalization"],[12,0,1,0,"accepts","Problems with quadratic, piecewise affine objectives, piecewise-linear constraints inequality constraints, and affine equality constraints are accepted by the reduction."]],"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp":[[12,3,1,0,"accepts","Problems with quadratic, piecewise affine objectives, piecewise-linear constraints inequality constraints, and affine equality constraints are accepted."],[12,3,1,0,"apply","Converts a QP to an even more symbolic form."]],"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp.__init__":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp","problem","Bases: Canonicalization"]],"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp.accepts":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp.accepts","problem","Problems with quadratic, piecewise affine objectives, piecewise-linear constraints inequality constraints, and affine equality constraints are accepted."]],"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp.apply":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.Qp2SymbolicQp.apply","problem","Converts a QP to an even more symbolic form."]],"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.accepts":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp2symbolic_qp.accepts","problem","Problems with quadratic, piecewise affine objectives, piecewise-linear constraints inequality constraints, and affine equality constraints are accepted by the reduction."]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing":[[12,2,1,0,"ConeDims","Bases: object"],[12,2,1,0,"ParamQuadProg","Bases: ParamProb"],[12,2,1,0,"QpMatrixStuffing","Bases: MatrixStuffing"]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ConeDims":[[12,5,1,0,"exp","The number of 3-dimensional exponential cones"],[12,5,1,0,"nonpos","The dimension of the non-positive cone."],[12,5,1,0,"psd","A list of the positive semidefinite cone dimensions, where the dimension of the PSD cone of k by k matrices is k."],[12,5,1,0,"soc","A list of the second-order cone dimensions."],[12,5,1,0,"zero","The dimension of the zero cone."]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ConeDims.__init__":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ConeDims","constr_map","Bases: object"]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg":[[12,3,1,0,"apply_param_jac","Multiplies by Jacobian of parameter mapping."],[12,3,1,0,"apply_parameters","Returns A, b after applying parameters (and reshaping)."],[12,3,1,0,"is_mixed_integer","Is the problem mixed-integer?"],[12,3,1,0,"split_adjoint","Adjoint of split_solution."],[12,3,1,0,"split_solution","Splits the solution into individual variables."]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.__init__":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","A","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","P","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","constraints","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","formatted","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","lower_bounds","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","param_id_to_col","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","parameters","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","q","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","upper_bounds","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","var_id_to_col","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","variables","Bases: ParamProb"],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg","x","Bases: ParamProb"]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.apply_param_jac":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.apply_param_jac","active_params","Multiplies by Jacobian of parameter mapping."],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.apply_param_jac","delA","Multiplies by Jacobian of parameter mapping."],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.apply_param_jac","delP","Multiplies by Jacobian of parameter mapping."],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.apply_param_jac","delb","Multiplies by Jacobian of parameter mapping."],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.apply_param_jac","delq","Multiplies by Jacobian of parameter mapping."]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.apply_parameters":[[12,1,2,0,"id_to_param_value","(optional) dict mapping parameter ids to values"],[12,1,2,0,"keep_zeros","(optional) if True, store explicit zeros in A where parameters are affected"],[12,1,2,0,"zero_offset","(optional) if True, zero out the constant offset in the parameter vector"]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.split_adjoint":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.split_adjoint","del_vars","Adjoint of split_solution."]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.split_solution":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.split_solution","active_vars","Splits the solution into individual variables."],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.ParamQuadProg.split_solution","sltn","Splits the solution into individual variables."]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing":[[12,3,1,0,"accepts","States whether the reduction accepts a problem."],[12,3,1,0,"apply","See docstring for MatrixStuffing.apply"],[12,3,1,0,"invert","Retrieves the solution to the original problem."],[12,3,1,0,"stuffed_objective",""]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.__init__":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing","canon_backend","Bases: MatrixStuffing"]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.accepts":[[12,1,2,0,"problem","The problem to check."]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.apply":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.apply","problem","See docstring for MatrixStuffing.apply"]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.invert":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.invert","inverse_data","Retrieves the solution to the original problem."],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.invert","solution","Retrieves the solution to the original problem."]],"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.stuffed_objective":[[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.stuffed_objective","extractor",""],[12,1,2,"cvxpy.reductions.qp2quad_form.qp_matrix_stuffing.QpMatrixStuffing.stuffed_objective","problem",""]],"cvxpy.reductions.reduction":[[8,2,1,0,"Reduction","Abstract base class for reductions."]],"cvxpy.reductions.reduction.Reduction":[[8,3,1,0,"__init__","Construct a reduction for reducing problem."],[8,3,1,0,"accepts","States whether the reduction accepts a problem."],[8,3,1,0,"apply","Applies the reduction to a problem and returns an equivalent problem."],[8,3,1,0,"invert","Returns a solution to the original problem given the inverse_data."],[8,3,1,0,"reduce","Reduces the owned problem to an equivalent problem."],[8,3,1,0,"retrieve","Retrieves a solution to the owned problem."]],"cvxpy.reductions.reduction.Reduction.__init__":[[8,1,2,0,"problem","A problem owned by this reduction; possibly None."]],"cvxpy.reductions.reduction.Reduction.accepts":[[8,1,2,0,"problem","The problem to check."]],"cvxpy.reductions.reduction.Reduction.apply":[[8,1,2,0,"problem","The problem to which the reduction will be applied."]],"cvxpy.reductions.reduction.Reduction.invert":[[8,1,2,0,"inverse_data","The data encoding the original problem."],[8,1,2,0,"solution","A solution to a problem that generated the inverse_data."]],"cvxpy.reductions.reduction.Reduction.retrieve":[[8,1,2,0,"solution","A solution to the problem emitted by reduce()."]],"cvxpy.reductions.solution":[[8,2,1,0,"Solution","A solution to an optimization problem."]],"cvxpy.reductions.solution.Solution":[[8,5,1,0,"attr","Miscelleneous information propagated up from a solver."],[8,5,1,0,"dual_vars","A map from constraint ids to dual values."],[8,5,1,0,"opt_val","The optimal value."],[8,5,1,0,"primal_vars","A map from variable ids to optimal values."],[8,5,1,0,"status","The status code."]],"cvxpy.reductions.solution.Solution.__init__":[[8,1,2,"cvxpy.reductions.solution.Solution","attr","A solution to an optimization problem."],[8,1,2,"cvxpy.reductions.solution.Solution","dual_vars","A solution to an optimization problem."],[8,1,2,"cvxpy.reductions.solution.Solution","opt_val","A solution to an optimization problem."],[8,1,2,"cvxpy.reductions.solution.Solution","primal_vars","A solution to an optimization problem."],[8,1,2,"cvxpy.reductions.solution.Solution","status","A solution to an optimization problem."]],"cvxpy.reductions.solvers.solving_chain":[[8,2,1,0,"SolvingChain","Bases: Chain"]],"cvxpy.reductions.solvers.solving_chain.SolvingChain":[[8,3,1,0,"prepend","Create and return a new SolvingChain by concatenating chain with this instance."],[8,5,1,0,"reductions","A list of reductions."],[8,3,1,0,"solve","Solves the problem by applying the chain."],[8,3,1,0,"solve_via_data","Solves the problem using the data output by the an apply invocation."],[8,5,1,0,"solver","The solver, i.e., reductions[-1]."]],"cvxpy.reductions.solvers.solving_chain.SolvingChain.__init__":[[8,1,2,"cvxpy.reductions.solvers.solving_chain.SolvingChain","problem","Bases: Chain"],[8,1,2,0,"reductions","A list of reductions."]],"cvxpy.reductions.solvers.solving_chain.SolvingChain.prepend":[[8,1,2,"cvxpy.reductions.solvers.solving_chain.SolvingChain.prepend","chain","Create and return a new SolvingChain by concatenating chain with this instance."]],"cvxpy.reductions.solvers.solving_chain.SolvingChain.solve":[[8,1,2,0,"problem","The problem to solve."],[8,1,2,0,"solver_opts","Solver specific options."],[8,1,2,0,"verbose","Whether to enable solver verbosity."],[8,1,2,0,"warm_start","Whether to warm start the solver."]],"cvxpy.reductions.solvers.solving_chain.SolvingChain.solve_via_data":[[8,1,2,0,"data","Data for the solver."],[8,1,2,0,"problem","The problem to solve."],[8,1,2,0,"solver_opts","Solver specific options."],[8,1,2,0,"verbose","Whether to enable solver verbosity."],[8,1,2,0,"warm_start","Whether to warm start the solver."]],"cvxpy.rel_entr.__init__":[[3,1,2,"cvxpy.rel_entr","x","Bases: Elementwise"],[3,1,2,"cvxpy.rel_entr","y","Bases: Elementwise"]],"cvxpy.reshape.__init__":[[2,1,2,0,"expr","The expression to reshape"],[2,1,2,0,"order",""],[2,1,2,0,"shape","The shape to reshape to"]],"cvxpy.scalene":[[3,1,2,"cvxpy.scalene","alpha","Alias for alpha*pos(x) + beta*neg(x)."],[3,1,2,"cvxpy.scalene","beta","Alias for alpha*pos(x) + beta*neg(x)."],[3,1,2,"cvxpy.scalene","x","Alias for alpha*pos(x) + beta*neg(x)."]],"cvxpy.sqrt":[[3,1,2,"cvxpy.sqrt","x","The square root of an expression."]],"cvxpy.square":[[3,1,2,"cvxpy.square","x","The square of an expression."]],"cvxpy.sum":[[2,1,2,0,"axis","The axis or axes along which to sum."],[2,1,2,0,"expr","The expression to sum the entries of."],[2,1,2,0,"keepdims","If set to true, the axes which are summed over remain in the output as dimensions with size one."]],"cvxpy.swapaxes.__init__":[[2,1,2,0,"axis1","The first axis to swap."],[2,1,2,0,"axis2","The second axis to swap."],[2,1,2,0,"expr","The expression to swap axes of."]],"cvxpy.trace.__init__":[[2,1,2,0,"expr","The expression to sum the diagonal of."]],"cvxpy.transforms":[[13,2,1,0,"indicator","if constraints hold, +infty otherwise."],[13,3,1,0,"linearize","Returns an affine approximation to the expression computed at the variable/parameter values."]],"cvxpy.transforms.indicator.__init__":[[13,1,2,0,"constraints","A list of constraint objects."],[13,1,2,0,"err_tol","A numeric tolerance for determining whether the constraints hold."]],"cvxpy.transforms.partial_optimize":[[13,3,1,0,"partial_optimize","Partially optimizes the given problem over the specified variables."]],"cvxpy.transforms.partial_optimize.partial_optimize":[[13,1,2,0,"dont_opt_vars","The variables to not optimize over."],[13,1,2,0,"kwargs","Additional solver specific keyword arguments."],[13,1,2,0,"opt_vars","The variables to optimize over."],[13,1,2,0,"solver","The default solver to use for value and grad."]],"cvxpy.transforms.scalarize":[[13,3,1,0,"log_sum_exp","Combines objectives as log_sum_exp of weighted terms."],[13,3,1,0,"max","Combines objectives as max of weighted terms."],[13,3,1,0,"targets_and_priorities","Combines objectives with penalties within a range between target and limit."],[13,3,1,0,"weighted_sum","Combines objectives as a weighted sum."]],"cvxpy.transforms.scalarize.log_sum_exp":[[13,1,2,0,"gamma","Parameter interpolating between weighted_sum and max."],[13,1,2,0,"weights","A vector of weights."]],"cvxpy.transforms.scalarize.max":[[13,1,2,0,"weights","A vector of weights."]],"cvxpy.transforms.scalarize.targets_and_priorities":[[13,1,2,0,"limits","Optional hard end (start) of penalty for Minimize (Maximize)"],[13,1,2,0,"off_target","Penalty outside of target."],[13,1,2,0,"priorities","The weight within the trange."],[13,1,2,0,"targets","The start (end) of penalty for Minimize (Maximize)"]],"cvxpy.transforms.scalarize.weighted_sum":[[13,1,2,0,"weights","A vector of weights."]],"cvxpy.transforms.suppfunc":[[13,2,1,0,"SuppFunc","Given a list of CVXPY Constraint objects \\texttt{constraints} involving a real CVXPY Variable \\texttt{x}, consider the convex set"]],"cvxpy.transforms.suppfunc.SuppFunc":[[13,3,1,0,"__call__","Return an atom representing"]],"cvxpy.transforms.suppfunc.SuppFunc.__call__":[[13,1,2,"cvxpy.transforms.suppfunc.SuppFunc.__call__","y","Return an atom representing"]],"cvxpy.transforms.suppfunc.SuppFunc.__init__":[[13,1,2,0,"constraints","Usually, these are constraints over \\texttt{x}, and some number of auxiliary CVXPY Variables."],[13,1,2,0,"x","This variable cannot have any attributes, such as PSD=True, nonneg=True, symmetric=True, etc..."]],"cvxpy.transpose.__init__":[[2,1,2,"cvxpy.transpose","axes","Bases: AffAtom"],[2,1,2,"cvxpy.transpose","expr","Bases: AffAtom"]],"cvxpy.upper_tri.__init__":[[2,1,2,"cvxpy.upper_tri","expr","Bases: AffAtom"]],"cvxpy.vdot":[[2,1,2,0,"x","The conjugate-linear argument to the inner product."],[2,1,2,0,"y","The linear argument to the inner product."]],"cvxpy.vec":[[2,1,2,0,"X","The matrix to flatten."],[2,1,2,0,"order",""]],"cvxpy.von_neumann_entr.__init__":[[4,1,2,0,"X","A PSD matrix"],[4,1,2,0,"quad_approx","This is either an empty tuple (default) or a 2-tuple."]],"cvxpy.vstack":[[2,1,2,"cvxpy.vstack","arg_list","Wrapper on vstack to ensure list argument."]],"cvxpy.xexp.__init__":[[3,1,2,"cvxpy.xexp","x","Bases: Elementwise"]],"solve":[[78,1,2,0,"enforce_dpp","When True, a DPPError will be thrown when trying to solve a non-DPP problem (instead of just a warning)."],[78,1,2,0,"gp","If True, parses the problem as a disciplined geometric program instead of a disciplined convex program."],[78,1,2,0,"ignore_dpp","When True, DPP problems will be treated as non-DPP, which may speed up compilation."],[78,1,2,0,"kwargs","Additional keyword arguments specifying solver specific options."],[78,1,2,0,"qcp","If True, parses the problem as a disciplined quasiconvex program instead of a disciplined convex program."],[78,1,2,0,"requires_grad","Makes it possible to compute gradients of a solution with respect to Parameters by calling problem.backward() after solving, or to compute perturbations to the variables given perturbations to Parameters by calling problem.derivative()."],[78,1,2,0,"solver","The solver to use."],[78,1,2,0,"verbose","Overrides the default of hiding solver output."]]},"objnames":{"0":["py","function","Python function"],"1":["py","parameter","Python parameter"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","property","Python property"],"5":["py","attribute","Python attribute"],"6":["py","module","Python module"]},"objtypes":{"0":"py:function","1":"py:parameter","2":"py:class","3":"py:method","4":"py:property","5":"py:attribute","6":"py:module"},"terms":{"":[1,2,3,4,5,6,7,8,9,10,13,15,17,18,19,20,22,23,25,27,30,32,33,34,35,36,39,40,41,43,45,46,49,52,60,61,62,63,64,66,69,70,72,73,74,75,77,78,79],"0":[2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,66,67,69,70,71,72,73,74,75,77,78],"00":[22,24,25,26,29,30,32,35,45,53,78],"000":78,"000000":52,"00000000001":77,"00000000006":77,"0000000108569758":72,"000000020895385":46,"0000e":[25,26,32,45],"0001":3,"000114922":52,"000121":78,"00025244976":69,"000e":[30,32,78],"001":[3,4,13,27],"0014":45,"0014e":45,"0016":45,"0017":45,"0018":45,"00282008":29,"002920361405226024":29,"0039053948996930054":29,"003989885269615319":29,"005008539285258121":29,"005265185332845983":29,"005909828287484":37,"006931929503816392":29,"0072184732476817896":52,"007278100007476402":29,"007339011292898449":29,"007356156596477946":29,"007779246694466739":29,"00812":[4,5],"00816457":29,"008396764193205366":29,"008486679700021057":29,"008643141637584189":29,"008827511916396866":29,"00926009328813662":53,"009354606824469416":29,"00996":44,"00e":[24,32,35,45,78],"01":[20,22,24,25,26,29,30,32,35,44,45,53,77,78],"0100":45,"010014212812318733":45,"01035919":29,"01067238":52,"0109e":52,"01386736e":29,"01388769e":29,"014039687334395924":29,"014551161988556204":29,"01455643e":29,"01647636e":29,"01726231e":29,"0173098":37,"01810297853945281":29,"01954949e":29,"01e":32,"02":[20,22,24,25,26,29,31,32,35,45,78],"0204081632653":20,"02136471e":20,"02157264e":29,"021943924920767337":29,"022938564327729952":29,"02327185":42,"02445701":20,"02555143":29,"0269e":35,"02845111e":29,"02979328283505179":29,"02e":[35,44],"03":[22,24,25,26,29,32,35,45,78],"030e":22,"03228613":38,"03261455":53,"03546983e":29,"03553498e":29,"03636918e":29,"03836298":29,"03852376e":20,"03897402158866238":29,"0390003355948896":52,"03e":35,"04":[22,24,25,26,29,32,35,45,78],"04081632653061":20,"04253095":42,"04256418e":29,"04368684":20,"04368697":20,"0439e":35,"04432888e":29,"0447e":24,"04695033e":29,"0480e":25,"04947620645689951":52,"04958204907945361":29,"04979217e":52,"04e":35,"05":[13,18,22,23,24,25,26,29,31,32,33,35,45,49,52,73,78],"0529e":25,"0542e":25,"0569071":50,"05807467e":20,"05892579e":29,"05e":24,"06":[22,24,25,29,32,35,45,52,78],"06014071":38,"0606":24,"0606e":24,"0607e":24,"060e":22,"0611":44,"06122448979592":20,"06243588":42,"06257705e":29,"06571645":42,"06766021043574907":29,"06840502e":29,"06e":[24,45],"07":[20,22,25,26,29,32,35,45,52,78],"07015116e":29,"0710e":25,"07166961":44,"0720e":26,"0727":44,"07296862":38,"072e":22,"07360396":20,"07446433e":20,"074e":22,"07723947":29,"07999999":50,"079e":22,"07e":35,"08":[5,20,22,25,30,32,78],"08016077":20,"08016135":20,"08134019":37,"08163265306123":20,"08418897":26,"0845784":37,"08549910e":29,"08957766e":29,"08e":[24,35,44],"09":[20,22,24,25,26,30,32,46,52,78],"090e":32,"091e":30,"09234807":29,"09295501592922492":29,"09491185":53,"09549810e":29,"09668578":29,"09810836e":29,"09e":[24,35,44],"0d":[70,79],"0e":[24,32,45,78],"0e2":78,"0e5":78,"0x105d17cc0":31,"0x108adedd8":56,"0x11ae42518":22,"0x11aee9630":22,"0x12b367cd0":45,"0x12da7e410":45,"0x7f571d7bfdd8":52,"0xb1853f1d0":31,"0xd":79,"0xd19325278":24,"0xd1b50d438":24,"0xe":79,"1":[1,2,3,4,5,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,52,53,55,56,57,58,59,60,61,63,64,66,69,70,72,73,74,75,76,77,78],"10":[2,4,5,7,13,14,16,18,19,20,22,23,24,25,26,29,30,31,32,33,34,35,38,40,42,45,46,47,51,52,53,55,56,69,70,72,73,74,77,78,79],"100":[20,24,34,35,44,45,47,55,56,57,58,69,70,78],"1000":[3,24,32,33,45,58,70,78],"10000":[7,29,44,45],"1001":3,"10037225e":29,"101":[19,20,44],"10121868e":29,"10131657":38,"10204081632654":20,"10213353":44,"1024":[3,4],"10264071e":29,"10269406":29,"103":20,"1045507":35,"10472383e":29,"1047552":35,"1047553":35,"105":[20,44],"1057e":32,"1063942":37,"107":[20,44],"10714108e":53,"109":20,"10e":[24,35],"11":[2,18,20,22,24,25,26,29,32,34,35,44,52,60,61,72,75,77,78,79],"11044":35,"11057":32,"11061189":29,"111":[20,24,31],"1111111199586956":46,"1111111217156332":46,"11111112214962586":46,"11200259":20,"113":[20,44],"11377797":42,"11463462":29,"114638":42,"11465":35,"11480673e":77,"115":20,"11561063":50,"1168e":78,"117":20,"11799720e":52,"119":20,"1196602":50,"11e":[32,44],"12":[2,4,20,22,24,25,29,31,32,33,34,35,44,52,69,74,78,79],"1200":24,"12014739e":29,"121":20,"1210":45,"121e":22,"122":44,"12219313e":20,"1222":[3,14],"1223":14,"1224":[3,75],"12244897959184":20,"1225":24,"123":[4,20],"123036e":24,"12383803e":29,"1240":24,"1246e":35,"125":20,"125000":52,"12553":64,"125e":78,"12655967":38,"127":20,"1278e":25,"12799688":37,"12819921698143966":29,"129":20,"129066":32,"12985839":38,"12e":[35,78],"13":[2,4,20,22,25,26,29,32,34,39,44,52,53,63,64,78,79],"1305":24,"131":20,"131035e":24,"13216889":29,"133":[20,36],"1333":14,"133796":20,"13410340e":29,"13439419":20,"134e":32,"135":20,"13553757":20,"13598552":29,"137":20,"13877259":26,"139":20,"13e":24,"14":[2,4,18,20,22,25,29,32,34,36,44,45,50,78,79],"1403":14,"140625":52,"141":20,"14133859146":77,"1416":24,"14221476":48,"14285714285714":20,"143":20,"14301082":42,"1438":14,"143e":22,"14436946495363565":52,"14440604":52,"145":[20,36],"145508":52,"145874":52,"145889":52,"145897":52,"1458979":52,"145905":52,"145996":52,"14622208e":53,"146484":52,"147":20,"148":27,"1484946":20,"14934798e":29,"14e":[24,32,35],"15":[2,4,20,22,23,24,25,29,31,32,34,37,38,40,45,52,73,77],"150":20,"15005890e":29,"15158793820131744":52,"151e":30,"153":4,"1538811703979786":28,"15440264":42,"1554199":35,"15561552e":29,"15606388e":29,"156250":52,"15e":[24,35],"16":[2,18,20,22,23,24,25,29,32,33,34,55,56,57,58,73,77],"16285450e":20,"16325748":29,"16326530612245":20,"16358584e":53,"16370661":38,"16539699":42,"16622183e":29,"16730769":49,"167608186713004":33,"16938243":53,"16e":[24,35,44],"17":[2,4,20,22,24,25,29,32,64,74,78,79],"17040399e":29,"1705":[4,5],"17122095":20,"17157287":44,"1720e":35,"17227344":29,"17321003e":29,"17492418":37,"17493179":37,"17692308":49,"17730381e":29,"17914429":29,"17e":45,"18":[2,20,22,24,25,29,32,69,79],"180":18,"18270433":40,"1827847":35,"18367346938776":20,"184352986830617e":52,"18600578e":20,"18653846":49,"18670276027770083":29,"18723548":29,"18853643e":29,"1887":15,"188e":32,"18928983":29,"18e":35,"19":[2,20,22,25,29,32],"191":22,"19196383e":20,"19313706":42,"193e":30,"195":44,"196":27,"19615385":49,"197":44,"1994e":25,"19961841702e":77,"19e":35,"1d":[2,18,79],"1d_uniform_lin":18,"1e":[4,5,7,13,22,24,25,26,28,31,32,33,34,43,44,45,53,73,78],"1e30":78,"1e4":27,"1e7":27,"1f":[18,73],"1g":73,"1j":[4,18,23,60,61,70,72],"1q":[60,61,75],"1th":8,"2":[1,2,3,4,5,6,7,10,11,12,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,52,53,55,56,57,58,60,61,63,66,67,69,70,72,73,74,75,76,77,78],"20":[2,16,18,20,22,23,24,25,26,27,29,31,32,35,37,40,45,55,57,58,62,71,78,79],"200":[19,22,24,35,78],"2000":[20,22,69,70,78],"20020115":29,"2004":[64,66],"2004e":25,"2005":[20,22],"2006":[18,20,23,34],"2007":25,"2008":[26,33],"201":52,"2012":[22,32,35,78],"2013":[10,12],"2014":[18,20,23,25,26,29,33,34,78],"2016":[12,59,64],"2017":[10,12,35,66],"2018":[24,32,64],"2019":[45,64],"2020":64,"20313124":29,"20408163265306":20,"20542830e":29,"20683981e":52,"207":15,"20725095e":29,"20910778e":29,"20911897":40,"20e":35,"21":[2,20,22,25,29,32,77],"210":30,"2107":14,"211":77,"21168134e":29,"212":77,"213":44,"213215e":24,"213473":29,"21455250e":29,"21470465":29,"21e":[35,44],"22":[2,20,22,24,25,29,32,33,44,63],"22000":32,"22027817":42,"220912604467838":38,"22228637":41,"2224136":20,"22429324e":29,"22448979591837":20,"2245077":53,"22557723e":29,"22641711":29,"2269e":24,"22709":43,"22742919e":29,"228":[3,75],"22844259e":29,"229":44,"22938358e":20,"22942":43,"22e":45,"23":[2,4,19,20,29,32],"23000":45,"23117764e":29,"23214532":29,"23428169":29,"23461538":49,"2350e":25,"23620331e":29,"2363529":20,"23641422":29,"23656013e":29,"2388e":35,"23953449":37,"23e":[24,35],"24":[2,20,26,29,32,33,69],"24033457e":29,"24083502":20,"24273668":29,"243":45,"244897959183675":20,"245":44,"24534599":20,"245879":29,"24689205":41,"24749082e":29,"2478":24,"2479328":26,"24937038":38,"24976681e":77,"24e":[24,32,35,44,78],"25":[2,4,15,20,23,24,29,31,32,39,45,52],"250":78,"2500":78,"25017792":29,"25079329":29,"25155585e":29,"25412229":29,"255":35,"256":4,"25755998":20,"25961964e":29,"26":[18,20,29,32,33],"2610785752467482e":52,"261121":35,"2614279":35,"26183347e":29,"262144":35,"262e":32,"26345269e":29,"26354249e":29,"26530612244898":20,"2661":35,"26621851":53,"26647247e":29,"26650967e":29,"26699524":20,"26808607e":29,"2687881":20,"2689e":25,"2692":24,"26922215":42,"26930797e":29,"2693e":25,"27":[20,23,29,32],"27019762":37,"27091799207174":31,"27179726":29,"27429285e":20,"27513":43,"27589039":29,"27680128e":20,"27688":24,"27831861e":29,"27e":32,"28":[20,25,29,32,34],"2813":35,"28159768":20,"28165827e":29,"282":44,"28425055":52,"2851e":35,"28571428571429":20,"28680186e":29,"286e":22,"28864368e":29,"28906472e":20,"28989542425":35,"28e":[24,32],"29":[20,29,32],"291":22,"293119":37,"295":4,"29557654":20,"29759913":24,"29769913":40,"2982":32,"29e":[35,44],"2_":[4,43],"2_2":[16,21,22,32],"2d":[2,4,18,79],"2d_random":18,"2d_uniform_lattic":18,"2e":[7,22,25,26,32,44,73,78],"2f":[19,24],"2m":[3,60,61,75],"3":[1,2,4,5,6,7,9,10,11,12,14,15,19,20,22,24,25,26,27,28,29,30,31,32,34,35,36,40,41,42,43,44,45,47,48,50,52,55,56,57,63,66,69,70,71,72,73,74,75,77,78],"30":[4,18,19,20,23,29,35,62],"300":35,"3015387":38,"30283658":26,"3061224489796":20,"30625742e":77,"30642705":20,"30747":52,"30752726e":20,"30764":52,"30766":52,"30775":52,"30779":52,"30788":52,"30793":52,"307e":22,"30802":52,"30825472":42,"30835":52,"3084e":24,"30e":[24,35,45],"31":20,"3122":22,"31334078e":29,"3148874":29,"31496200373359456":43,"3150":43,"31578328e":29,"31633730e":29,"31783":43,"31892711e":29,"31904948":29,"31975762e":20,"31e":24,"32":20,"32048066":52,"32158411":37,"321e":22,"32203282":44,"3224172":38,"323426":29,"325":24,"3265306122449":20,"32683206e":29,"32784402":29,"32842713":44,"32e":35,"33":[20,34],"33027425e":29,"33039096":29,"33247519e":20,"333":36,"33367163":29,"33393633e":29,"334":44,"3346e":25,"3356679970549085":29,"33e":24,"34":[4,20],"340611":29,"341":4,"341146":29,"34145488e":29,"341943e":24,"34256526":29,"343747e":24,"343e":22,"34595403e":29,"34643668e":77,"3469129":29,"34693877551021":20,"34719938e":29,"34732251":37,"34e":35,"35":[20,24,31,52],"35065528e":20,"35283078":42,"35370661":42,"354":24,"35404466e":20,"354957764113":32,"3550":32,"35846517e":29,"35e":[24,35,44],"36":[18,20,34],"360":18,"36030618":26,"360e":32,"36189366e":29,"36215640e":29,"3630814":35,"36342995e":29,"36734693877551":20,"36892055859991446":43,"3690":43,"36e":[24,44],"37":[20,32],"37175":43,"37179":43,"3728e":25,"3729e":25,"37322961e":52,"37367039e":52,"37774148":48,"37810251":42,"37954560e":29,"37e":[24,35,44,45],"38":20,"38002833e":29,"38007474e":29,"3802e":25,"38037868e":29,"3803e":25,"38102551":37,"38292365":26,"38302416e":29,"38352317":20,"38405435":38,"38416629":26,"38430105e":20,"38434327e":53,"38460446":29,"3859":22,"38639181e":20,"38713553e":29,"38772183":40,"38775510204081":20,"38806481e":29,"38893346":50,"38e":35,"39":[20,40],"3905141":29,"39077":32,"39239642":29,"39362252e":29,"39421076e":20,"3965e":25,"39679396":41,"39862772e":20,"39872783e":29,"39889787e":29,"3998e":25,"3999e":25,"39e":[24,35,44],"3_":43,"3d":[5,14,78],"3e":[22,25,26,32,44,78],"3f":24,"3g":44,"3min":32,"4":[2,3,4,7,11,14,15,20,22,24,25,26,27,28,29,30,31,32,33,34,35,40,44,45,48,52,58,60,61,63,66,70,71,72,73,75,77,78],"40":[18,20,34,39],"400":[24,35],"4000":[24,32],"4011e":25,"4013e":25,"4014300716775199":25,"4014e":25,"4015e":25,"4017e":25,"40303325":42,"40349164":53,"40426641e":29,"40464204":29,"40591789e":20,"4071438":29,"40755835":29,"40816326530611":20,"40855006":29,"40e":35,"41":[20,32],"41048252e":29,"41086863e":29,"411":44,"4110e":25,"41151492":29,"41256203e":29,"41300012":20,"41346231":20,"41532595":29,"4154e":25,"41601146e":29,"41633637":37,"41639937e":29,"4165742899966837e":52,"41730232":26,"4194569":42,"41e":[35,78],"42":[20,64],"42003169":29,"42078084e":29,"42102372e":29,"42153652":29,"42249517e":29,"42363429e":29,"42548761e":29,"4259":32,"425e":32,"4267767":44,"42857142857143":20,"4288821220397949":[51,74],"428e":22,"4293e":35,"42e":35,"43":20,"43109122e":52,"43132832e":29,"43189790e":29,"432x288":33,"43389831":50,"43483319":26,"43675625e":29,"43746574":29,"4391586":20,"43e":[35,44],"44":[20,32],"44108256e":29,"44712856":53,"448":24,"44811159e":53,"44897959183673":20,"449291":42,"44th":22,"45":[4,18,20,31,58],"45051237e":52,"45085312e":29,"451":30,"451e":78,"45229205e":29,"4522e":25,"454":24,"45409129e":29,"45538054":40,"456":4,"45664487":29,"457106781186705":44,"45770675":40,"458":44,"4595e":26,"45966630736292":47,"45e":35,"46":20,"46121871e":29,"46202248e":29,"46340550e":29,"466":44,"46798183e":29,"4688e":26,"46938775510205":20,"46e":[24,35],"47":20,"47092764":20,"4712":24,"47289692e":29,"47350799":29,"47359672":29,"47569255e":29,"47610300459e":69,"4763e":26,"47698583":42,"47e":[24,35],"48":[20,34],"4804e":26,"48052913e":20,"480901486350394":26,"4809e":26,"4816e":26,"48187018e":29,"48674297e":29,"4889e":26,"48979591836735":20,"48e":35,"49":[19,20],"49089264":38,"49201039":26,"49427978":29,"49712163e":29,"49886837":42,"4997e":52,"49991744":48,"49999737143004713":74,"4999999999999996":23,"49e":35,"4e":[22,25,26,32,78],"4f":45,"4g":[15,27,30,36],"5":[4,14,15,16,18,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,40,42,43,44,45,46,47,48,49,50,52,55,56,57,58,63,64,66,69,70,71,72,73,75,77,78],"50":[18,19,20,25,32,34,35,45,55,56,57,66,78],"500":[20,25,35],"5000":[35,70],"500000":52,"50000165":51,"50000248":26,"50032884":29,"50416987":26,"50619494e":52,"50627898e":52,"50722737e":52,"50760383e":29,"50790152e":20,"50933223e":29,"50946872e":29,"50993526":40,"50e":[24,35],"51":22,"51020408163265":20,"511":35,"512":4,"51283929e":53,"51304362e":20,"51365483e":29,"51575697e":29,"5191":32,"51e":[35,78],"52":20,"52108618e":29,"5225e":24,"523264":35,"523265":35,"52378143":20,"5248668":26,"52745774e":29,"52817175":38,"52855369e":29,"52e":35,"53061224489795":20,"532":14,"533":36,"53717253":29,"53749151e":29,"5374e":25,"53757673e":29,"53761974e":29,"538894":22,"53896782e":20,"53e":[35,44],"54":20,"54115873":40,"54468161e":29,"545759632606043":33,"5464":32,"54834858e":29,"54e":[24,35],"55":[18,24,31,32],"55102040816327":20,"55176129e":29,"55220021e":52,"5528":22,"553365e":24,"55729":43,"55734":43,"55780427e":29,"557e":22,"55e":[35,44],"56":[4,20],"56036398e":29,"56073096":29,"5612":43,"5612147353889386":43,"56475742e":29,"56606195e":29,"56673760e":20,"5691922":29,"56927148":26,"56994586":20,"56e":[24,44,45],"57":15,"57094132e":29,"57142857142857":20,"5716":32,"57176577e":20,"57257432":29,"572761551213633":16,"572e":32,"576x432":24,"57729003e":29,"5780":22,"57913703e":29,"57e":[32,35],"58":[20,35],"58096913e":20,"580e":22,"581988871583608":47,"582394099513873":34,"582695716265503":42,"58286953e":52,"5830":32,"58366030e":53,"5840356930600721":29,"5871":32,"5883e":26,"58e":[24,35,44],"59000367e":29,"5905035557463005":16,"59183673469389":20,"59357852":53,"59511553e":29,"5971":35,"59770202":41,"5979e":25,"598":32,"59800828e":29,"5980743":29,"59913722e":20,"59e":[24,35,44],"5e":[22,25,26,32,45,78],"5f":43,"6":[2,7,14,18,19,20,22,23,24,25,26,27,29,30,31,32,34,35,40,44,45,50,52,53,63,66,69,70,73,77,78],"60":[4,18,20,24,32,45,64,78],"600":[20,24,35],"6000":32,"6007":32,"601e":32,"60355339":44,"60364688":29,"60481823e":29,"60609403e":29,"60662428":38,"6072":24,"60774132":29,"607e":22,"6080571":41,"60813803":29,"60875098e":29,"60e":[35,78],"611":24,"61175641":38,"61224489795919":20,"6144058":42,"61662526":42,"61714835e":29,"61768644e":29,"61e":24,"62":[20,30],"62394448e":29,"6242":22,"62647405":29,"62667224e":29,"62801718e":29,"62860853e":29,"62931941e":53,"6326530612245":20,"63290841e":29,"634":24,"6347201927456":22,"63514531e":29,"63616907":48,"63755883e":29,"63792853":29,"6383":32,"64":20,"64097935":37,"64153496":42,"64204427e":29,"6446e":78,"64559055e":29,"6457e":52,"6468679280023557":37,"648717724845007":74,"64965406":29,"64e":[24,44,45,78],"65":[24,31,52],"65220031e":29,"652787130613":35,"6528":35,"65284441":20,"65306122448979":20,"654348003008652":41,"65444815":29,"65884776e":29,"65e":35,"66":[20,35,47,71],"66000322824753":39,"661":44,"66111715":26,"6616084212553195":18,"66268312":29,"6632877":29,"66581033":42,"6666666801983365":47,"66e":[24,44],"67049218":20,"67157287":44,"67163958":26,"67346938775512":20,"67365045":40,"6740":32,"6771":32,"67735654":29,"68":20,"68053832":26,"68139086e":52,"68244521":40,"68754271e":52,"68e":45,"69":71,"69137835":29,"69146656":42,"6938775510204":20,"69449092e":29,"69461803e":29,"69575904":41,"69871738":29,"69942578":29,"69e":35,"6e":[22,25,26,32,44],"7":[20,22,24,25,26,29,31,32,33,34,35,37,44,45,47,52,63,66,70,77,78],"70":20,"700":35,"70049131e":29,"7005e":35,"702374203221372":48,"70591442e":20,"70834842":42,"708e":30,"70906925e":29,"70e":[32,35],"711e":22,"71225020e":29,"71428571428572":20,"716":44,"71711699e":29,"7180e":35,"7189":32,"71e":[24,35,44],"72":20,"720":35,"72155621":29,"72448408e":29,"72486628":29,"72529426e":29,"727e":32,"728e":32,"72908811e":29,"72955779e":29,"72e":[35,45],"73":4,"733":3,"73308751e":52,"73427259e":29,"73469387755102":20,"73587325e":29,"73702792e":52,"73721109":29,"73741086":29,"74":20,"74055645":53,"741e":22,"74317402e":29,"7459666715289766":47,"74736667e":29,"749e":22,"74e":[24,35,44],"75":[15,24,31],"75119989":29,"75218556e":20,"75323063":29,"7544":22,"7548711807791855":28,"75510204081633":20,"75528332e":29,"75578696e":20,"756e":30,"75789915":29,"759e":32,"75e":[35,45],"76":20,"760":35,"7612069":38,"76242265":29,"76277321e":29,"76314786e":53,"76518996":29,"766300564135502":29,"76667302":26,"76683701":40,"76924618":29,"76954636933":32,"76e":[44,78],"77":47,"77053008e":52,"77228841":44,"7726e":24,"77288000e":29,"7740":32,"77551020408163":20,"7763568394002505e":50,"778e":22,"77e":[35,44,45],"78":[4,20],"78132907e":53,"78278448":29,"78291311":26,"783363":35,"7839":22,"785408":35,"7857":78,"78589638":40,"786432":35,"78805144e":29,"788e":[30,78],"789":4,"78e":[32,35,78],"79039542e":77,"79107794":26,"7925":32,"79256197e":29,"79376843e":20,"79591836734693":20,"79927156":40,"79950842e":29,"79986015":40,"79e":[24,35],"7e":[22,25,32,44,78],"8":[3,7,15,18,20,22,23,24,25,26,27,29,30,31,32,34,35,36,44,45,46,48,50,53,60,61,66,75,78,79],"80":[20,55,78],"800":24,"8004":32,"80041338":20,"8043":22,"8048194":29,"8051":32,"808":24,"81023916":29,"81123997e":29,"81220987e":29,"81276972e":29,"81320754e":29,"814e":22,"81632653061224":20,"81696721":29,"8174":22,"8198":22,"81e":35,"82":20,"82440678":50,"824e":32,"82528741e":20,"82837896975":78,"8284":78,"82842708233":78,"82842712":44,"8285":78,"828e":78,"829e":78,"82e":[35,44],"83":[47,64],"8303":22,"8333333206334043":47,"834e":22,"8362":22,"83673469387756":20,"83780003e":29,"839e":78,"83e":[35,44,78],"84":20,"84272390e":29,"84375":50,"8457":32,"8471e":24,"84931787":29,"85":[31,33],"8500":22,"85059567e":52,"85227596e":29,"85353862":20,"854107648695203":52,"8544e":35,"85452470e":29,"8566e":24,"85708568e":20,"85714285714286":20,"8581":22,"8588":22,"85961318e":29,"85e":35,"86":[20,40],"860e":32,"861e":22,"86287821":52,"862e":22,"863":36,"8639e":24,"864e":32,"86510445":42,"8653":24,"8653e":24,"86838428":50,"8689e":24,"86e":[24,78],"87":24,"87148458":44,"87218892":29,"872983364643079":47,"8736e":26,"8768":22,"8769e":35,"876e":32,"87755102040816":20,"87e":35,"88":20,"880e":32,"881e":32,"88200333":38,"88661317e":29,"888e":22,"88916807":20,"889e":32,"89141585569918":40,"8917":22,"89263105e":29,"8931e":24,"8962e":24,"89637009":50,"89711643":38,"8977e":24,"89795918367346":20,"8982":32,"89851057":38,"898e":22,"89999999":50,"899e":32,"89e":24,"8e":[22,25,26,32,78],"9":[4,18,20,22,24,25,26,29,31,32,34,35,42,45,46,48,50,52,53,63,66,78,79],"90":[4,20],"9004":22,"9009":32,"9013":32,"901e":32,"902e":22,"90353699":29,"90382914":29,"903e":32,"9058":32,"905e":32,"90607895":29,"906e":32,"90739234e":29,"907e":32,"9086e":25,"9089":22,"90898877":29,"908e":[30,32],"9097e":35,"909e":22,"90e":78,"912e":22,"914e":22,"91561390e":20,"916e":22,"9175":22,"9183673469388":20,"91844947e":29,"91865186e":20,"92":20,"9203698369509382":52,"9207":32,"92202367e":29,"9223e":78,"92325575":20,"923e":32,"9265e":24,"927":44,"92e":[24,35,78],"9309":22,"9342":32,"93543168e":29,"93601078":20,"93621271e":29,"93720663e":29,"9383":32,"93877551020408":20,"93952558e":29,"93e":24,"94":20,"9403e":25,"94304296":44,"9458e":24,"948014872712083e":52,"94877846244994e":46,"94988511e":29,"94e":[24,35],"95":[31,78],"9537006":53,"9558":64,"955e":30,"956e":32,"9570":64,"9591836734694":20,"95e":[24,35],"96":20,"9603e":25,"961":64,"9615384629119621":49,"96487539e":20,"96701863e":29,"96797753e":20,"96879041e":29,"9687e":26,"96e":[24,35],"9702":32,"97409333":29,"976":64,"97914383":52,"9795918367347":20,"97e":[24,35,44],"98":20,"98124301e":29,"98184939e":29,"9825e":25,"9829":78,"985e":32,"986e":32,"9890":[22,32],"989407069609157":33,"9895144829793":52,"9895238539767502":52,"9899":78,"98e":24,"99473425e":29,"99502166":29,"99504965":44,"99504983":44,"99999992":20,"99999993":20,"9999999529045318":46,"99999997":20,"999999974180587":72,"99999998":20,"999999986374":69,"9999999926890524":46,"9999999938309496":72,"9999999989682057":72,"9999999989968756":46,"999999999761":77,"99e":[35,44],"9e":[22,25,32,78],"A":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,52,53,56,58,59,60,61,62,64,66,69,70,71,72,73,74,75,77,78,79],"AND":66,"AS":[10,12,14,66],"And":53,"As":[5,8,13,18,24,27,31,36,43,55,57,71,73,75,77,79],"At":[29,31,72,73,74,79],"Be":63,"But":[19,24,71],"By":[8,22,24,43,44,55,69,70,75,78],"FOR":66,"For":[1,2,3,4,6,7,9,13,14,19,21,24,25,27,29,32,35,37,38,46,52,54,59,62,66,69,70,71,72,73,74,75,77,78,79],"If":[2,3,4,5,6,7,8,9,11,13,14,27,33,37,46,59,63,64,66,69,70,71,72,73,74,75,77,78,79],"In":[4,7,8,9,14,15,19,22,24,28,30,31,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,55,56,57,58,59,62,63,66,69,70,71,72,73,77,78,79],"It":[4,7,9,13,14,22,24,32,39,46,52,53,55,57,59,62,71,72,75,77,78,79],"Its":78,"NOT":29,"No":[3,9,13,27,59,78],"Not":[66,69],"OF":[10,12,14,66],"OR":[10,12,14,63,66,79],"On":63,"One":[6,14,19,30,44,70],"Such":[3,13,14],"That":[22,24,55],"The":[0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,62,63,66,69,70,71,72,74,75,76,77,78,79],"Their":24,"Then":[7,14,15,19,27,40,63,73,78],"There":[7,27,31,46,54,56],"These":[14,15,24,27,44,54,64,72,75,77,78,79],"To":[5,14,16,17,22,24,31,32,36,45,59,62,63,64,66,70,72,73,74,77,78,79],"With":[6,15,19,78],"_":[4,5,7,9,14,16,21,24,35,39,40,41,43,44,45,46,50,55,58,60,61,63,69,71,72,75,78],"_1":[25,34,55,56,58,60,61,71,75,77],"_2":[5,14,19,22,25,32,35,37,39,42,45,53,55,57,60,61,71,74,75,78],"__":24,"__add__":6,"__call__":13,"__div__":6,"__eq__":6,"__future__":58,"__ge__":6,"__init__":[8,14,17],"__le__":6,"__lshift__":6,"__matmul__":6,"__mul__":6,"__pow__":6,"__radd__":6,"__rdiv__":6,"__rlshift__":6,"__rmatmul__":6,"__rmul__":6,"__rrshift__":6,"__rshift__":6,"__rsub__":6,"__rtruediv__":6,"__sub__":6,"__truediv__":6,"__version__":59,"_f":29,"_i":21,"_n":71,"_nestedsequ":6,"_old_valu":44,"_p":[4,72],"_subplot":24,"_supportsarrai":6,"_x":52,"_y":52,"a_":[4,24,38,45,47,48,50,60,61,72],"a_1":[10,12,41,46,72],"a_2":[46,72],"a_flr":47,"a_i":[10,12,14,18,22,23,31,37,38,42,46,59,72],"a_ib_j":2,"a_ix":[41,42],"a_j":24,"a_n":[46,72],"a_p":41,"a_param":45,"a_r":[18,23],"a_ri":18,"a_tch":45,"a_tru":45,"a_val":30,"a_wal":47,"ab":[1,4,5,13,17,18,23,24,31,33,34,35,45,56,60,61,70,75],"abid":14,"abil":[3,14,63,78,79],"abl":[52,69,71,77,79],"about":[1,5,7,8,9,10,11,12,14,19,70,78],"abov":[2,7,14,18,19,28,29,36,43,45,46,52,55,57,66,69,70,71,73,74,77,78],"abs_x":13,"absolut":[3,5,13,14,23,34,78],"absolute_dual_toler":78,"absolute_gap_toler":78,"absolute_primal_toler":78,"abstol":[7,22,32,78],"abstol_inacc":78,"abstract":[1,6,8,14,24,79],"abstractmethod":[1,5,6,8],"academ":70,"academia":70,"acceler":[32,35,78],"acceleration_lookback":[35,45,78],"accept":[4,8,9,10,11,12,13,14,66,79],"accept_unknown":78,"access":[1,7,8,9,14,46,70,78],"accessor":7,"accompani":[64,72,74,79],"accomplish":[19,78],"accord":[9,18,63,73],"accumul":[17,79],"accur":[4,17,32,78],"accuraci":[3,4,14,32,56,57,59,75,77,78],"achiev":[36,53,63,77,78],"acord":43,"acquaint":0,"acronym":4,"across":[2,4,7,9,14,21,49,69,79],"act":[14,66],"action":14,"activ":[63,70,78],"active_param":[10,12],"active_var":[10,12],"actor":8,"actual":[4,13,18,19,22,24,31,32,43,44,51],"ad":[2,9,14,20,36,37,57,59,69,70,71,73,78,79],"adapt":[18,19,20,23,24,25,26,29,32,33,34,45,47,49,70],"add":[7,14,17,18,24,31,32,63,66,74,75,78,79],"add_edg":24,"add_expr":[1,2],"add_patch":[24,31],"add_subplot":[24,31],"addendum":66,"addexpress":1,"addit":[0,4,7,8,13,14,19,24,31,38,40,42,57,62,66,69,70,72,73,74,78,79],"addition":[5,44,46,63,70,74],"address":[14,79],"adher":14,"adjac":2,"adjoint":[10,12,43,73],"adjust":[4,31,34,78],"admittedli":59,"admm":21,"adopt":75,"advanc":[5,7,24,64,76,78,79],"advantag":[63,70,78,79],"advent":19,"advertis":54,"advic":14,"advis":66,"aff":9,"affatom":[2,4],"affect":[7,10,12,73,74],"affin":[1,3,4,5,6,9,10,12,13,14,34,38,40,44,46,60,61,70,71,72,73,74,75,79],"affine2direct":[8,9],"affine_abov":[8,9,10],"after":[4,5,6,7,10,12,14,23,24,29,35,46,63,70,72,77,78,79],"again":24,"against":[24,27,66,79],"agnost":9,"agraw":[10,62,64],"agrawal2018rewrit":64,"agrawal2019dgp":64,"agrawal2019differenti":64,"agrawal2020differenti":64,"agrawal2020dqcp":64,"agre":[10,12,14,66],"agreement":66,"aid":57,"airspe":14,"aj":62,"akshai":[10,62,64],"al":[15,27,30,36],"algebra":32,"algorithm":[7,16,24,31,34,78,79],"algortithm":27,"alia":[2,3,4],"alias":77,"align":[14,32,52,60,61],"all":[0,2,3,4,5,6,7,9,10,13,14,15,17,19,20,21,23,24,27,32,36,42,45,46,55,57,59,61,62,63,66,69,70,71,72,73,74,75,77,78,79],"alldifferentcut":78,"alleg":66,"alloc":[31,34,36,40,54],"allow":[1,5,6,8,9,13,14,18,24,46,47,63,69,73,78,79],"allowablefractiongap":78,"allowablegap":78,"allowablepercentagegap":78,"almir":[18,23,34,49],"almost":[7,35],"alon":[66,79],"along":[2,4,8,17,18,24,31,52,60,61,66,69,72,76,78],"alongsid":[63,66],"alpha":[3,4,5,14,20,24,27,30,31,32,35,36,43,45,47,60,61,69,75,78],"alpha_0":27,"alpha_1":27,"alpha_i":[20,30,36],"alreadi":[2,9,19,63,69,78,79],"also":[2,3,7,8,9,13,14,17,24,30,31,32,36,37,44,46,54,56,58,62,63,66,69,70,71,72,73,74,75,77,78,79],"altern":[1,7,21,69,72],"although":[30,70,78,79],"alwai":[2,13,24,63,71,75,79],"amax":20,"amen":24,"amin":20,"amo":64,"among":[7,79],"amount":[8,14,17,36,38,44,78,79],"an":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,17,22,24,27,28,29,31,32,34,35,36,38,39,40,41,42,43,44,45,46,48,50,55,57,59,62,63,66,67,69,70,71,72,73,74,76,77,78,79],"anaconda3":24,"analog":[3,60,61,72,73,75],"analogu":73,"analys":54,"analysi":[13,54,70,71,72,74,76,79],"analyt":[7,19,73],"analyz":[24,70],"anderson":78,"angl":[18,23],"angular":18,"ani":[1,2,4,6,7,10,12,13,14,18,24,31,38,66,69,70,71,72,73,75,77,78,79],"annot":66,"announc":79,"anoth":[0,2,6,8,9,14,30,63,70,73],"answer":[14,79],"antenna":54,"anyon":14,"anyth":[5,7,8],"anywher":[24,70],"apach":[10,12,14,66,70],"api":[5,8,9,10,11,12,13,14,69,72,78,79],"appar":7,"appear":[9,14,59,64,66,73],"append":[7,17,18,24,31,32,34,35,41,42,45,49,52,55,56,57,58,73,77],"appendix":66,"appli":[1,2,3,4,5,7,8,9,10,11,12,14,16,17,19,32,34,46,66,71,72,74,75,78],"applic":[8,9,10,11,12,14,62,66,68,71,78],"apply_param_jac":[10,12],"apply_paramet":[9,10,12,14],"appreci":62,"approach":[3,13,17,31,32,57],"appropri":[5,8,14,66,78,79],"approx":[4,23,43,55],"approx_error":[1,4],"approxim":[3,4,5,13,29,34,43,44,47,50,54,55,60,61,73,75,78,79],"apt":63,"ar":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,27,29,30,31,32,33,34,35,38,39,40,41,42,43,44,45,46,48,49,51,52,53,54,55,56,58,62,63,64,66,69,70,71,72,73,74,75,77,78,79],"arang":[18,19,23,25,30,36],"arbitrari":[2,27,69,79],"arbitrarili":78,"archiv":66,"archiveprefix":64,"area":[20,47,52],"arg":[1,2,3,4,5,7,8,9,10,11,21,78],"arg1":3,"arg2":3,"arg_group":2,"arg_list":[1,2],"argmin":[16,18,21,45,56],"argsort":19,"argument":[1,2,4,5,6,7,8,9,10,11,12,13,14,43,44,46,69,70,71,72,73,74,75,78,79],"argyri":[20,29],"aris":[25,36,40,66,67],"arithmet":[70,71,72,76],"around":[7,14,19,24,69,78],"arrai":[2,3,4,14,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,62,69,70,71,72],"arrang":19,"array_geometri":18,"arriv":44,"arrow":24,"articl":[59,64],"arxiv":[4,5,64],"as_i":18,"as_r":18,"as_ri":18,"as_ri_bot":18,"as_ri_row":18,"as_ri_top":18,"asarrai":20,"ascend":45,"ascent":16,"aspect":[8,24,31,47],"assert":[2,11,46,47,51,66,70,72,73,74],"assert_allclos":7,"assign":[4,6,9,14,24,36,54,55,57,70,77],"assist":78,"associ":[5,13,16,31,33,56,58,66,78],"assum":[2,3,4,5,9,10,12,15,20,24,30,31,32,44,52,66,78],"assume_psd":[1,4],"assumpt":8,"astar_path":24,"astyp":22,"atar":18,"atar_i":18,"atar_r":18,"atar_ri":18,"atleast_1d":27,"atom":[0,6,7,9,10,13,14,26,48,50,51,62,69,70,73,76,78],"attach":66,"attain":13,"attempt":[5,9,33,73,78],"attent":78,"attr":[7,8,52],"attribut":[1,4,6,7,11,13,14,43,46,59,62,66,72,73,74,76,77,78],"aug_lagr":16,"augment":16,"author":[14,15,27,30,36,59,64,66],"authorship":66,"automat":[6,7,14,63,73,74,77,78,79],"auxiliari":[13,45],"avail":[0,7,8,13,18,33,38,59,61,63,66,69,70,78,79],"averag":[4,21,44,50,58,75],"avg":[35,78],"avoid":[14,70,79],"awai":[19,78],"awar":[19,63],"awesom":14,"awesome_conif":14,"awesomepi":14,"ax":[1,2,4,14,16,22,24,31,32,33,34,35,37,38,39,40,53,74,77,78,79],"ax_":32,"ax_t":32,"axessubplot":24,"axi":[1,2,4,5,15,18,24,27,32,35,36,45,52,60,61,69,72,76,79],"axis1":[1,2],"axis2":[1,2],"axisatom":[2,4],"b":[2,5,7,8,9,10,12,14,16,18,20,24,25,26,28,32,34,35,37,38,39,40,41,42,43,50,52,53,59,62,66,69,71,73,74,77,78,79],"b_1":[10,12,41],"b_i":[10,12,14,24,37,38,41,42,59],"b_p":41,"b_val":30,"back":[8,14,21,79],"backend":[7,14,63,76,78,79],"background":[59,62],"backward":[7,8,43,44,45,73,78,79],"bad":78,"bad_predict":19,"balanc":[40,78],"ball":[32,42],"ban":71,"bandwidth":54,"banjac":[24,32,45],"barratt":[45,64],"bartolomeo":[24,32,45,62],"base":[1,2,3,4,5,6,8,9,10,11,12,19,22,33,34,63,66,67,69,71,72,73,74,78,79],"base_test":14,"baselin":36,"basetest":14,"basi":[10,12,14,34,66,73,78,79],"basic":[14,62,68,77,78],"batch":45,"bbox_inch":[22,32],"bd":20,"beam":18,"becaus":[1,3,4,7,9,11,14,24,32,51,56,57,69,73,78,79],"becom":[15,17,18,31,33,34,46,79],"been":[1,9,11,17,36,52,66,69,78,79],"befor":[9,10,11,12,14,19,24,25,73,78,79],"began":79,"begin":[3,4,14,16,18,19,20,21,22,23,25,26,28,29,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,60,61,72,75,78,79],"behalf":66,"behav":[14,71],"behavior":[7,69,79],"behind":59,"being":[2,4,14,22,79],"believ":79,"belong":[5,9,14],"below":[2,7,9,13,14,18,19,20,22,23,24,27,31,32,34,35,44,48,50,51,52,53,61,64,66,69,70,71,72,74,77,78,79],"benchmark":79,"benefici":[66,70],"benefit":[70,78,79],"berlin":64,"bessel":4,"best":[9,27,34,78],"beta":[1,3,4,20,30,47,55,56,57,58,60,61,75],"beta_":[56,58],"beta_i":[20,30,56,58],"beta_ip_i":30,"beta_star":[55,57],"beta_tru":[56,58],"beta_v":[56,58],"beta_valu":[55,57],"betabar":78,"betastar":78,"better":[3,4,5,14,19,32,57,63,78],"between":[2,3,4,5,8,9,13,14,15,19,24,27,31,35,46,49,50,70,77,78],"beyond":[13,29,54,69,79],"bf":[14,35,56,58,60,61,75,78],"bia":57,"bibtex":[59,64],"big":[7,79],"bin":[15,27,30,36],"binari":5,"binary_oper":[1,2],"binaryoper":2,"bind":[63,66],"bisect":[27,52,74],"bit":[24,30],"bj":18,"black":[24,35],"blk":[35,78],"block":[2,7,9,14,18,21,24,31,72,73,74,75],"block_list":[1,2],"blue":[19,31,35,71],"bmat":[1,60,61,72,75],"bmatrix":[25,32,43,48,50,78],"bmod":75,"bo":19,"bodi":52,"boilerpl":66,"boldsymbol":36,"book":[23,24,59,62],"booktitl":64,"bool":[1,2,4,5,6,7,8,9,10,11,12,70,78,79],"bool_idx":9,"boolean":[4,6,9,14,22,24,31,56,58,70,78,79],"borrow":14,"both":[4,6,7,9,12,13,14,15,17,24,32,35,63,70,71,72,73,74,75,78,79],"bound":[5,6,9,13,14,19,20,22,24,27,47,49,52,70,74,77,78,79],"boundari":[13,18,19],"bounds_vector":9,"box":[54,62,71,78],"boyd":[4,15,18,19,20,22,23,25,27,28,29,30,33,34,36,46,47,49,59,62,64,69],"br":24,"bracket":66,"branch":[5,14],"brandon":64,"break":[24,27,31,71],"breakdown":8,"brendan":[35,78],"brigg":[15,27,30,36],"bring":[24,79],"broadcast":[2,14,21,54,71,79],"broadcast_to":[1,79],"broken":[14,79],"brows":[14,62],"bt":[22,32],"bucket":36,"budget":[24,38],"buffer":[6,44,78],"bug":[14,59,62],"buggi":78,"build":[1,8,14,18,20,31,38,62,63,78,79],"built":[9,59,62,67,73,75,78],"builtin":79,"bundl":63,"busseti":62,"button":63,"bw":18,"bw_":32,"bw_t":32,"bx":74,"byond":79,"bypass":[7,69],"byte":6,"c":[2,5,6,7,9,10,12,13,14,15,17,19,20,22,24,28,32,35,38,39,41,42,43,45,46,52,60,61,63,66,67,69,71,72,73,75,77,78,79],"c0":20,"c_":[19,20],"c_0":20,"c_1":20,"c_cvx":19,"c_d":52,"c_i":[42,45],"c_j":[15,24,38],"c_k":2,"c_l":52,"c_m":20,"c_ol":19,"c_ols_uncensor":19,"c_p":52,"c_param":45,"c_tch":45,"c_true":[19,45],"cach":[14,73,78],"calcul":[7,18,30,33,73],"call":[3,6,7,8,9,14,15,17,21,43,46,59,63,69,70,71,72,73,74,75,77,78,79],"callabl":[4,6],"callback":6,"callback_param":6,"callbackparamet":6,"can":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,19,21,22,23,24,25,26,27,30,31,32,33,34,35,36,39,42,43,45,46,50,51,52,53,55,57,62,63,69,70,71,72,73,74,75,77,78,79],"cannot":[4,7,13,24,27,34,66,70,71,72,77,78],"canon":[5,6],"canon_backend":[7,10,12,69],"canonic":[4,5,7,9,10,11,12,14,73,76,78,79],"canonicalize_expr":[8,9,10,11],"canonicalize_param":[8,11],"canonicalize_tre":[8,9,10],"capabl":[8,28,78],"capac":[17,36,54],"capacit":20,"captur":[7,17,77,79],"cardin":34,"care":[8,45,59],"carri":[6,12,21,66],"case":[1,3,4,5,14,15,19,20,24,27,30,32,35,43,52,54,59,70,73,75,77,78,79],"cast":[6,24,50,75],"casual":3,"catch":54,"categor":14,"categori":[8,79],"caus":[14,19,24,66,78,79],"cb":24,"cbc":70,"cc":20,"ccc":4,"ccl":3,"cd":14,"cdc":22,"cdf":[60,61,75,79],"cdot":[2,4,20,25,45,49,50,52,60,61,72,75],"ceil":[18,74],"cell":[24,29,53],"censor":54,"center":[18,19,24],"central":30,"certain":[24,27,52,70,79],"certifi":71,"cg":[35,78],"cgl":78,"chain":[7,43,59,69,77],"challeng":[19,70],"chanc":[24,79],"chang":[7,8,14,15,18,24,38,40,42,43,44,62,66,73,76,78],"changelog":62,"channel":[36,54],"channel_capac":15,"chapter":24,"charact":66,"charg":66,"chat":62,"cheap":70,"chebyshev":23,"check":[3,4,5,6,7,8,10,11,12,13,14,23,24,25,27,28,34,36,46,59,62,70,71,72,73,74,78,79],"check_complementar":14,"check_dual_domain":14,"check_primal_feas":14,"check_termin":[24,32,45],"checkout":14,"chenei":23,"child":78,"choic":[0,7,9,24,31,55,56,58,77],"chol":78,"chol2":78,"choleski":14,"choos":[5,6,7,9,14,18,22,24,27,36,38,44,48,52,56,58,59,66],"chop":20,"chord":52,"chosen":[7,27,33,56,78],"chri":62,"chronolog":79,"chu":62,"circ":43,"circuit":20,"citat":59,"cite":65,"cl":[5,14],"claim":66,"clamp":45,"clarabel":[7,62,63,67,79],"clash":78,"class":[0,1,2,3,4,5,6,7,9,10,11,12,13,14,17,24,56,59,66,70,73,78,79],"classic":36,"classifi":[8,54,56,73],"classmethod":7,"clear":[14,24],"clearer":[14,79],"click":63,"clip":35,"cliquecut":78,"clock":54,"clone":63,"close":[14,19,24,31,34,37,43,45,59,69,79],"closer":[9,14],"closur":[1,6],"cloud":32,"cm":[24,35],"cmap":35,"co":[18,19],"code":[5,7,8,9,10,11,12,18,20,21,24,28,32,34,37,38,39,40,41,42,43,50,51,56,58,59,62,63,66,69,70,72,73,74,75,77,78,79],"codepath":14,"codespac":63,"coeffici":[18,19,23,52,55,56,58],"col":[6,32,35],"col_sum":75,"collect":[5,6,44],"colloqui":[46,72,74],"colon":[60,61],"color":[19,24,45],"color2":24,"colorbar":24,"column":[2,4,5,9,10,12,15,20,22,31,35,70,75,77],"columnwis":20,"com":[3,14,22,32,63,78],"combin":[4,13,24,66,69,70,73],"combinator":24,"come":[4,63,78,79],"comfort":0,"command":[14,63,70,78],"comment":[14,18,66],"commerci":[66,67,70],"commit":14,"common":[5,14,27,38,40,46,54,66,77,79],"commun":[49,54,62,66,70],"compact":1,"compar":[19,24,32,43,44,57,78],"compat":[7,8,33,69],"compil":[7,8,66,73,78,79],"compilation_tim":7,"complaint":73,"complementar":69,"complet":[14,33,41,52,54,62,77,78,79],"complex":[2,6,11,14,17,18,23,54,60,61,71,75,76,79],"complex2r":8,"compli":66,"complianc":[7,10,12,14,66],"compliant":[7,9,12,51,73],"compon":[5,9,18,38,39,44],"compos":[2,78],"composit":[1,3,4,43,44,46,71,72,76],"compound":[6,73],"comprehens":33,"compress":22,"comput":[3,4,6,7,13,14,18,20,22,23,24,33,43,44,45,54,56,58,66,70,73,74,77,78],"concaten":[2,4,8,9,19,36,69,75,79],"concav":[1,3,4,6,7,13,16,34,44,46,51,54,56,60,61,71,72,74,75],"concave_fractional_fn":[51,74],"concept":59,"conceptu":4,"concis":32,"conclus":71,"concret":[14,79],"concurr":78,"cond":28,"conda":[39,63],"condit":[4,10,12,14,19,27,46,54,57,66,70,71,72,74,78],"condition":33,"condition_numb":74,"conduct":[14,20],"cone":[3,4,5,7,9,10,12,14,33,35,54,67,69,70,77,78,79],"cone2con":[8,9],"cone_constr1":10,"cone_constrk":10,"cone_dim":[7,14,69],"cone_matrix_stuf":14,"conedim":[10,12,14],"conematrixstuf":10,"confer":22,"config":[24,55,56,57,58],"configur":[14,18,66],"conflict":14,"conform":[13,70],"confus":[24,59,75,79],"conic":[5,8,9,10,11,35,67,78,79],"conic_solv":[14,78],"conicsolv":[14,78],"conj":[1,60,61,70,75],"conjug":[2,60,61,70,75],"connect":[17,24,31],"consecut":14,"consensu":54,"consequenti":66,"conserv":75,"consid":[3,4,8,13,14,15,17,18,20,22,24,26,27,30,34,43,44,46,52,57,69,78,79],"consider":[9,14,43,44],"consist":[9,12,13,14,19,21,31,32,62,66,78,79],"conspicu":66,"const":22,"constant":[2,3,4,7,10,11,12,19,20,27,29,30,43,46,52,59,60,61,69,70,71,72,73,74,75,77,78,79],"constitu":9,"constitut":66,"constr":[4,24,28,31,32,70],"constr1":70,"constr2":70,"constr_id":5,"constr_map":[10,12,14],"constrain":[5,6,14,20,22,24,26,31,32,33,49,69,70,78,79],"constraint":[0,1,3,4,6,7,8,9,10,11,12,13,14,15,17,18,20,21,22,24,26,27,28,29,30,32,33,34,35,36,38,40,41,42,43,44,45,46,47,48,49,50,52,54,62,63,69,71,72,74,76,78],"constru":66,"construct":[1,2,4,5,7,8,9,10,14,17,18,20,23,34,35,38,39,46,50,53,56,58,62,70,71,72,73,74,75,77,78,79],"constructor":[1,70,72,79],"consult":[0,7,46,59,69,79],"consum":17,"contact":[8,14],"contain":[4,7,9,11,13,14,18,24,27,45,52,54,66,69,70,73,79],"content":[14,66],"context":[4,6,7,24,46,72],"continu":[14,24,55,63,78,79],"contract":66,"contradict":6,"contrast":21,"contribut":[17,62,63,66],"contributor":[8,14,66],"contributori":66,"control":[5,22,24,54,62,64,66,78],"conveni":[6,69,78],"convent":[14,79],"converg":[25,27,29,34,78],"convers":[52,62,66,74],"convert":[0,8,9,10,11,12,13,14,19,21,29,67,69,79],"convex":[1,3,4,5,6,7,8,9,11,13,14,15,16,18,19,20,21,22,23,24,27,30,31,32,33,34,36,39,44,45,46,48,51,52,54,56,58,60,61,62,64,67,68,69,70,72,73,74,75,76,77,78,79],"convex optim":62,"convolut":2,"convolv":[1,60,61,75,79],"coo_arrai":70,"coordin":[14,32],"copi":[7,10,12,14,20,24,32,36,66],"copt":[70,79],"coptpi":63,"copyright":[10,12,14,66],"corner":24,"correct":[4,9,71],"correctli":[14,59,79],"correspond":[7,9,14,23,24,33,35,37,40,42,43,49,50,55,57,63,69,72,75],"corrupt":[30,35,57],"cosmet":20,"cost":[4,17,24,32,34,37,57,70,78],"could":[3,7,13,17,24,71,73,77,78,79],"count":[24,70],"counterclaim":66,"counterpart":18,"cours":[19,65,79],"cov":33,"covari":[40,41,54],"cover":[14,24,31,68,69,79],"coverag":31,"cp":[1,2,7,11,13,14,15,16,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,62,69,70,71,72,73,74,77,78,79],"cp_pred":45,"cplex":70,"cplex_filenam":78,"cplex_param":78,"cpp":[7,69],"cpu":[22,32],"cpu_count":78,"cpx_param_advind":78,"cpx_param_datacheck":78,"creat":[2,4,5,6,7,8,14,18,24,27,28,29,31,33,34,41,42,52,55,57,63,69,70,71,77,79],"creation":[6,7,78],"criteria":7,"criterion":50,"cross":[24,66],"cryptic":59,"cryptocurr":54,"csc":[1,6],"cuclarabel":[78,79],"cuda":14,"cudss":[78,79],"cummax":1,"cumprod":[1,72,79],"cumsum":[1,60,61,75,79],"cumul":[2,3,4,60,61,72,75],"cuopt":79,"cuopt_":78,"cuopt_log_to_consol":78,"cuopt_method":78,"cuopt_pdlp_solver_mod":78,"cuopt_time_limit":78,"cup":[5,78],"cupi":[14,63],"curiou":8,"current":[3,5,9,13,14,18,24,63,69,77,78,79],"curv":[6,13,20,56,58,77],"curvatur":[1,3,6,52,60,61,75,76,79],"custom":[7,14,67,76],"custom_osqp":78,"customari":66,"cut":78,"cutgennam":78,"cvar":[1,75,79],"cvx":[18,19,20,23,25,26,29,33,34,49,67],"cvx_attr2constr":[8,11],"cvxattr2constr":8,"cvxcore":[14,69,79],"cvxopt":[18,20,25,26,33,34,35,59,67,70,79],"cvxopt_build_glpk":63,"cvxopt_glpk_inc_dir":63,"cvxopt_glpk_lib_dir":63,"cvxpy":[0,1,2,4,5,6,7,8,9,11,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,65,67,69,70,71,72,73,74,75,76,78],"cvxpy_env":63,"cvxpy_pap":59,"cvxpygen":67,"cvxpylay":[45,67,79],"cvxr":67,"cx":[41,60,61,75],"cx_1":[46,72],"cx_t":32,"cyan":19,"cycl":[24,79],"cycle_tol":78,"cylp":63,"cython":14,"d":[2,9,10,12,14,19,20,23,24,25,31,34,42,43,44,45,46,47,52,56,58,66,72,78],"d_":[5,44],"d_i":[42,44],"d_max":44,"da":43,"dai":69,"daili":69,"dalpha":43,"damag":66,"damp":32,"data":[7,8,9,10,11,14,16,21,25,30,35,36,37,38,39,40,41,42,47,48,49,50,53,54,56,58,62,63,69,70,73,77,78],"datacheck":78,"dataset":[19,37,45,57],"date":[14,25,66],"db":[18,23,43],"dby":18,"dc":43,"dccp":67,"dcost":[22,25,26,32,78],"dcp":[1,3,5,6,7,9,10,11,12,13,15,30,36,46,60,61,70,72,73,74,75,76,77,78],"dcp2cone":[8,11],"dcp_problem":11,"dcperror":[7,46],"ddof":4,"ddot":[60,61,72,75],"de":[9,23],"deal":19,"debug":[14,78],"decai":55,"decid":79,"decim":4,"decis":[14,22,24,31,64,67,78],"declar":[6,36,72],"decomp":78,"decompos":[55,57],"decomposit":[70,78],"decr":[60,61,72,75],"decreas":[1,3,44,46,51,58,61,71,72,74,79],"deem":78,"deep":59,"deepcopi":59,"def":[14,15,17,19,20,21,22,24,27,28,30,31,32,33,36,43,45,55,56,57,77,78],"default":[2,3,4,5,7,13,14,69,70,73,75,77,78],"defend":66,"defin":[2,4,5,8,13,14,17,18,20,22,24,27,28,32,35,37,38,40,41,42,50,52,55,57,66,67,69,70,74,75,78],"definit":[4,5,66,74,75,77,78],"degrad":32,"degre":[18,78],"degress":18,"del_var":[10,12],"dela":[10,12],"delai":[20,23,44],"delb":[10,12],"delc":10,"delgado":34,"deliber":[14,66],"delimit":25,"delp":12,"delq":12,"delt":32,"delta":[7,18,27,32,34,43,44,47,52,73],"dembia":62,"demonstr":[24,31,73],"denomin":[3,4,7,51,74],"denot":[4,14,15,24,27,37,41,44,45,46,48,72,73,74,75],"dens":[44,63,69,78],"densiti":[33,55,58],"depend":[7,14,32,45,60,61,63,69,71,74,75,78],"deprec":75,"depth":[47,62,72,74],"deriv":[6,7,18,23,25,26,29,32,33,34,44,66,73,78,79],"descent":45,"describ":[1,5,6,7,9,14,15,18,24,31,34,43,44,45,59,66,72,73,74,75,78,79],"descript":66,"design":[0,14,18,54,66],"desir":[27,33,59,70,77,78],"despit":79,"destin":[1,2],"det":[4,33,60,61,75],"detach":45,"detail":[3,5,7,8,14,31,59,68,69,70,75,77,78,79],"detect":[24,54,79],"detect_p":31,"determin":[3,8,13,20,24,27,31,34,66,71,72,75,77,78],"devcontain":63,"develop":[62,63,64,68,70,78,79],"deviat":[4,50],"devic":79,"dgp":[1,3,7,11,43,48,50,54,73,76,78,79],"dgp2dcp":8,"dgp_problem":11,"dgperror":7,"diag":[1,6,20,28,49,60,61,70,72,75],"diag_mat":2,"diag_vec":2,"diagon":[2,6,28,33,70],"diags_arrai":25,"diamond":[4,10,12,59,62,64,66],"diamond2016cvxpi":64,"dict":[6,7,8,9,10,11,12,14,20,24,59,69,78],"dictionari":[7,10,12,24,69,78],"did":[25,29,34,78,79],"diff":[1,60,61,75],"diff_po":[1,44,60,61,72],"differ":[2,4,6,8,14,15,18,21,25,34,35,36,37,38,40,46,54,55,60,61,66,67,70,71,73,74,75,77,78,79],"differenti":[7,43,44,45,64,67,73,79],"difficult":19,"digit":14,"digraph":24,"dijkstra":24,"dim":[1,2,7,20,60,61,69,75],"dimac":78,"dimens":[2,4,5,6,7,10,12,27,32,33,34,69,70,71,72,75,77,79],"dimension":[5,10,12,14,34,39,62,70,75,76,77,78,79],"dimitri":22,"dimxdim":20,"dir":[9,14],"direct":[8,14,18,21,24,52,66,78],"directli":[1,2,7,9,10,11,12,27,30,69,70,78,79],"directori":[14,17,63],"disabl":70,"disambigu":3,"discard":[35,50],"disciplin":[6,7,25,43,46,51,53,59,64,76,77,79],"disclaim":[9,10,11,12,66],"discord":[14,62],"discret":[2,4,9,15,18,23,24,32,35],"discrit":31,"discuss":[14,24,59,62,66,69,77,78],"displai":[24,34,35,66,78],"dissip":20,"dist":[35,78],"dist_ratio":74,"distanc":[5,19,24,31,74],"distort":32,"distribut":[3,4,10,12,14,15,18,19,24,33,44,45,66,78,79],"dive":79,"diverg":30,"divers":34,"divexpress":1,"divid":[6,9,20,30,56,58],"divis":[2,58],"dmcp":67,"do":[5,8,9,13,14,18,19,23,24,27,32,34,55,57,58,62,66,70,73,78,79],"doc":78,"docstr":12,"document":[7,8,9,14,63,66,70,78,79],"doe":[4,5,7,9,18,19,23,27,30,35,46,55,63,66,70,71,72,73,74,78],"doesn":[14,71,78,79],"dom":[60,61,75],"domahidi":78,"domain":[1,3,4,5,6,27,44,46,60,61,70,72,74,75,78],"domainmethod":78,"domin":20,"don":[14,35,66,77,78],"done":[7,23,45,73,79],"donoghu":[35,78],"dont_opt_var":13,"dot":[18,19,20,22,23,24,26,29,31,32,33,34,55,57,58,60,61,75],"doteq":14,"dotsort":[1,60,61,75,79],"doubl":[7,14],"doubletensor":45,"down":[19,71,79],"download":63,"downsid":70,"dp":[7,73],"dparam":[10,12],"dpp":[5,6,7,14,43,45,76,77,78,79],"dpperror":[7,78],"dqcp":[6,7,28,51,52,53,76,79],"drag":52,"draw":24,"draw_networkx_edg":24,"draw_networkx_nod":24,"drawn":33,"dre":[22,25,26,32,78],"drift":32,"drive":[32,55,57],"driven":55,"driver":20,"drop":[4,75],"dsl":73,"dt":20,"dtype":6,"dua":[24,32,35,45,78],"dual":[5,7,8,9,13,16,24,35,38,40,42,46,59,63,70,76,78,79],"dual_exp":9,"dual_tol":78,"dual_valu":[5,38,40,42,46,47,62,69],"dual_var":[8,52],"dualiti":[9,13,24],"dualiz":[8,14,78,79],"dualsimplex":78,"due":[15,22,31,43,70,73,77,79],"dummi":24,"dummynod":24,"durat":19,"dure":[14,78,79],"dw_ratio":47,"dx":[7,25,73],"dynam":32,"dz":7,"e":[2,3,4,5,6,7,8,9,11,13,14,15,17,18,19,20,22,24,25,27,30,33,35,45,46,59,60,61,63,69,70,71,72,73,75,77,78,79],"e2":24,"e_1":74,"e_2":74,"e_i":74,"e_n":74,"each":[1,2,3,5,6,7,8,9,13,14,16,17,18,20,21,22,24,27,30,31,33,34,35,36,37,38,40,42,44,46,49,56,58,59,66,69,70,71,72,73,74,75,77,78],"earlier":[14,18,79],"eas":20,"easi":[14,24,79],"easier":[9,66,79],"easili":[7,14,15,17,19,35,69,70,77],"ecc":22,"eco":[7,14,22,25,32,34,35,67],"ecos_bb":79,"ecosystem":67,"edg":[17,24,31,79],"edge2ind":24,"edge_cmap":24,"edge_color":24,"edge_flow":17,"edge_vmax":24,"edge_vmin":24,"edgecent":24,"edgecolor":[18,24],"edgelist":24,"edgeprob":24,"edgeprobd":24,"edgev":24,"edit":[14,63,70],"editori":66,"edu":[4,24,25,28,46,59,71],"ee364":[18,23],"ee364b":[24,31],"effect":[5,7,9,24,31,43,73,78],"effici":[45,70,73,79],"effort":[8,14,54,79],"eg":29,"eig":20,"eigenvalu":[4,28,48,50,60,61,70,74,75,78],"einsum":14,"either":[4,7,8,10,11,12,13,14,18,24,31,63,66,71,73,74,77,78,79],"el":20,"elabor":66,"electr":17,"electron":66,"element":[2,4,5,15,18,20,31,33,34,72,74,75],"elementari":[9,14],"elementwis":[1,2,4,5,13,30,34,38,40,44,45,46,48,50,76,77,79],"elif":18,"elimin":78,"ell":[22,44,56],"ell_1":[24,55],"ell_2":[35,37,42,57],"ell_i":44,"elmor":20,"els":[15,18,20,24,27,28,29,36,44,78],"elsewher":[52,73],"embed":[17,59,62,64,67,77],"embotech":[22,32],"emit":8,"emphas":[45,73],"emploi":3,"empti":[4,33,35],"enabl":[6,8,17,69,70,78,79],"encapsul":7,"enclos":[7,66],"encod":[2,6,7,8,11,22,24],"encount":[7,14,59,69,78,79],"encourag":[14,55,57,58,59,64,79],"end":[3,4,8,13,16,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,60,61,66,72,73,74,75,78],"endpoint":32,"energi":17,"enforc":[4,6,7,14,19,21,24,33,45,74],"enforce_dpp":[7,78],"engin":62,"enhanc":[3,14],"enough":[0,7,14,69],"ensur":[2,24,29,45,70,71],"enter":[17,24,43,73],"entir":[6,17,70,73,77],"entireti":19,"entiti":66,"entr":[1,15,26,60,61,72,75],"entri":[2,3,4,5,6,7,14,22,24,29,37,38,40,41,45,48,50,55,64,70,71,72,75,77,79],"entrop":54,"entropi":[4,5,15,54],"entrywis":13,"enum":9,"enumer":[22,24,31,32],"env":[15,24,27,30,36,78],"environ":[63,78,79],"enzo":62,"ep":[7,10,24,28,35,44,69,78],"epigraph":4,"epoch":45,"eprint":64,"eps_ab":[24,32,45,78],"eps_dual_inf":[24,32,45],"eps_prim_inf":[24,32,45],"eps_prox":78,"eps_rel":[24,32,45,78],"epsilon":[19,27,53],"epsilondash":78,"epsilonstar":78,"eq":14,"eq_dim":10,"equal":[4,5,6,7,9,12,14,20,24,31,38,40,42,50,52,59,69,70,74,77,78],"equality_constr1":12,"equality_constrk":12,"equat":[14,22,30,32,43,45,46,48,50,52,78],"equival":[0,2,3,4,5,7,8,9,11,50,69,70,72,73,75,77,79],"equivel":23,"eric":62,"err_tol":13,"error":[4,6,7,14,18,19,20,21,22,23,25,27,32,33,34,35,45,46,53,55,56,57,58,73,74,77,78,79],"especi":44,"essenti":14,"estim":[19,22,24,25,32,40,45,54,55,57],"eta":[24,43],"eta_prox":78,"etc":[4,13,24,77,78],"eth":78,"euclidean":[19,70,75],"european":22,"evade_func":31,"evadeprob":24,"eval_param":[8,11],"evalcond":28,"evalparam":8,"evalu":[3,6,7,11,13,45,72,73,74],"evalut":78,"evas":24,"even":[3,7,8,9,12,14,19,20,24,29,66,71,72,73,74,77,78],"evenli":24,"event":[24,66,78],"everi":[1,7,8,10,11,14,24,31,46,59,69,72,74,75,77],"everyon":62,"everyth":79,"exact":[3,4,7,14,33,79],"exactli":[2,4,5,6,7,24,55,70,71,72,75],"exampl":[1,2,3,4,5,6,7,11,13,14,17,18,19,21,23,25,26,29,33,34,43,44,45,47,49,52,55,56,57,62,66,69,70,72,73,74,75,76,77,78,79],"exce":[70,78],"exceed":38,"excel":69,"except":[2,4,6,7,10,12,13,14,18,20,23,25,29,32,33,34,46,66,70,71,72,74,77,78,79],"exchang":[8,78],"exclud":66,"exclus":[12,66],"execut":[7,9,29,66],"exercis":[15,24,27,30,66],"exert":19,"exhaust":[14,62],"exist":[7,8,14,62,63,74,79],"exit":24,"exp":[0,1,7,9,10,12,13,14,18,23,24,45,46,51,56,60,61,69,72,74,75,78],"exp_cone_ord":14,"exp_dim":10,"expand":[5,11,14],"expcon":[4,9,14],"expect":[14,22,40,57,70,73,79],"experi":[18,33,34],"experienc":79,"experiment":[19,69,79],"expert":[14,54],"explain":[68,71,72,74,77],"explicit":[10,12,14,70,79],"explicitli":[17,66,78,79],"exploit":78,"explor":24,"expm":20,"expon":[3,73],"exponenti":[3,5,9,10,12,14,44,46,67,72,78,79],"export":78,"expos":[6,7,17,73],"expr":[1,2,3,4,5,7,8,9,10,11,13,69,70,71,72,73,75,77,79],"expr1":[69,70,71,72,75],"expr2":[69,70,71,72,75],"expr3":75,"expr_":72,"expr_1":[46,72],"expr_2":[46,72],"expr_i":46,"expr_list":75,"expr_n":[46,72],"expr_sum":75,"express":[0,1,2,3,4,5,7,9,10,11,12,13,14,35,46,52,62,66,72,73,74,75,76,77,78,79],"expri":46,"extend":[4,9,17,32,79],"extend_bound":[8,9],"extens":[59,63,67,78],"extern":[7,69],"extra":[7,14,59,63,78],"extra_stat":[7,78],"extract":[2,14,79],"extractor":[10,12],"extrem":13,"ey":[20,28,33,45,48,50],"eye_minus_inv":[1,60,61,72],"f":[2,3,4,7,9,10,11,13,14,16,17,20,21,26,42,43,46,55,57,58,60,61,69,71,72,73,74,75,78,79],"f_0":46,"f_i":[21,46],"f_list":21,"f_recess":4,"face":24,"facecolor":18,"facil":17,"fact":[4,7,55,58,69,71],"factor":[35,54,78],"factori":4,"faculti":70,"fail":[7,14,15,18,20,25,30,59,74,77,78],"failur":66,"fairli":43,"fall":79,"fals":[2,4,5,6,7,8,9,10,11,12,22,24,31,55,58,59,60,61,70,71,73,75,78],"false_neg":22,"false_po":22,"famili":[18,20,23,25,29,33,34,67,73,77],"far":[14,78],"fast":69,"fast1":78,"faster":[7,73,77],"fastest":20,"fault":54,"favor":79,"fazel":34,"fc":[24,31],"feasibl":[9,14,18,27,34,42,52,78],"feastol":[22,32,78],"feastol_inacc":78,"featur":[14,18,37,56,57,58,59,62,64,73,76],"fee":66,"feedback":[14,72,74],"fenchel":13,"fetch":14,"few":[4,14,24,29,56,78],"fewer":3,"fico":[63,78,79],"field":[35,66,69,70,77,78,79],"fifti":66,"fig":[22,24,31,32,35,45],"figsiz":[18,19,20,22,23,24,25,31,32,33,34,35,73,77],"figur":[18,19,20,23,24,25,31,33,34,45,71,73,77],"figure_format":[24,55,56,57,58],"file":[0,10,12,14,66,72,74,78,79],"filenam":[22,32,78],"fill":[9,12,54],"fill_valu":9,"filter":[14,54],"final":[3,14,18,22,23,24,27,31,45,52,70,72,73,78,79],"financ":[40,62],"find":[5,7,8,9,14,15,19,24,27,34,37,40,45,52,53,55,57,58,69,74,75,77],"fine":70,"finish":27,"finit":[1,4,5,6],"finite_set":5,"finiteset":79,"first":[2,5,7,8,9,14,16,18,20,24,27,29,31,44,45,58,62,69,70,73,78,79],"firstli":24,"fit":[21,37,54,56,58,66],"fit_cvx":19,"fit_label":19,"fit_ol":19,"fit_ols_uncensor":19,"five":0,"fix":[13,14,19,24,29,33,34,45,70,78],"flag":[14,71,72,74],"flat":36,"flatnonzero":24,"flatten":[2,4,5,14,18,19,20,22,24,31,60,61,75,79],"flexibl":[8,9,17],"flip":[11,13],"flip_object":[8,11],"flipobject":8,"float":[2,3,4,5,6,7,8,9,13,24,27,43,56,71,78,79],"floor":[36,47,74],"flow":[17,52],"flowcovercut":78,"flr":47,"flr_area":47,"fn":74,"focu":14,"folder":14,"follow":[5,7,8,13,14,16,18,21,28,32,34,37,38,39,40,41,42,43,44,46,56,58,59,62,63,64,66,69,70,71,72,73,74,75,77,78,79],"font":[18,20,22,23,24,25,29,32,33,34,36,73,77],"fontsiz":[18,20,33,34,55,56,57,58,73,77],"foo":24,"foral":[18,31,71,72],"forbid":73,"forc":[24,32,33,34],"forg":[39,63],"forget":46,"fork":[14,63],"form":[0,3,4,5,8,9,10,11,12,13,15,16,18,21,23,24,25,27,30,31,33,34,36,38,39,40,41,42,45,46,58,62,66,71,72,73,74,75,76,77,78,79],"form_grid":31,"form_path":31,"formal":[13,75,79],"format":[8,10,12,14,15,16,18,19,20,22,23,25,27,29,30,31,32,33,34,35,36,43,44,45,66,70,73,78,79],"format_constraint":[9,14],"former":[5,55],"formgraph":24,"formul":[5,14,15,18,23,28,30,44,45,46,48,49,56,58,72,79],"forth":[9,14],"forthcom":14,"fortran":[2,20,78,79],"forward":[8,32,73,79],"found":[4,5,14,18,25,26,31,34,35,52,53,59,77,78,79],"fourth":69,"fr":9,"frac":[4,5,18,22,27,32,43,44,45,49,50,51,52,53,56,60,61,72,75],"fraction":[3,4,23,24,27,30,31,45,54,75,78],"frame":17,"framework":[14,65,79],"free":[9,35,52,59,66,70,73,78],"freq":23,"frequenc":23,"fresh":63,"friend":62,"friendli":67,"fro":[4,29,60,61,72,75],"frobeniu":[4,50,54,75],"from":[0,1,2,3,4,6,7,8,9,10,12,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,36,37,43,44,45,47,49,50,55,58,59,62,63,66,67,69,71,72,73,74,75,77,78,79],"from_dict":7,"frontier":59,"frvmethod":78,"fuel":54,"full":[3,46,69,70,78,79],"fulli":[19,59],"func":[7,75],"function":[0,1,2,3,4,5,6,7,9,13,14,15,16,18,19,21,22,23,27,28,30,31,33,34,36,41,43,44,45,48,50,51,52,54,56,58,60,69,70,71,73,74,76,77,78,79],"fundament":[13,54,59],"further":[7,68,69,78,79],"futur":[8,18,79],"fval_bound":78,"fx":[4,26,42],"g":[3,4,6,9,13,14,18,20,24,26,27,31,40,42,49,59,69,70,72,73,77,78,79],"g0":20,"g_":[16,27,49],"g_i":[40,46],"gain":[18,27,49,79],"gamal":20,"game":54,"gamma":[3,13,27,28,32,44,47,60,61,73,75,77,79],"gamma_i":27,"gamma_v":[73,77],"gamma_valu":77,"gammastar":78,"gap":[22,25,26,32,35,78],"gather":[20,21],"gaussian":[22,23,32,54,57,79],"gave":79,"ge":28,"gen_lambda_max":[28,74],"gener":[4,5,6,7,8,9,10,11,17,22,24,28,31,32,37,38,39,40,41,42,44,46,50,56,58,59,62,66,67,69,71,72,73,74,75,78],"generalis":27,"generaliz":55,"generate_data":[45,55,57],"geo_mean":[1,60,61,72,75],"geometr":[4,7,11,43,47,49,50,52,62,64,67,76,79],"geq":[3,4,5,14,15,19,27,40,43,44,49,58,60,61,70,71,72,74,75,78],"get":[3,6,7,14,22,24,32,62,63,71,76,77,78,79],"get_a":24,"get_guard_effect":31,"get_problem_data":[7,69],"get_x":77,"getguardeffect":24,"gevp":28,"gg":20,"ggp":72,"gid":24,"gini":54,"ginvc":20,"git":[14,63],"github":[3,14,59,62,63,69,70,72,74,75,79],"give":[1,3,4,6,9,13,19,22,24,30,32,36,49,66,70,75,77,78,79],"given":[2,3,4,5,7,8,9,11,13,14,15,18,21,22,24,27,29,30,31,32,35,36,37,43,44,45,46,48,52,56,58,60,61,69,70,71,72,73,74,75,78,79],"glare":19,"global":21,"glop":79,"glopparamet":78,"glpk":[14,67,78],"glpk_mi":[70,78],"gmatmul":[1,45,60,61,72,79],"gmbh":[22,32],"gnode":24,"go":[7,14,24,31],"goal":[14,24,31,32,38,44,46,48,49,51,56,57,58,69],"goe":[3,13,14],"gomorycut":78,"good":[14,19,22,33,56,58,78],"goodwil":66,"goran":[24,32,45],"gorinevski":[22,25],"govern":[10,12,14,66],"gower":[15,27,30,36],"gp":[7,27,43,44,45,46,47,48,49,50,67,72,78],"gp2dcp":11,"gpkit":67,"gpu":[62,78],"grad":[1,6,13],"gradient":[1,4,6,7,16,35,44,45,54,76,78],"grai":[35,45],"grain":70,"grant":[20,66],"graph":[13,17,24,51,67],"grate":14,"great":70,"greater":[15,44,63,70,73,74,79],"green":[24,31,35],"grid":[17,18,19,20,24,31],"grossli":66,"group":[0,8,27],"group_max":27,"group_norm":27,"gsoc":79,"gt":4,"guarante":[4,13,24,71,72,74,79],"guard":31,"guard_effect":31,"guard_set":31,"guardidx":24,"guess":[22,29,35,78],"guid":[14,62,79],"guidanc":14,"gurobi":[14,67,70,79],"gurobipi":63,"gx":40,"h":[5,9,13,14,18,24,31,40,45,47,70],"h_":23,"h_i":40,"ha":[1,3,4,5,9,10,11,13,14,15,17,18,19,22,24,27,30,31,32,34,35,36,39,44,46,48,50,52,54,63,66,70,71,72,73,74,75,78,79],"had":[7,24,58,79],"half":18,"halfbeam":18,"halfbeam_bot":18,"halfbeam_cur":18,"halfbeam_top":18,"hand":[2,7,9,14,18,24,69,73],"handl":[3,4,9,13,14,32,59,78,79],"happen":[1,9,59,74,77],"happi":14,"hard":[13,22,24,31],"harder":24,"harmless":66,"harmon":4,"harmonic_mean":[1,60,61,72,75],"harshli":32,"hassibi":[47,49],"hat":[45,52,56,58],"have":[2,4,5,6,7,8,10,11,13,14,16,17,19,20,21,22,24,30,31,32,37,38,40,44,46,49,52,59,62,66,68,69,70,71,72,73,74,75,77,78,79],"hd":47,"hde":23,"hdes_i":23,"hdes_r":23,"he":24,"heidelberg":64,"height":[47,52],"held":78,"help":[3,8,14,63,74,78,79],"helper":[14,28],"henc":[51,74],"hens":18,"here":[0,2,3,4,7,8,9,11,13,14,19,24,27,31,32,33,38,40,41,43,44,45,52,67,71,72,74,77,78,79],"herebi":66,"herein":66,"hermitian":[6,70],"heurist":[13,24,33,73],"hi":[24,31],"hidden":24,"hide":[7,78],"high":[32,70,74,79],"higher":[57,63,78],"highest":75,"highli":44,"highlight":24,"highs_opt":78,"hill":[15,27,30,36],"him":24,"hing":58,"histor":75,"hold":[9,13,34,38,40,42,46,66,69,71,72,79],"home":68,"homebrew":63,"homework":19,"hope":57,"hopefulli":24,"horizont":[2,20,75],"hour":69,"how":[5,7,9,14,19,28,31,33,38,43,51,53,54,55,57,66,68,69,70,71,72,73,74,77,78,79],"howev":[7,14,17,19,22,24,27,32,34,46,63,66,70,75,78,79],"hstack":[1,17,18,31,45,49,60,61,71,72,75,79],"html":[7,25,46,78],"http":[3,4,5,7,10,12,14,24,25,28,46,59,63,66,78],"huber":[1,32,54,60,61,75],"huge":14,"hw":47,"hw_ratio":47,"hwd":47,"hyper":[6,57],"hyperparamet":[55,57],"hyperson":[52,54],"hypotenus":52,"i":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,66,67,68,69,70,71,72,74,75,76,78,79],"i1":45,"i2":45,"i_i":27,"id":[5,6,8,10,12,59],"id_to_param_valu":[10,12],"idea":[14,24,45],"ident":[14,24,27,35,69],"identif":66,"identifi":[14,22,66],"idiom":[6,7,70],"idx":[1,55,56,58],"ie":[18,46],"ieee":22,"ignor":[4,19,24],"ignore_dpp":[7,78],"ii":[27,49,66,78],"iii":[27,66],"iinfitem":78,"iiss":78,"ij":[4,15,24,27,33,35,38,41,48,49,50,60,61,72,75],"ik":[27,49],"ill":[57,74,78],"illustr":[36,57,73],"imag":[1,6,18,23,60,61,70,75],"imaginari":[2,18,23,60,61,70,75],"img_diff":35,"immateri":79,"immedi":[4,14],"immut":[7,77],"implement":[0,1,3,4,5,9,13,14,16,18,32,48,54,63,67,69,78,79],"impli":[9,10,12,14,56,66,69],"implicit":[2,3,4,13,70],"implicitli":[6,24,74],"import":[0,1,2,3,4,7,11,13,14,15,16,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,62,63,66,69,71,72,73,74,77,78,79],"import_solv":[14,78],"impos":[0,5,7,9,24,55],"imposs":73,"improv":[7,8,14,19,32,33,55,57,62,66,70,78],"impuls":23,"imread":35,"imshow":35,"in_nod":17,"inabl":66,"inaccur":[7,14,78],"incentiv":31,"incid":17,"incidence_matrix":24,"incident":66,"includ":[0,4,9,10,23,24,36,46,48,50,62,63,66,70,78,79],"inclus":66,"incompat":79,"inconsist":[19,79],"incorpor":[66,70],"incorrect":[5,79],"incorrectli":79,"incr":[60,61,72,75],"increas":[1,3,4,5,29,35,44,46,47,51,55,57,58,61,69,71,72,74,79],"increasingli":31,"increment":79,"incur":66,"ind":[18,20,32],"ind2edg":24,"ind_closest":18,"inde":8,"indemn":66,"indemnifi":66,"independ":[2,22,24,33,59,71],"index":[1,6,7,32,36,46,70,74,79],"indic":[1,2,6,7,13,14,22,24,35,38,40,42,48,57,66,69,70,77,78,79],"indirect":[35,66,78],"indirectli":1,"individu":[10,12,66],"indmax":20,"indmin":20,"induc":31,"ineq":14,"ineq_form":5,"inequ":[4,5,6,7,9,12,14,26,38,40,41,44,45,52,54,74,77,78],"inf":[4,7,20,60,61,69,72,75,77,78],"inf_":4,"inf_x":16,"infeas":[7,9,18,27,28,52,76,78,79],"infeasible_inaccur":77,"infeasible_or_unbound":77,"infin":[3,4,13],"infix":[74,75,76],"influenc":32,"inform":[1,4,7,8,13,14,15,17,19,36,46,57,64,66,69,70,72,75,78,79],"infring":66,"infti":[3,4,13,24,69,79],"inherit":[1,14],"initi":[1,16,27,28,29,31,34,35,45,52,64,77,78],"inlin":[18,19,20,23,25,29,33,34,35,36,45,52,55,56,57,58],"inlinebackend":[24,55,56,57,58],"inner":[2,4,14,75],"inp":45,"inproceed":64,"input":[2,3,5,8,9,10,11,13,14,15,26,27,30,32,44,45,52,70,75,78,79],"input_cp":45,"inputs_np":45,"inrect":31,"inscrib":52,"insid":[24,30,31],"inspect":[5,7,51],"instal":[7,14,39,51,53,59,62,70,78,79],"installed_solv":78,"instanc":[1,6,7,8,12,14,31,71,73,77,78],"instanti":[2,4,7,8,78,79],"instead":[7,9,14,19,20,22,25,27,59,72,78,79],"institut":66,"instruct":63,"insuffici":14,"int":[2,3,4,5,6,7,9,10,12,18,20,22,24,27,55,58,70,79],"int_0":52,"int_idx":9,"intefer":27,"integ":[2,4,5,6,7,9,10,12,14,18,24,54,62,67,74,76,78,79],"integertoler":78,"integr":[7,14,32,52,78,79],"intend":[9,69,73],"intens":35,"intent":63,"intention":66,"inter":18,"interact":[14,54,71,72,74],"interdict":54,"interef":27,"interest":[3,8,14,22,24,29,48,69,70,73,74,79],"interfac":[7,9,62,63,66,67,69,70,78],"interfer":[27,49],"interior":[24,63,78],"intermedi":7,"intern":[2,4,6,17,52,78,79],"interpet":57,"interpol":13,"interpret":[7,9,21,24,36,54,55,77],"intersect":[24,31],"interv":[5,18,24,27,32,45,52],"intpnt_it":78,"introduc":[14,43,46,69,73,74,79],"introduct":[14,71],"introductori":73,"intuit":[0,31],"inv":[20,33],"inv_data":9,"inv_po":[1,52,60,61,75],"inv_prod":[1,60,61,75,79],"invalid":[7,71],"invers":[7,8,11,33,48,50],"inverse_data":[7,8,10,11,12,69],"inverse_sinr":49,"inversedata":[8,10,11],"invert":[2,8,9,10,11,12,14,78],"invoc":[7,8,11],"invok":[7,8,14,69,78],"involv":[6,7,13,14,24,62,70,73,74,77,78],"ipm":78,"ipopt":14,"ipynb":54,"ipython":[18,19,20,23,25,29,33,34,59],"ir":[22,32,78],"irreduc":78,"irregular":24,"irrevoc":66,"is_affin":[6,74],"is_atom_affin":1,"is_atom_concav":1,"is_atom_convex":1,"is_atom_log_log_affin":1,"is_atom_log_log_concav":1,"is_atom_log_log_convex":1,"is_complex":70,"is_concav":[6,74],"is_const":[6,74],"is_convex":[6,46,74],"is_dcp":[5,6,7,45,47,59,71,73],"is_decr":1,"is_dgp":[6,7,43,45,46,47,49,72,73],"is_dpp":[6,7],"is_dqcp":[6,7,28,51,53,74],"is_imag":70,"is_incr":1,"is_log_log_affin":[6,46,72],"is_log_log_concav":[6,46,72],"is_log_log_const":72,"is_log_log_convex":[6,72],"is_mixed_integ":[10,12],"is_nonneg":6,"is_nonpo":6,"is_numlik":24,"is_qp":7,"is_quasiconcav":74,"is_quasiconvex":74,"is_quasilinear":74,"is_real":70,"is_zero":6,"isdimac":78,"isfinit":20,"isinst":24,"isn":14,"isol":63,"issu":[3,14,19,34,59,62,66,69,70,72,74,75],"issymmetr":78,"item":[44,45],"iter":[2,6,7,13,18,20,21,24,25,29,32,35,45,52,70,78],"iter_limit":78,"iter_num":29,"iteration_limit":78,"ith":36,"its":[1,2,3,4,5,6,7,9,16,31,34,43,46,50,51,52,55,63,66,70,71,72,73,74,78,79],"itself":30,"izzi":[15,27,30,36],"j":[2,4,15,17,20,23,24,25,27,33,34,35,38,41,48,49,50,60,61,64,72,75],"j1":4,"jacobian":[10,12,73],"jaehyun":[12,62],"januari":66,"jax":[63,79],"jcd":64,"jl":[63,67],"jmax":20,"jmin":20,"jmlr":64,"job":[19,24,35,52],"joell":[29,33],"join":[14,62],"journal":[59,64],"jo\u00ebll":26,"judg":[23,32],"judson":[18,20,23,25,26,29,33,34,62],"julia":[63,67],"juliacal":63,"jupyt":54,"just":[7,9,13,24,34,43,46,55,72,73,74,78],"k":[1,2,4,5,9,10,12,14,15,16,18,19,20,21,22,24,25,27,29,30,31,32,34,35,36,49,60,61,72,75,78],"k_":[5,14],"k_1":27,"k_aff":9,"k_dir":9,"k_e":14,"k_i":[14,21],"k_l":27,"k_m":27,"kalman":54,"kap":[35,78],"keep":[14,24,35,59],"keep_zero":[10,12],"keepdim":[1,2,4,75],"kei":[1,2,8,9,14,78],"keith":[15,27,30,36],"kept":14,"keyword":[7,13,14,43,69,72,73,74,78],"kf":32,"kim":[25,47,49],"kind":[10,12,14,66],"kkt":[20,78,79],"kktsolver":[20,59,78],"kl_div":[1,30,60,61,75],"knapsackcut":78,"know":[5,7,8,14,19,24,30,73],"knowledg":[33,69],"known":[2,19,30,34,35,37,42,44,46,48,50,52,70,71,72,74,75,78],"known_valu":48,"known_value_indic":48,"koh":25,"kolter":64,"kreutz":34,"kron":[1,18,23,60,61,75,79],"kroneck":2,"kth":[2,60,61,75],"kullback":30,"kurtosi":54,"kwangmoo":25,"kwarg":[6,7,13,14,78],"l":[4,7,10,14,18,20,27,28,45,52,60,61,69,73,75],"l1":[4,25,34,54,58],"l1_ext_slid":24,"l1_penalti":77,"l1_tf":25,"l1_trend_filt":25,"l2":[4,71],"l_":[4,16],"l_0":27,"l_1":[25,27],"l_n":27,"label":[19,20,23,24,32,34,36,45,49,55,56,57,58,73],"laboratori":78,"lagrang":[62,69],"lagrangian":[14,16],"lam":44,"lam1":45,"lam2":45,"lam_actu":44,"lam_min":44,"lam_pr":44,"lam_valu":44,"lamb0":38,"lambd":[55,56,57,58],"lambd_valu":[55,57],"lambda":[6,24,25,28,38,40,44,45,55,56,57,58,74],"lambda1":52,"lambda2":52,"lambda3":52,"lambda_":[1,4,44,48,60,61,72,74,75],"lambda_i":[4,42,44],"lambda_max":[1,60,61,75],"lambda_min":[1,44,60,61,75],"lambda_sum_largest":[1,60,61,75],"lambda_sum_smallest":[1,60,61,75],"lambda_v":[56,58],"lambda_wl":18,"lambdastar":78,"landpcut":78,"langl":[4,13,52],"languag":[10,12,14,59,62,64,66,67,77],"larg":[14,25,32,35,46,67,70,78],"larger":[4,7,24,35,56,58,67,71,78],"largest":[4,60,61,75],"lasso":[54,77],"last":[1,7,8,9,10,12,14,17,24,27,31,36,74,77],"latenc":44,"latent":45,"later":[14,20,24,33],"latest":[63,78],"latter":55,"law":[10,12,14,52,66],"lawsuit":66,"layer":[45,64,67,73],"lbrace":[22,24,31,32],"ldl":78,"ldl2":78,"ldot":[2,3,4,14,19,22,24,32,35,41,42,44,45,46,49,56,58,60,61,72,74,75],"le":[20,23,28,33],"lead":[9,57],"leaf":[59,70],"learn":[6,62,64],"least":[31,32,39,44,45,54,55,57,62,66,72,73,74,77,78],"leav":[17,70,78],"lebret":18,"lectur":[18,23,24,31],"left":[2,4,16,18,21,24,29,32,34,35,55,56,57,58,60,61,71,72,75,78],"legal":66,"legend":[19,22,23,34,36,45,55,56,57,58,73],"leibler":30,"len":[2,14,20,22,24,30,32,33,52,53,55,57],"length":[2,4,5,6,9,30,52,54,70,74,75,78],"leq":[3,5,14,18,22,24,27,31,32,38,40,42,43,44,45,46,47,49,53,60,61,71,72,74,75,78],"leq_dim":10,"less":[4,5,32,57,63,74,78],"let":[1,2,7,14,18,19,24,27,31,32,37,43,46,48,62,72,73,74,78,79],"letter":64,"level":[2,4,7,8,14,18,27,30,36,49,63,69,70],"leverag":19,"lfloor":75,"lh_exp":[1,2],"lh_expr":2,"li":27,"liabil":66,"liabl":66,"lib":[24,63],"librari":[14,46,48,49,50,62,63,67,71,72,77],"licens":[10,12,65,70,78],"licensor":66,"lieven":20,"lifeblood":14,"lifespan":19,"lift":[9,11,52],"liftprojectcut":78,"light":24,"liinfitem":78,"like":[0,2,5,7,13,14,19,24,46,50,55,59,70,71,73,79],"likelihood":[19,22,56],"likewis":73,"limit":[10,12,13,14,17,18,24,25,31,44,47,66,70,74,78],"lin":[35,78],"lin_op":14,"linalg":[19,20,24,28,31,33,42,73],"line":[14,17,18,22,23,24,31,45,52,63,70,78],"line2d":[22,24,31,45,52],"linear":[2,5,9,10,12,13,14,18,19,20,23,24,25,26,27,31,32,37,42,45,54,56,57,58,67,70,78,79],"linearli":[32,55,56],"linestyl":[34,45],"linewidth":25,"link":[6,54,63,66,78],"linspac":[20,23,24,31,32,51,52],"linux":63,"list":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,21,24,31,33,46,59,61,62,64,66,67,69,70,71,72,74,75,78,79],"litig":66,"live":[14,19],"ll":[14,16,18,19,20,21,22,23,24,25,26,29,31,32,33,34,37,38,39,40,41,42,43,44,46,47,48,49,50,52,53,55,71,79],"llcp":[44,45,46,72],"lll":[16,21,45],"llr":28,"lmibook":28,"load":[25,35,44],"loadtxt":25,"lobe":18,"lobo":34,"loc":[18,19,23,34,36,55,56,57,58],"local":[5,14,17,21,34,52],"locat":[18,24,31,32,52,69],"log":[0,1,4,5,6,7,8,13,15,22,24,25,26,30,31,33,36,44,45,48,54,55,56,57,58,60,61,64,73,75,76,77,79],"log10":[18,23],"log1p":[1,60,61,75],"log_2":[15,30],"log_2p_":15,"log_2y_i":15,"log_c":45,"log_det":[1,33,60,61,75],"log_inputs_np":45,"log_likelihood":56,"log_log_curvatur":[46,72],"log_ndtr":3,"log_normcdf":[1,60,61,75,79],"log_outputs_np":45,"log_sum_exp":[1,13,60,61,75],"logarithm":[5,24,46,72],"logdet":33,"loggamma":[1,60,61,75,79],"logic":[8,14],"logical_and":22,"logical_or":18,"logist":[1,54,60,61,75],"logm":75,"lognorm":45,"logspac":[55,56,57,58,73,77],"loki512":35,"loki512_corrupt":35,"loki512color":35,"long":[0,7,73,79],"longer":[19,56,58,62,79],"longest":7,"look":[14,17,18,19,24,35,71],"loop":[21,27],"lose":38,"loss":[17,21,38,45,55,57,58,66],"loss_fn":[55,57],"lot":[19,24],"low":[2,7,8,14,19,69,74],"lower":[1,6,13,19,20,23,24,27,34,36,52,57,70,74,77,78,79],"lower_bound":[10,12],"lowerbound":78,"lowercas":78,"lowest":7,"lp":[4,24,63,78,79],"lpipm":78,"lq":44,"lr":45,"lstq_problem":45,"lstsq":19,"lstsq_val_pr":45,"lu":78,"lvert":[4,60,61,72,75],"lw":[19,36],"m":[1,2,3,4,5,14,15,16,18,19,20,22,23,24,26,27,28,29,31,32,34,35,37,38,39,40,41,42,44,45,46,50,55,56,57,58,60,61,62,72,73,75,77,78],"m_1":14,"m_2":14,"m_6":14,"m_i":[14,60,61,72,75],"machin":[6,14,59,62,64],"maco":63,"made":[4,9,14,66,78,79],"mag":18,"magnifi":35,"magnitud":[4,23,43],"mai":[0,3,4,5,6,7,8,10,12,13,14,23,24,27,63,66,69,70,71,72,74,77,78,79],"mail":[59,66],"main":[2,8,14,63,70,78],"maintain":[19,32,59,62,70,79],"major":[2,5,8,14,19,24,73,75,79],"make":[2,5,7,8,9,14,18,19,20,22,24,26,32,38,55,57,59,66,71,72,74,77,78,79],"malfunct":66,"manag":[14,63,66,79],"mani":[6,14,19,35,38,54,55,57,62,64,67,70,73,74,77,78,79],"manipul":[0,13,62,67,69,79],"manual":[70,78,79],"manual_se":45,"map":[1,6,7,8,9,10,11,12,14,45,73,77,79],"mapsto":[1,13,44],"marimo":[14,54],"mark":[46,48,66,71,72,75],"marker":19,"markers":31,"markovian":44,"markowitz":54,"master":[14,21],"match":[2,5,14,20,27,35,69,79],"math":[3,15,18,23,24,52,62,64],"mathbb":[4,5,14,15,27,56,78],"mathbf":[4,16,19,20,22,24,26,29,31,32,33,39,40,41,43,44,45,46,50,53,60,61,72,74,75],"mathbin":4,"mathcal":[14,24,28,35,37,38,39,40,41,42,43,45,70,78],"mathemat":[0,1,4,5,6,71],"mathop":[16,21,35,60,61,75],"mathrm":[4,14,24,35,44,52,53,56,58,60,61,72,75],"mathsf":43,"matlab":[20,67],"matmul":[1,14,60,61,72],"matplotlib":[18,19,20,22,23,24,25,29,31,32,33,34,35,36,45,51,52,55,56,57,58,73,77],"matplotlibdeprecationwarn":24,"matric":[4,7,9,10,12,13,14,17,18,20,32,39,41,48,50,63,71,72,75,76,78,79],"matrix":[1,2,4,5,6,9,14,15,17,18,22,23,24,25,26,27,28,31,32,33,35,41,49,54,55,57,60,61,70,71,73,76,77,78,79],"matrix_frac":[1,60,61,70,75],"matrixstuf":[10,12],"max":[1,9,11,13,17,18,20,23,27,29,44,45,49,50,59,60,61,72,74,75,79],"max_":[4,27,60,61,72,75],"max_big_small_squar":7,"max_data_dimens":7,"max_denom":[1,3,4],"max_elemwis":79,"max_entri":79,"max_half_beam":18,"max_int":78,"max_it":[7,16,21,24,29,32,35,44,45,78],"maxim":[4,9,11,13,15,16,17,24,31,33,36,46,51,52,54,56,69,71,72,74,77,79],"maximis":[15,27,30,36],"maximum":[1,4,7,13,15,18,19,22,23,24,27,36,38,44,47,49,50,60,61,71,72,74,75,78,79],"maximumnod":78,"maximumsecond":78,"maximumsolut":78,"maxiter":78,"maxloop":27,"maxmin_sinr":27,"maxtim":78,"mbox":[16,18,19,20,21,22,23,25,26,29,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53],"mean":[0,1,3,4,7,8,13,14,15,22,24,30,33,45,53,54,55,57,59,60,61,66,70,71,72,74,75,77,78,79],"meaning":73,"meant":[44,45,46,72],"measur":[19,22,32,37,45],"mechan":[1,66,79],"media":66,"medium":[14,66],"meet":66,"member":14,"memori":70,"memoryless":15,"mention":[14,79],"merchant":66,"mere":66,"merg":14,"mesh":54,"mess":24,"messag":[14,30,78,79],"metadata":69,"method":[3,5,6,7,8,9,13,14,17,21,25,27,34,43,45,46,54,55,57,59,69,70,72,73,74,76,77,79],"methodical1":78,"methodologi":[5,34],"metric":[7,35,78],"mi_socp_1":14,"mi_supported_constraint":78,"mice":19,"michael":20,"mid":[5,44,56,78],"middl":[8,20],"midpoint":27,"might":[1,6,7,14,19,21,37,38,44,57,73,74,78,79],"migrat":79,"mild":[7,73],"mimic":59,"min":[1,9,11,14,44,49,59,60,61,72,74,75,79],"min_":[60,61,72,75],"min_elemwis":79,"min_sidelob":18,"minim":[9,10,11,12,13,16,19,20,21,22,23,24,25,27,30,32,34,35,37,38,39,40,41,42,43,44,45,46,48,49,50,52,53,54,55,56,57,58,62,69,70,71,72,73,74,77,78],"minimis":[15,27,30,36],"minimum":[1,4,18,24,27,31,49,54,60,61,71,72,74,75,77,78,79],"minor":79,"mint":63,"minu":[48,50],"minval":31,"mio":78,"mio_intpnt_it":78,"mio_num_relax":78,"mio_simplex_it":78,"mip":[63,78,79],"mip_cap":78,"miqp":39,"mircut":78,"mircuts2":78,"miscellan":7,"miscellen":8,"miss":[6,35,41,48,69],"mistakenli":74,"mix":[4,5,9,10,12,14,54,62,67,76,78,79],"mixed_norm":[1,60,61,75],"mj":[4,60,61,72],"ml":22,"mle":19,"mloss":64,"mn":[50,60,61,72,75],"mnew":28,"mode":[8,44],"model":[6,13,14,17,19,20,21,24,45,54,56,59,62,63,64,65,69,70,77,78,79],"moder":[8,79],"modest":3,"modif":[7,20,34,66],"modifi":[4,6,7,14,20,23,24,66,73,78,79],"modul":[59,69,79],"modular":79,"moment":14,"monolith":79,"monomi":[11,46,72,73],"monoton":[1,3,13,45,58,60,61,70,71,72,75],"monotonicti":46,"more":[4,5,6,7,8,9,10,12,13,14,17,20,22,24,32,35,54,57,62,66,69,70,71,72,73,75,78,79],"moreov":13,"mosek":[7,14,67,70,79],"mosek_conif":78,"mosek_param":[7,78],"most":[1,4,5,7,8,14,52,54,55,56,58,63,67,70,78],"move":[2,24,32,79],"moveaxi":[1,79],"mp":78,"mpax":79,"mse":[53,55,57],"msk_dpar_basis_tol_x":78,"msk_dpar_intpnt_co_tol_near_rel":7,"msk_ipar_intpnt_solve_form":78,"msk_ipar_num_thread":78,"msk_solve_du":78,"mu":[22,24,32,44,78],"mu_":44,"mu_1":14,"mu_2":14,"mu_6":14,"mu_actu":44,"mu_eq":78,"mu_i":[14,44],"mu_in":78,"mu_max":44,"mu_pr":44,"mu_valu":44,"much":[7,9,14,19,20,73,78],"mul_elemwis":79,"mulexpress":1,"multi":[67,69],"multipl":[2,4,5,6,8,14,30,45,54,62,69,71,72,73,75,76,77,78,79],"multipli":[1,4,10,12,21,23,24,30,35,45,49,50,54,56,58,60,61,62,69,72,74,75,79],"multiprecis":78,"multiprocess":[21,77,78],"multithread":79,"multivariate_norm":45,"multivariatenorm":45,"murrai":62,"must":[3,4,5,7,8,9,10,12,13,14,15,18,22,23,24,27,30,43,44,45,46,52,59,62,66,70,72,73,74,75,77,78,79],"mutapc":[18,23,34,49],"mutual":15,"mydict":7,"n":[2,4,5,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,48,49,50,52,53,55,56,57,58,60,61,62,70,72,73,74,75,76,77,78,79],"n_":[4,5,31,40,60,61,72,75],"n_i":[42,60,61,72,75],"n_j":[60,61,72,75],"n_val":45,"nabla":[43,45],"nag":14,"nag_param":78,"naginterfac":63,"naiv":24,"name":[0,3,4,6,7,14,18,19,23,25,26,29,33,34,44,46,47,63,66,78,79],"namespac":[0,79],"nan":[15,27,30,36,78],"nativ":[14,18,33,79],"natur":[3,17,44,62,69,79],"navig":[14,63],"nba":54,"ncvx":67,"nd":79,"ndarrai":[2,5,6,8,9,10,12,14,71,75,77,79],"ndim":[5,6,13,14,71,79],"nearbi":24,"nearest":22,"necessari":[9,14,43,63,78],"necessarili":[8,58,66,70],"need":[5,6,7,8,11,13,14,24,32,36,39,55,57,63,70,73,78,79],"neg":[1,5,6,10,13,22,29,60,61,70,71,75,77,78,79],"neg_a_i":18,"neg_as_i":18,"neg_atar_i":18,"negat":[1,2],"negexpress":1,"neglig":66,"neither":[4,13,72],"neq":[3,4,27,49,60,61,72,75],"nest":[2,78],"network":[24,44],"networkx":24,"neumann":4,"neural":64,"never":[14,74,78],"new":[2,6,7,8,9,11,14,18,19,24,27,29,34,62,63,69,73,74,75,77],"new_constraint":7,"new_problem":73,"new_problem_tim":73,"newaxi":2,"newcommand":45,"newli":63,"newtonian":52,"next":[14,24,29,31,43,44,45,53,56,58,73,79],"nn":[60,61,72,75],"nnz":[24,32,34,35,45,78],"nnz_l1":34,"nnzs_log":34,"no_grad":45,"nobel":62,"node":[4,5,6,9,10,17,20,24,30,59,78],"node1":17,"node2":17,"node_color":24,"node_s":24,"nodelist":24,"nois":[18,22,27,30,31,32,45,49,57],"noisi":[32,78],"non":[1,5,7,8,10,12,13,14,20,24,32,34,38,40,42,56,58,59,62,63,66,69,70,71,72,73,74,78,79],"nonconvex":[22,31,67],"none":[1,2,3,4,5,6,7,8,9,10,11,12,13,18,19,22,24,32,46,60,61,70,71,72,78],"nonetheless":[0,5],"nonlinear":[14,39,70],"nonneg":[4,5,6,7,9,10,12,13,14,34,36,51,54,55,56,57,58,70,71,73,74,77,79],"nonoverlap":27,"nonpo":[6,12,69,70,71,77],"nonposit":[5,6,70,71,74],"nontrivi":14,"nonzero":[4,18,20,33,34,70,74],"nor":[4,13,72],"norm":[1,16,18,19,23,24,25,29,31,32,35,37,42,56,58,60,61,70,71,72,73,75,77,78],"norm1":[1,55],"norm2":[1,55],"norm_inf":1,"norm_nuc":[1,4],"normal":[3,4,14,19,20,23,25,29,33,35,45,50,52,55,56,57,58,60,61,66,70,75,78],"normalis":27,"normnuc":1,"notat":19,"note":[2,5,7,8,13,15,17,18,23,24,28,31,32,33,35,59,64,69,71,72,73,74],"notebook":[24,28,31,43,46,48,50,51,53,54,55,57,59,72,73,74],"noth":[14,66],"notic":[8,14,43,46,56,57,58,66,73,77,78],"notin":[18,41],"notwithstand":66,"now":[14,18,19,24,27,30,52,69,73,75,78,79],"np":[2,4,5,7,13,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,49,51,52,53,55,56,57,58,62,70,73,77],"npt":20,"nsd":[6,70],"nthe":[26,37,38,40],"nu":24,"nuc":[4,60,61,75],"nuclear":75,"null":78,"num":[31,52],"num_coeff":[55,57],"num_group":27,"num_guard":31,"num_it":[7,52,78],"num_point":45,"num_run":34,"num_scalar_data":7,"num_scalar_eq_constr":7,"num_scalar_leq_constr":7,"num_scalar_vari":7,"num_var":9,"number":[2,4,5,6,7,10,11,12,13,14,15,18,19,20,21,22,23,24,27,29,30,31,32,33,34,36,45,46,49,50,54,60,61,64,69,71,72,74,75,78,79],"number_of_edg":24,"number_of_nod":24,"numberthread":78,"numer":[2,3,4,5,6,9,12,13,14,19,32,34,51,59,70,71,72,73,77,79],"numguard":24,"numpi":[2,4,5,6,7,8,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,49,51,52,53,55,56,57,58,60,61,62,63,69,71,73,75,77,78],"numthread":78,"nx":24,"nx_pylab":24,"o":[19,24,31,35,60,61,63,70,75,78],"obei":18,"obj":[4,15,17,18,20,22,23,25,26,27,29,32,33,34,35,36,52,69,70,71,73,77,78],"object":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,18,19,20,21,22,23,25,27,28,30,31,32,33,34,35,36,38,39,40,43,44,45,46,49,50,51,52,54,62,66,67,69,70,71,72,73,74,77,78,79],"objective_fn":[43,44,45,46,48,55,57,72,74],"objfun":28,"oblig":66,"observ":[19,32,55,57,78],"obstruct":31,"obtain":[7,10,12,14,24,29,32,38,40,42,52,55,57,66,69,72,73,74,75],"obviou":3,"oc":64,"occup":44,"occupi":[18,24,59],"occur":[4,14,22,30],"occurr":22,"odd":29,"oddholecut":78,"off":[6,18,20,24,32,35,45,56,57,58,77,78,79],"off_target":13,"offer":[4,8,32,66],"offici":[14,63,78,79],"official_mast":14,"offset":[10,12,25,45,58],"often":[4,14,19,55,78],"okai":8,"old":78,"oldest":79,"oler":78,"omega":[48,50],"omegastar":78,"onc":[14,18,52,73],"one":[2,4,5,6,7,8,9,13,14,19,22,23,24,27,29,30,35,38,42,46,54,59,63,66,69,70,71,72,73,74,75,78,79],"one_minus_po":[1,44,60,61,72],"ones":[4,7,19,20,24,25,34,45,49,55,71,77],"onli":[3,4,5,6,7,9,13,14,18,19,20,23,24,27,31,32,46,59,63,66,70,71,72,73,74,78,79],"onlin":[43,59,70],"onto":[5,6,70],"op":5,"open":[5,14,25,39,59,62,63,67,70,78],"open sourc":62,"openmp":79,"oper":[0,1,2,3,5,6,8,13,14,18,21,24,32,33,41,43,44,45,46,69,70,74,76,78,79],"operand":79,"operatornam":[3,4,60,61,75],"opportun":14,"oppos":78,"opposit":[71,77,79],"oprelentrconequad":79,"opt":[3,9,24,45],"opt_val":[8,52],"opt_var":13,"optim":[5,6,7,8,9,13,14,15,16,18,19,20,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,54,56,58,62,64,67,68,69,70,71,72,73,74,77,78,79],"optimal_inaccur":[20,29,77],"optimal_pow":30,"optimis":[27,30,36],"optimum":[18,24],"option":[2,4,6,7,8,10,12,13,14,24,32,46,59,63,72,74,76,77,79],"optpath":24,"orang":[19,45],"order":[1,2,5,7,8,9,10,11,12,14,19,20,27,30,36,38,44,45,54,60,61,67,73,75,78],"ordered_constraint":10,"org":[4,5,7,10,12,14,46,66],"organ":14,"orient":[14,24,54],"orig":35,"orig_kei":2,"origin":[2,5,7,8,9,10,11,12,13,16,19,20,24,25,29,32,35,43,59,66,69,77],"orthant":9,"ortool":[63,78],"ortran":2,"osmm":67,"osqp":[7,24,32,45,62,63,67],"osqp_qpif":78,"other":[0,1,5,6,7,8,14,24,35,57,62,63,66,70,73,74,76,78,79],"otherwis":[4,5,6,7,8,10,11,12,13,14,17,27,29,30,56,63,66],"otim":2,"our":[0,9,10,11,12,14,19,27,31,32,35,38,44,45,46,50,51,52,56,57,58,62,69,70,72,74,78,79],"out":[2,3,10,12,13,14,17,21,22,24,27,35,38,46,52,55,62,66,70,71,72,74,78,79],"out_nod":17,"outcom":58,"outer":[1,4,50,60,61,75,79],"outer_product":50,"outlier":32,"outlin":14,"output":[2,7,8,9,12,14,15,22,36,44,45,72,73,74,75],"outsid":[1,13,18,24,30,31,32,70,73],"outstand":66,"over":[2,3,5,7,13,14,20,24,29,31,45,52,56,58,62,70,74,75,77,78,79],"overal":14,"overcom":19,"overestim":19,"overlin":21,"overload":[2,5,6,69],"overrid":[7,14,78],"overview":[68,74],"overwhelm":14,"own":[8,66,74,79],"owner":66,"ownership":66,"oxford":[24,32,45],"oxfordcontrol":63,"p":[1,3,4,6,7,9,10,12,14,15,17,21,22,24,25,26,27,28,30,31,32,35,36,37,40,41,42,45,46,49,57,59,60,61,64,70,72,73,75,79],"p1":[24,31,60,61,75],"p2":[24,31],"p3":10,"p3d":14,"p3d_dim":10,"p_":[15,30,49],"p_1":[4,49,60,61,72,75],"p_2":49,"p_evad":31,"p_i":[4,27,30,49],"p_j":[24,27],"p_k":[27,49],"p_l":27,"p_max":[27,49],"p_min":49,"p_n":[4,49,60,61,72,75],"p_receiv":27,"p_sqrt":73,"p_tild":73,"p_tot":30,"pack":79,"packag":[0,14,19,24,28,37,38,40,41,42,63,67,70,73,78],"packagespec":63,"packet":44,"pad":4,"page":[1,5,13,14,15,27,30,36,63,64,66,68,72,78,79],"pai":78,"paint":54,"pair":[24,45,49,78],"paper":[4,25,34,44,45,46,59,64,72,74,79],"parad":54,"parallel":[21,52,55,77],"param":[5,10,12,44],"param2":46,"param3":46,"param30811":52,"param_id_to_col":[10,12],"paramconeprog":[9,10],"paramet":[0,1,2,3,4,5,7,8,9,10,11,12,13,14,16,20,21,25,26,27,30,32,33,34,36,43,44,45,46,55,56,57,58,59,69,70,71,72,73,76,78,79],"parameter":[6,10,12,14,33,79],"parametererror":11,"parameters_pb2":78,"parameters_proto":78,"parametr":[6,7,14,19,76,77,79],"paramprob":[10,12],"paramquadprog":12,"parent":[4,70],"pareto":[13,59],"park":[12,62],"pars":[7,70,78],"part":[2,4,5,8,14,18,23,60,61,66,67,70,75,78,79],"parth":62,"parti":[14,66],"partial":[2,13,19,43,50,60,61,75,79],"partial_optim":13,"partial_trac":[1,60,61,75],"partial_transpos":[1,60,61,75],"partialproblem":13,"particular":[0,8,11,14,19,20,21,45,46,53,66,73,79],"particularli":[14,70],"partit":[27,43],"partli":14,"pass":[7,9,14,20,69,70,72,74,78,79],"passag":78,"past":79,"patent":66,"path":[9,10,14,27,31,49,56,58,63],"path_color":24,"path_ind":24,"path_pair":24,"pattern":[9,18,33,70],"payload":52,"pcost":[22,25,26,32,78],"pdf":[4,22,24,32,59],"pdlp":79,"peak":4,"penal":[32,57],"penalti":[13,32,55,57],"peopl":62,"per":20,"percent":[44,55,66],"percentag":78,"perfect":[3,7,22,37],"perform":[2,5,14,18,22,31,32,43,59,63,66,70,78,79],"permiss":[6,10,12,14,66,70],"permit":[2,74],"permut":[2,14],"permute_dim":[1,79],"perpect":4,"perpendicular":52,"perpetu":66,"perron":[4,50,54],"personnel":24,"perspect":[1,9,24,60,61,75,79],"pert":31,"pertain":66,"perterb":24,"perturb":[7,24,43,73,78],"pf":[48,60,61,72],"pf_eigenvalu":[1,48,60,61,72],"phase":[23,78],"phi":45,"phi_":[4,32],"philipp":62,"pi":[5,18,20,23],"pick":[24,31],"pico":67,"piec":79,"piecewis":[9,12,25],"pinpoint":32,"pip":[14,39,51,53,63,70],"pipe":21,"piqp":79,"pivot":78,"pivot_tol":78,"pixel":35,"pj":4,"pkg":63,"place":[4,14,24,31,66,69,73],"placement":31,"plan":79,"platform":[14,63],"pleas":[3,8,9,10,11,12,14,59,63,64,69,70,72,74,78,79],"plot":[19,20,22,24,29,31,32,36,45,51,52,55,56,57,58,73,77],"plot_fit":19,"plot_posit":32,"plot_regularization_path":[55,57],"plot_stat":32,"plot_train_test_error":[55,57],"plotx":22,"plsh":[32,45],"plt":[18,19,20,22,23,24,25,29,31,32,33,34,35,36,45,51,52,55,56,57,58,73,77],"plu":[27,56],"plug":52,"pm":58,"pmatrix":15,"pn13":20,"pn24":20,"png":35,"pnorm":[1,57,60,61,72,75],"po":[1,6,11,24,28,33,43,44,45,46,47,48,49,50,52,58,60,61,70,72,73,74,75],"point":[4,5,7,13,19,20,24,31,32,34,36,52,57,59,63,73,78,79],"pointer":35,"poisson":44,"polar":[5,18],"pold":31,"polici":79,"polish":[14,24,32,45],"pollington":[15,27,30,36],"pool":77,"popul":[7,9,43,73,78],"port":14,"portfolio":[34,40,54],"portion":19,"portoflio":54,"pos2":24,"pose":78,"posit":[2,3,4,5,6,9,10,12,14,15,18,22,24,30,32,33,34,38,39,40,43,45,46,48,49,50,51,56,60,61,69,70,71,72,73,74,75,77,78,79],"possibl":[4,7,13,14,15,22,24,27,31,59,66,69,73,78,79],"possibli":[8,9],"post":[14,36,59],"posterior":56,"postiv":70,"postpon":79,"posynomi":[11,44,46,72],"potenti":70,"pow":[14,45,78],"powcone3d":[14,78,79],"powconend":[78,79],"power":[1,4,5,6,14,17,20,36,46,52,54,60,61,66,73,78,79],"powerconend":79,"pq":[6,60,61,75],"pr":[3,56,75],"practic":[19,57,79],"pre":[14,22,25,26,32,78],"preced":78,"preceq":34,"precis":[1,15,27,30,36,72,74,77,78],"precondit":78,"preconfigur":63,"pred":45,"predefin":14,"predict":[19,24,37,43,44,54,57,73],"prefer":[5,39,66,70],"prefix":78,"prepar":[52,66],"prepend":8,"preprocesscut":78,"prerequisit":63,"presenc":[14,24,32],"present":[10,12,14,23,72,74,79],"preserv":[8,75],"presolv":78,"pressur":52,"pretend":9,"prevent":78,"previou":[14,24,78,79],"previous":[8,24,79],"pri":[24,32,35,45,78],"price":25,"primal":[7,9,14,35,78],"primal_tol":78,"primal_var":[8,52],"primaldualhybridgradientparam":78,"primaryclass":64,"primit":6,"princip":14,"principl":[0,24,36],"print":[1,4,5,7,8,11,15,16,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,59,62,66,69,70,71,72,73,74,75,77,78],"prior":33,"prioriti":[13,14],"prob":[7,9,13,14,15,17,18,19,20,23,25,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,52,58,62,69,70,71,77,78,79],"prob1":[69,71],"prob2":[69,71,77],"prob3":[71,77],"prob4":71,"probabl":[4,15,22,24,56,59],"probdata":[7,69],"probingcut":78,"problem":[0,3,4,5,6,8,9,10,11,12,13,14,15,16,17,19,21,24,27,28,30,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,62,63,64,67,70,76,78,79],"problemat":24,"problen":78,"proc":21,"proce":8,"procedur":[63,78],"process":[7,14,21,27,44,64,69,77],"prod":[1,5,44,60,61,72],"prod_":[4,24,48,60,61,72],"produc":[20,25,45,69,73,78],"product":[2,4,6,14,18,24,34,38,48,50,60,61,66,72,73,74,75,79],"profil":24,"profit":38,"program":[3,6,7,8,9,10,11,12,23,24,34,43,44,45,47,48,49,50,51,53,59,62,64,67,76,77,79],"progress":78,"progress_tol":78,"prohibit":30,"project":[5,6,14,35,45,52,62,64,65,70,78,79],"project_and_assign":[6,70],"promin":[14,66],"promot":[1,5,31,72,75],"prompt":[14,59],"propag":[8,14,59],"properli":[14,57],"properti":[1,5,6,7,17,18,20,23,25,29,33,34,44,60,61,70,75,78,79],"protect":31,"protocol":78,"prototyp":78,"proven":8,"provid":[5,8,9,13,14,28,63,66,69,70,73,74,77,78,79],"prox":21,"proxim":[21,78],"proxqp":[67,79],"proxsuit":63,"psd":[2,4,6,7,9,10,12,13,14,20,33,69,70,79],"psd_dim":10,"psd_format_mat":14,"psd_wrap":1,"pt1":52,"pt2":52,"pt3":52,"pt4":52,"ptp":[1,60,61,75,79],"public":[8,79],"publicli":66,"publish":[59,64],"pull":[14,19,72,74],"pure":[69,70],"purpos":[9,13,14,24,66,77],"put":[24,36],"px":[10,12,15],"py":[9,14,24,78],"pyarg":63,"pylab":36,"pyodid":79,"pyplot":[18,19,20,22,23,24,25,29,31,32,33,34,35,45,51,52,55,56,57,58,73,77],"pyscipopt":[39,63],"pytest":[14,63],"python":[0,6,7,14,24,59,62,63,67,68,69,70,71,72,75,77,78,79],"python3":[15,24,27,30,36],"pythonapi":78,"pytorch":[45,67,73],"q":[1,4,6,7,10,12,28,39,40,44,60,61,69,72,75],"q_":44,"q_i":44,"q_max":44,"qcp":[7,28,51,52,53,74,78],"qdldl":[14,24,32,45],"qoco":79,"qp":[9,12,14,24,32,45,78,79],"qp2quad_form":[8,9],"qp2symbolic_qp":[8,9],"qp2symbolicqp":[8,12],"qp_solver":78,"qpmatrixstuf":12,"qpsolver":78,"qr":78,"quad":[2,14,15,18,22,23,30,32,41,42,44,45,46,50,56],"quad_approx":[1,4],"quad_form":[1,40,60,61,70,72,73,75,79],"quad_obj":[9,10],"quad_over_lin":[1,7,14,60,61,72,75],"quadform":12,"quadrat":[3,7,8,9,10,11,12,14,32,54,67,73,78,79],"quadratur":[4,5],"qualit":[19,55],"qualiti":7,"quantil":54,"quantiti":[4,18,23,24,37,73],"quantum":[4,79],"quantum_cond_entr":79,"quantum_rel_entr":79,"quasiconcav":[51,74],"quasiconvex":[7,18,27,51,53,62,64,76,78,79],"quasilinear":[51,52,74],"queri":[7,52],"question":[2,14,48,59],"queu":54,"queue":44,"quickli":[70,73],"quit":[15,57],"quotient":73,"r":[1,4,5,6,9,10,11,14,15,16,18,19,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,50,52,53,55,56,57,58,60,61,67,70,72,73,74,75,77,78],"r2hpdhg":78,"r_hat":33,"r_i":30,"r_j":24,"radiu":[4,24,32,42,48,60,61,72],"rais":[1,2,4,5,6,7,8,11,13,18,20,23,25,29,33,34,46,59,71,72,73,74,77,78,79],"rand":[13,19,22,24,26,28,29,32,39],"randn":[16,19,22,24,26,31,32,33,34,37,38,39,40,41,42,45,53,55,56,57,58,62,70,73,77,78],"random":[3,13,15,16,18,19,22,24,26,28,29,31,32,33,34,35,37,38,39,40,41,42,45,53,55,56,57,58,62,70,73,77,78],"random_arrai":33,"random_geometric_graph":24,"randomli":[18,29,31,35,56,58],"rang":[3,4,7,13,15,16,18,20,21,22,23,24,25,27,29,31,32,33,34,35,41,42,45,46,49,50,52,55,56,57,58,75,77,78],"rangemethod":78,"rangl":[4,13,52],"rank":54,"rao":34,"rapdhg":78,"rare":[77,79],"rate":[30,36,44],"rather":[3,5,13,14,29,62,78,79],"ratio":[22,27,30,44,45,47,49,51,52,74],"ration":[3,4],"raw":[6,8],"rb":25,"rbrace":[22,24,31,32],"rc":[18,20,23,25,27,29,33,34,73,77],"rcond":19,"rcparam":[22,24,32,36],"rdylgn":24,"re":[3,5,14,24,32,34,35,45,70,72,73,74,77,78,79],"reach":[27,31,70,78],"read":[0,14,73,75,76,77,78],"readabl":66,"readi":9,"real":[1,5,11,13,18,23,45,46,54,57,60,61,62,70,72,75,77,79],"realli":24,"realones_ri":18,"reason":[1,13,14,22,56,58,66,70,79],"reassign":7,"rec_arr":35,"receiv":[27,30,49,66],"recent":[7,72,74,78,79],"recipi":66,"reciproc":[4,27,44,46,72],"recommend":[63,66,69,73,79],"reconstruct":[35,56,73,77],"record":[14,58,70,78],"recov":[7,9,14,22,24,31,32,35,55,63,69,79],"recoveri":14,"recreat":59,"rect":[24,31],"rectangl":[24,31,52],"recurr":32,"recurs":[9,10],"recv":21,"red":[19,24,31,35],"redistribut":66,"redsplitcut":78,"reduc":[4,8,9,10,11,12,16,18,19,21,57,70,78],"reduce_bound":11,"reduct":[0,7,14,69,78],"reduction_attribut":[8,11],"redund":78,"ref":79,"refer":[0,3,7,9,14,18,20,23,25,33,34,43,52,59,63,69,72,74,75,78,79],"refin":[18,78],"reformul":[3,5],"refram":17,"reg":58,"regard":[7,8,18,66,78],"regardless":[11,70,72],"region":[1,5,6,24,78],"register_solv":7,"registr":70,"regress":[3,14,19,37,45,54,79],"regular":[24,25,78],"rel":[5,19,24,35,50,78],"rel_entr":[1,60,61,75,79],"relat":[0,7,15,18,32,55,65,73,78],"relationship":[55,59],"relative_devi":50,"relative_dual_toler":78,"relative_gap_toler":78,"relative_primal_toler":78,"relativist":54,"relax":[22,24,34,78],"releas":[8,62,63,79],"relentrconequad":79,"relev":[3,6,7,67,78],"reli":[3,62],"reliabl":63,"reltol":[22,32,78],"reltol_inacc":78,"remain":[2,14,19,24,56,58,63,66,79],"remaind":24,"remark":[14,78],"remot":[14,21],"remov":[9,24,31,78,79],"remove_edg":24,"remove_guard":31,"renam":79,"reoptim":78,"repeat":[18,26,27,29,31,33,34,36,73],"repeatedli":[76,77,79],"replac":[4,6,11,14,24,32,46,55,58,66,72,77,79],"repo":14,"repons":23,"report":[7,14,24,62,69,79],"repositori":[14,63],"repres":[2,4,5,6,9,10,12,13,17,18,24,31,35,36,37,49,52,63,66,69,70,73,77,79],"represent":[3,4,5,6,7,11,13,14,18,23,52,69,73,77,78,79],"reproduc":66,"reproduct":66,"request":[14,59,62,72,74],"requir":[4,8,10,12,14,36,38,45,52,62,63,66,70,71,72,73,74,78,79],"requires_grad":[7,43,44,73,78],"requires_grad_":45,"research":[59,62,64],"resembl":[69,79],"reshap":[1,10,12,18,19,20,23,27,52,60,61,72,75],"resid":16,"residu":[5,29,37,78],"residualcapacitycut":78,"resolut":18,"resolv":[1,14,32,60,61,72,79],"resourc":[24,69],"respect":[2,5,7,9,13,15,19,24,43,44,45,52,70,71,72,73,75,77,78],"respons":[9,20,23,66],"rest":[14,56,58,79],"restrict":[5,7,24,62,73],"result":[3,4,5,7,9,19,22,24,26,28,32,37,38,40,41,42,55,62,66,71,73,74,75,77,78,79],"resum":14,"retain":66,"retina":24,"retriev":[8,10,11,12,78],"retstep":32,"return":[1,2,4,5,6,7,8,9,10,11,12,13,15,17,20,22,24,27,28,30,31,36,40,43,45,55,56,57,59,62,69,70,72,74,75,77,78,79],"reus":78,"rev":63,"revers":79,"review":[14,79],"revis":[63,66],"revisit":20,"reweight":24,"rewrit":[8,24,27,30,64,73,78,79],"rewritten":[27,30,42,73,79],"rewrot":79,"rfloor":75,"rgb":35,"rh_exp":[1,2],"rh_expr":2,"rho":[16,21,24,32,44,45,77,78],"rho_x":35,"ridg":[54,55],"right":[2,4,9,16,18,19,21,23,24,29,32,34,35,36,56,58,60,61,66,69,71,72,75,78],"rightarrow":4,"rilei":62,"risk":[4,54,66],"rkf1":32,"rkf2":32,"rkf3":32,"rm":[16,21,58],"rnode":24,"ro":[19,31,32],"robert":[15,27,30,36],"robin":[10,12,62,64],"robust":[19,20,42,54,78],"robust_kktsolv":59,"roger":[15,27,30,36],"root":[3,9,10,14,63],"roughli":14,"round":[6,22,56],"rout":54,"row":[2,4,5,6,9,14,18,20,25,32,35,37,59,70,75,78],"row_sum":75,"rowwis":20,"royalti":66,"ruff":14,"rule":[4,7,23,34,43,44,46,59,69,73,75,76,77,78],"ruleset":[6,7,72,74,76,79],"run":[1,21,24,27,32,34,39,45,59,70,72,74,78,79],"run_process":21,"run_work":21,"runtim":[22,32,78],"runtimeerror":79,"rust":[14,67],"rvert":[4,60,61,72,75],"s0":38,"s_":33,"s_algorithm":24,"s_i":[27,49],"s_n":5,"s_p":49,"sai":[4,14,24,32,46,72,73,74],"said":[46,72,73],"salesman":54,"samar":22,"same":[3,4,5,6,13,14,16,18,23,24,25,26,29,30,33,34,59,60,61,66,69,70,71,72,75,77,78,79],"sami":[15,27,30,36],"sampl":[4,18,20,23,33,45],"satisfactori":7,"satisfi":[5,7,13,24,34,44,46,59,70,71,72,74,77,78],"satur":27,"sav":78,"save":[7,78],"save_fil":78,"save_ii":78,"savefig":[22,32],"saw":[43,55],"sb":18,"sc":[7,14,18,20,25,28,29,35,44,45,62,63,67,69,74,79],"scalar":[2,3,4,5,7,27,43,58,69,70,71,73,74,76,77,79],"scalar_product":79,"scale":[4,5,14,24,32,34,35,45,54,67,78],"scaled_termin":[24,32,45],"scalen":[1,60,61,75],"scatter":[18,21],"scheme":[4,5],"schiel":62,"scientist":62,"scip":[39,70,79],"scip_param":78,"scipi":[1,3,6,7,14,15,20,25,33,69,70,73,77],"scipy_canon_backend":69,"scipy_opt":78,"scope":14,"score":56,"script":[16,62,72,74,79],"sdp":[20,41,70,78,79],"sdp_1":14,"sdpa":79,"sdpap":63,"sdpt3glue":63,"se":4,"search":[14,78],"second":[2,5,7,9,10,12,14,18,20,22,24,25,27,32,44,54,58,67,70,75,78,79],"second_ord":5,"section":[0,14,20,24,33,34,54,59,66,69,71,72,74,75,77,79],"secur":31,"see":[1,3,4,6,7,9,10,11,12,14,17,18,19,22,24,35,43,54,55,59,62,63,66,69,70,72,73,74,75,77,78,79],"seed":[16,18,19,22,24,26,28,29,31,32,33,34,35,37,38,39,40,41,42,45,53,55,56,57,58,62,73,77,78],"seek":37,"seem":78,"seen":[4,32,51],"segment":[20,31,77],"select":[7,9,24,34,35,57,58,63,69,75],"self":[6,8,14,17,78],"sell":66,"semant":[2,4,6,8,70,71,74,75,79],"semi":[75,77],"semidef":79,"semidefinit":[5,6,9,10,12,14,33,39,54,67,76,77,78,79],"send":[14,21],"sens":[5,13,22,55,57,71,77],"sensibl":[6,70],"sensit":[7,18,44,54,76,79],"sensor":[22,32],"sent":66,"separ":[5,18,62,66,70,78],"sequenc":[3,4,8,9,31,32,74,78],"seri":[17,25,34,79],"serial":14,"serif":[18,20,23,25,29,33,34,73,77],"serv":44,"servic":[44,66],"set":[2,4,5,6,7,9,13,14,18,19,22,24,25,27,29,31,32,33,35,36,39,41,43,45,46,48,54,56,58,59,63,67,69,70,72,73,74,75,76,77],"set_default_tensor_typ":45,"set_label_posit":32,"set_printopt":[15,27,30,36],"set_size_inch":24,"set_titl":[22,32,35],"set_xlabel":32,"set_ylabel":32,"set_ylim":22,"setup":[7,21,34,35,78],"setup_tim":[7,52],"seven":5,"sever":[9,14,48,50,72,78,79],"sf":[4,60,61,75],"sgd":45,"shade":18,"shall":66,"shallow":[7,59],"shane":[45,64],"shannon":15,"shape":[1,2,5,6,13,15,16,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,44,45,46,47,49,54,55,57,62,70,71,72,75,77,79],"share":[27,62,66],"sharei":[22,32],"sharex":[22,32],"short":[14,62,65,79],"shortest":24,"shortest_path":24,"should":[2,5,6,7,9,11,14,24,27,47,52,56,59,63,66,70,72,73,75,77,78,79],"show":[1,18,19,20,22,23,24,25,29,31,32,33,34,36,45,51,52,53,54,55,56,57,58,70,71,72,74,77,78],"shown":[24,71,77],"showpath":24,"shrink":[55,57,58],"shrinkag":[55,57],"si":[4,60,61,72],"side":[2,7,9,24,43,69,70,73,78],"sideband":18,"sidelob":18,"sight":[24,31],"sigma":[19,22,24,27,32,40,41,45,49,55,57,58],"sigma_":41,"sigma_i":[27,49],"sigma_max":1,"sigmoid":56,"sign":[1,3,6,58,60,61,70,73,74,75,76,77,79],"signal":[15,22,25,27,30,49],"signal_pow":49,"signatur":22,"signific":[18,33],"significantli":[5,62,69],"sikandar":22,"similar":[19,35,44,57,72,73,74,75],"similarli":[24,44,70,74,75],"simpl":[5,7,9,14,19,27,34,36,40,43,51,68,70,71,72,73,74,77],"simple_step":20,"simpler":17,"simpleroundingcut":78,"simplest":30,"simplex":[63,78],"simplex_it":78,"simpli":[0,5,19,36,57,63,70,78],"simplic":52,"simplifi":[8,24],"simultan":58,"sin":18,"sinc":[14,15,18,21,27,30,32,34,36,44,69,71,73,78],"sine":52,"singl":[8,9,13,14,24,32,55,57,72,75],"singular":[4,75],"sink":[17,24],"sinr":[27,49],"sinr_min":49,"site":24,"situat":[14,79],"six":14,"size":[2,4,5,6,7,9,13,14,22,23,24,25,26,27,29,32,33,36,54,55,56,57,58,71,75,79],"size_metr":7,"skaf":[26,29,33],"skiprow":25,"slack":[8,14,78],"slice":[2,5,9],"slide":[31,68],"slightli":[45,70],"slower":[20,57,78],"slowest":[20,55],"sltn":[10,12],"small":[3,7,14,24,34,43,44,45,53,57,69,73,78],"smaller":[7,19,24,69,78],"smallest":[4,60,61,75],"smuggler":54,"snapvx":67,"snippet":[5,14,59,73],"snp500":25,"snr":22,"so":[0,1,4,6,7,9,14,15,18,20,22,23,24,27,30,31,33,34,35,43,48,50,52,55,57,71,72,73,78,79],"soc":[4,7,9,10,12,14,35,42,52,54,69,78],"soc_constraint":42,"soc_dim":10,"socp":[23,42,70,78],"socp_0":14,"softwar":[0,8,10,12,14,59,62,66,67,73],"sole":66,"soln":[7,69],"solut":[7,10,11,12,14,18,19,20,24,25,26,27,29,31,32,36,38,39,40,41,42,44,45,52,53,54,69,73,74,77,78,79],"solv":[3,4,5,7,8,9,11,13,14,15,16,19,21,22,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,67,69,70,71,72,76,77,79],"solvabl":[71,72,74],"solve_tim":[7,52,78],"solve_via_data":[7,8,14,69,78],"solver":[5,7,8,9,11,13,18,20,24,25,26,28,29,30,32,33,34,35,39,45,62,65,69,70,74,76,77],"solver_arg":45,"solver_chain":8,"solver_method":78,"solver_nam":[7,78],"solver_opt":[7,8],"solver_path":[7,78],"solver_stat":[7,78],"solver_test_help":14,"solver_verbos":78,"solvererror":[7,20,77,79],"solvers_pb2":78,"solverstat":78,"solvertesthelp":14,"solving_chain":8,"solvingchain":[7,69],"some":[1,5,6,7,9,13,14,18,19,24,30,39,45,48,50,54,69,70,71,72,73,74,78,79],"someth":14,"sometim":[4,19,59,73,74],"sort":[4,45,60,61,75],"sourc":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,20,39,59,62,63,66,67,70,78,79],"space":[18,34,47,70,78],"spars":[1,6,10,12,14,22,25,31,35,54,55,56,58,63,69,76,77,78],"sparse_path":6,"sparsen":33,"sparsiti":[6,33,55,58,76,78,79],"spec":[18,23],"special":[3,15,43,66,78,79],"specif":[3,4,7,8,9,10,11,12,13,14,20,24,33,48,50,54,66,78,79],"specifi":[2,4,6,7,8,9,13,27,28,51,53,70,71,74,77,78,79],"spectacular":14,"spectral":[4,48,60,61,72,75],"speed":[5,7,8,32,59,69,73,78],"spend":[24,37],"sphinx":79,"split":[10,12,21,23,24,27,32,35,45,78],"split_adjoint":[10,12],"split_solut":[10,12],"springer":64,"spy":33,"sq_penalti":77,"sqrt":[0,1,19,22,23,51,52,60,61,71,72,74,75],"sqrtm":[33,73],"squar":[1,2,4,7,18,19,23,31,32,35,39,45,52,54,55,57,60,61,62,70,71,72,73,75,77,78],"squeez":[18,45],"ss":33,"stabil":[78,79],"stable2":78,"stack":[2,45,75],"stackoverflow":[14,59],"stage":[13,14,24,31],"standard":[2,3,4,9,14,29,32,34,38,40,52,60,61,62,63,71,73,75,76,77,79],"standard_norm":13,"standardtestlp":14,"standardtestsdp":14,"standardtestsocp":14,"stanford":[4,24,25,28,31,32,35,45,46,59,71,78],"star":[24,31,37,38,39,40,42],"star_i":[38,40],"start":[8,13,14,18,21,24,27,32,45,63,73,75,76,79],"stat":[1,2,4,15,36,76],"state":[7,8,9,10,11,12,14,32,66,72],"statement":[14,28,66,74],"static":[9,12,79],"staticmethod":14,"station":17,"statist":[7,15,78,79],"statu":[7,8,9,15,18,20,23,24,25,27,28,29,30,32,33,34,35,36,39,45,52,70,77,78,79],"status":76,"std":[1,60,61,75,79],"stdout":14,"stellato":[24,32,45,62],"stem":23,"step":[14,16,18,20,22,27,31,32,35,36,45,63,73,78,79],"stephen":[22,29,59,62,64],"steven":[10,12,59,62,64,66],"sth":14,"still":[24,46,69,70],"stochast":67,"stock":40,"stop":[7,78],"stopband":18,"stoppag":66,"storag":17,"store":[2,5,10,12,17,18,33,34,35,62,69,70,71,72,74,75,78],"str":[4,6,7,8,10,11,12,13,78],"straightforward":[36,69,71],"strategi":7,"stream":52,"strict":[2,5,33,60,61,75,77],"strictli":[2,35,45,60,61,75,78],"string":[4,6,7,8,9,14,77,78,79],"strong":9,"strongli":[63,79],"structur":[7,8,9,14,17,54,69,70],"strue":33,"student":[62,70],"studi":[19,43,44],"studio":63,"stuf":[10,14],"stuff":10,"stuffed_object":[10,12],"sub":[1,6,27,71],"subexpress":[70,71],"subject":[9,10,12,15,16,18,19,20,21,22,24,26,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,66,73],"sublevel":[27,74],"sublicens":66,"submiss":66,"submit":66,"subplot":[22,31,32,33,35,77],"subproblem":[21,74],"subsect":32,"subsequ":[7,8,43,66,73],"subset":[14,24,34,35,41,70],"subseteq":[46,72],"substanti":[73,77,79],"subsystem":[2,78],"subtract":[43,45,69],"subtre":11,"succcurlyeq_":5,"succe":[7,78],"succeq":[5,15,20,26,29,30,33,36,41],"success":[32,45],"successfulli":[23,77],"suffic":[0,63],"suffix":7,"suggest":[38,40,42,56,58],"suitabl":[7,14],"sum":[1,3,4,5,6,7,13,15,17,19,20,21,22,24,26,27,30,31,32,33,34,36,37,44,45,46,48,49,50,55,56,57,58,60,61,69,70,71,72,73,75,79],"sum_":[2,4,13,14,15,19,21,22,24,26,27,30,32,33,35,36,37,44,45,49,50,56,60,61,72,75],"sum_entri":79,"sum_i":[4,34,58],"sum_k":[4,60,61,75],"sum_l":[4,60,61,75],"sum_largest":[1,60,61,75,79],"sum_smallest":[1,60,61,75],"sum_squar":[1,7,16,19,21,22,25,32,37,39,45,53,60,61,62,69,72,73,75,77,78],"sum_x":[15,36],"summar":72,"summari":[1,10,12],"sup":[13,15],"sup_x":15,"super":[1,6,78],"supersc":79,"supersed":66,"suppfunc":[1,4],"suppfuncatom":[1,13],"suppli":[3,7,8,13,14,27,46,56,69,72,73,74],"support":[2,3,5,7,8,9,13,14,62,66,69,70,73,78],"supported_constraint":78,"suppos":[14,16,17,19,21,33,40,43],"suppress":14,"supremum":13,"sure":[8,14,77,78],"surfac":52,"svg":[24,55,56,57,58],"svm":[54,58],"sw_aff_ctrl":4,"swap":2,"swapax":[1,79],"switch":[14,78,79],"switzerland":[22,32],"sy":[22,32,33,35,78],"symbol":[0,9,11,12,73,77,79],"symmetr":[1,3,5,6,9,13,20,33,39,41,70,74,75,77,78,79],"symmetri":70,"sync":14,"syntax":[66,72,75,79],"synthesi":18,"system":[8,20,22,24,30,32,34,44,45,49,54,59,63,64,66,71,78],"systemat":19,"sytem":78,"t":[1,2,4,5,6,9,10,11,12,13,14,15,16,18,19,20,22,24,25,27,28,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,50,56,58,60,61,66,70,71,72,73,74,75,77,78,79],"t_":[18,20],"tabl":[14,24,72,74,78],"tackl":31,"tag":[1,46],"tailor":78,"take":[2,4,5,7,8,9,10,11,13,14,15,22,24,27,45,67,69,71,72,73,75,78,79],"takeawai":[44,78],"taken":[28,45,75],"tar":18,"target":[7,8,11,13,14,17,18,21,69,79],"targets_and_prior":13,"tau":[22,31,32,35,78],"tdom":20,"teach":68,"teal":45,"team":[14,24],"technic":[0,79],"techniqu":57,"tell":[7,14,69,77,78],"temporarili":70,"tend":57,"tensor":[2,45],"tensorflow":[67,73],"term":[4,5,9,10,13,17,20,21,31,32,56,58,66,69,70,79],"termin":[21,63,66,70,78],"terminologi":8,"test":[7,27,55,56,57,58,59,77,79],"test_":14,"test_conic_solv":14,"test_dgp":14,"test_error":[55,56,57,58],"test_lp_1":14,"test_mi_socp_1":14,"test_mosek_lp_1":14,"test_product":14,"test_sdp_1min":14,"test_socp_0":14,"testdgp":14,"text":[2,3,5,13,18,20,23,25,27,28,29,30,33,34,47,48,49,50,60,61,66,71,72,73,75,77],"textrm":42,"textstyl":4,"texttt":[2,4,13,30,75,79],"th":[2,8,14,21,31,36,44,49],"than":[3,4,5,6,7,8,9,13,14,15,17,19,22,24,29,32,35,44,56,57,58,62,70,73,74,77,78,79],"thei":[0,1,5,8,9,11,13,14,21,24,31,44,46,51,59,69,70,71,72,74,77,79],"them":[4,5,9,10,19,24,55,59,63,69,73,77],"theme":79,"themselv":14,"theorem":[5,71,74],"theoret":24,"theori":[4,23,24,36,66],"therefor":[14,52,53,73],"thereof":[1,2,5,66],"theta":[18,45,71,72],"theta_":18,"theta_1":18,"theta_2":18,"theta_b":18,"theta_tar":18,"thi":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,39,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,62,63,66,69,70,71,72,73,74,75,77,78,79],"thin":[7,69],"thing":[9,24,77],"third":[4,14,18,66],"thorough":74,"those":[0,2,4,7,8,14,35,57,66,70,77,79],"though":[19,35,73],"thread":[14,44,78],"three":[5,8,14,20,35,46,71,72,75],"threshold":[18,22,33,34,45,49],"through":[4,5,6,7,9,14,19,24,44,45,63,64,66,71,73,78,79],"throw":[19,59,77],"thrown":[7,78],"thu":[20,24,30,32,34,36],"thumb":23,"thwart":24,"tick_right":32,"tight":[13,22,24,32],"tight_layout":[18,34,77],"tighten":69,"tild":[41,46],"time":[4,5,7,9,14,15,16,17,20,22,24,25,27,28,29,31,32,35,37,38,39,40,41,42,43,44,45,50,60,61,62,69,72,73,75,77,78,79],"time_limit":[45,78],"time_limit_sec":78,"timestep":32,"timothi":[15,27,30,36],"titl":[18,20,22,23,33,36,55,57,59,64,66,77],"tmax":20,"tmp":26,"toarrai":24,"todens":33,"todo":[14,18,33],"togeth":[6,70,75,77],"tol":[35,78],"toler":[5,13,27,29,78],"tolerance_param":78,"took":[7,78],"tool":[63,79],"toolkit":7,"top":[63,70],"topic":[18,20,23,25,33,34],"topologi":[20,24],"torch":45,"tort":66,"tot":30,"total":[4,19,20,22,27,30,31,32,36,38,44,49,54,71,78,79],"total_vari":[1,4],"touch":[3,14],"tour":62,"toward":[31,57,79],"tp":4,"tpx":40,"tr":[2,4,33,41,60,61,72,75],"tr_inv":[1,60,61,75,79],"trace":[1,14,33,41,48,50,60,61,72,75,79],"traceabl":14,"track":[14,54,66],"tracker":[14,59,62],"tractabl":[19,22],"trade":[6,54,56,57,58,66,77],"trademark":66,"tradeoff":20,"tradit":[17,79],"traffic":44,"train":[21,45,55,56,57,58],"train_error":[55,56,57,58],"train_input":45,"train_loss":45,"train_output":45,"train_pr":45,"train_preds_tch":45,"traj":32,"trajectori":32,"trang":13,"transact":34,"transfer":66,"transform":[0,4,8,14,46,66,72,73,76,77],"transistor":20,"transit":[15,79],"translat":66,"transmiss":17,"transmit":[27,30],"transmitt":[27,36,49],"transpar":24,"transpos":[1,6,43,60,61,70,79],"trasmit":49,"trasmitt":49,"travel":54,"treat":[4,7,29,71,72,75,77,78],"treatment":79,"tree":[0,1,5,6,9,10,20,59,71],"trend":54,"trendlin":19,"tri":[7,14,78],"trial":[56,58,70],"triangl":52,"triangular":[2,60,61,70,75],"trigger":14,"tripl":14,"triu_indic":70,"trivial":[9,14,32,38,40,73],"tropp":34,"true":[1,2,4,5,6,7,8,10,11,12,13,14,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,39,41,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,60,61,69,70,71,72,73,74,75,77,78,79],"try":[7,14,19,20,24,31,32,46,59,70,71,74,77,78,79],"tthre":20,"tune":[32,33,55,57],"tupl":[2,4,6,7,9,10,24,48,70,78,79],"tuplewith":70,"turn":[24,52],"tutori":[0,7,43,46,47,49,54,59,62,69,71,72,73,75,77,78,79],"tv":[1,35,60,61,75],"twice":20,"two":[2,3,5,6,8,9,13,14,15,17,24,27,31,32,34,46,50,69,70,71,72,73,74,77,79],"twomircut":78,"tx":[12,19,31,37,38,40,42],"txt":25,"type":[1,2,4,5,6,7,9,10,11,12,13,14,29,59,66,70,74,77,78,79],"typic":[7,31,35],"typo":14,"u":[3,8,14,21,24,27,30,32,35,46,62,69,70,72,77],"u_":35,"u_0":27,"u_1":27,"u_corr":35,"u_i":[21,30,42],"u_n":27,"u_orig":35,"ubuntu":63,"unadorn":57,"unanticip":7,"unary_oper":[1,2],"unaryoper":2,"unassign":14,"unbias":19,"unbound":[7,9,28,76,78,79],"unbounded_inaccur":77,"uncertainti":[18,22],"unchang":2,"uncom":23,"unconstrain":4,"undefin":[7,18],"under":[9,10,12,14,20,27,43,44,66,71,72,73,74,78,79],"underli":[4,25],"underset":19,"understand":[14,73],"undetect":24,"undirect":17,"unfamiliar":69,"unifi":79,"uniform":[18,24],"uniformli":18,"union":[5,66],"uniqu":[5,24],"unit":[18,31,33,38,52],"uniti":4,"unittest":14,"univers":[24,32,35,45,78],"unknown":[1,3,32,46,52,60,61,71,72,74,75,77,79],"unless":[10,12,14,66,77],"unlik":[5,24],"unlucki":74,"unnecessari":[14,70],"unpack":[7,11,69,77],"unpack_result":[7,69],"unspecifi":[7,11,78],"unsuccess":24,"unsupport":78,"until":[18,27,31,57],"unvector":2,"unweight":4,"up":[1,3,4,5,7,8,9,10,14,24,27,57,69,73,78,79],"updat":[6,7,16,21,22,24,32,34,36,45,77],"upgrad":[51,53,79],"upon":[0,5],"upper":[2,6,13,20,24,27,52,55,56,57,58,60,61,70,74,75,78,79],"upper_bound":[10,12],"upper_tri":[1,60,61,75],"upperbound":78,"upstream":[14,78],"url":[59,63],"us":[0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,20,21,23,24,25,26,27,30,31,32,33,35,36,42,43,45,46,48,50,51,52,53,54,55,56,57,58,62,63,64,66,68,69,70,71,72,73,74,75,77,78,79],"usag":[8,69,73],"use_indirect":78,"use_quad_obj":78,"user":[3,5,6,7,8,14,22,32,37,52,67,69,75,78,79],"usetex":[18,20,23,25,29,33,34,73,77],"usr":[15,27,30,36],"usual":[3,4,13,14,44,55,57,77,78],"util":[14,28,30,78],"utilis":30,"v":[5,13,14,19,20,22,32,46,52,55,57,58,59,72,77],"v0":[24,32,45],"v1":78,"v2":35,"v_":[32,58],"v_j":22,"v_t":32,"val":[4,6,45,70,73,77],"val_input":45,"val_loss":45,"val_output":45,"val_pr":45,"val_preds_tch":45,"valid":[4,8,13,14,24,45,70,71,72,74],"valu":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,69,71,72,73,74,75,76,77,78,79],"value_spars":[70,79],"valueerror":[2,5,7,8,13,71,73,79],"vandenbergh":[15,20,27,30,33,34,36,47,49,59,62,69],"vanderbergh":20,"vanilla":57,"var":[1,23,35,44,60,61,75,77,78,79],"var0":46,"var1":46,"var30747":52,"var30766":52,"var30779":52,"var30793":52,"var_dict":7,"var_id":6,"var_id_to_col":[10,12],"vari":[24,32],"variabl":[0,1,2,3,4,5,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,67,70,71,72,73,74,75,76,77,78,79],"varianc":[4,22,40,57],"variant":70,"variat":[4,54],"varieti":[25,68,79],"variou":[7,19,44],"vast":[5,73],"vastli":19,"vdot":[1,4,14,60,61,72,75,79],"ve":[14,59,79],"vec":[1,4,5,13,60,61,72,75,79],"vec_to_upper_tri":[1,60,61,75,79],"vector":[1,2,3,4,5,6,7,9,10,12,13,14,17,18,19,22,23,30,31,32,34,35,37,39,43,44,45,50,53,56,59,69,70,71,73,74,76],"vehicl":54,"veloc":[14,32],"verbal":66,"verbos":[7,8,22,24,25,26,31,32,35,45,52,74,78,79],"veri":[14,36,73,79],"verifi":[52,71,74],"verify_object":14,"verify_primal_valu":14,"versa":[11,19],"verschueren":[10,12,62,64],"version":[2,3,8,10,12,14,18,20,63,66,69,70,72,73,75,78,79],"versu":[56,58],"vertic":[2,20,75],"vestigi":32,"via":[2,4,6,7,17,18,24,32,46,63,69,70,72,74,75,78,79],"vice":[11,19],"view":[4,24,31,70,73],"violat":[5,69,71,79],"virtual":63,"virtualenv":63,"visibl":[24,35],"visibleedg":24,"visiblenod":24,"visiblepath":24,"visit":[59,68,71,78],"visual":[24,63,71],"vlambda":25,"volum":[54,64],"volunt":14,"von":4,"von_neumann_entr":[1,75,79],"vstack":[1,18,43,50,52,60,61,72,75,79],"w":[1,4,5,6,9,10,11,14,18,23,24,30,31,32,34,44,45,47,60,61,72,74,75,79],"w_":[20,30,32,44],"w_1":4,"w_i":[30,31,34,44],"w_im":18,"w_max":44,"w_n":4,"w_ri":18,"w_t":32,"w_tot":30,"w_true":32,"wa":[7,8,9,13,23,35,44,52,55,63,66,73,77,79],"wai":[1,5,6,7,8,9,13,14,17,19,24,54,59,62,69,70,71,73,77,79],"wait":44,"walk":[71,73],"wall":[22,24,32,47],"wall_area":47,"want":[7,14,27,31,33,37,43,63,73,77,78,79],"warm":[8,24,32,45,76,79],"warm_start":[8,78],"warn":[7,35],"warrant":14,"warranti":[10,12,14,66],"wasm":79,"water":54,"water_fil":36,"wavelength":18,"wd":47,"we":[0,2,3,4,5,8,9,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,52,55,56,57,58,59,62,63,64,66,67,68,69,70,71,72,73,74,75,78,79],"web":[4,7,22,28,32,46],"websit":[14,46,59,63,78,79],"wedg":52,"weight":[4,13,18,20,23,24,25,27,29,34,44],"weighted_sum":13,"welcom":[14,63],"well":[19,20,24,31,32,34,57,70,79],"were":[7,31,55,64,73,78,79],"what":[9,14,19,24,62,70,72,74,76,79],"whehter":8,"when":[3,4,5,6,7,9,13,14,18,22,24,27,29,32,40,42,43,51,56,63,69,70,71,72,73,74,75,77,78,79],"whenev":[4,59,79],"where":[0,1,2,4,5,6,7,9,10,11,12,13,14,15,16,18,19,21,22,23,24,26,27,29,30,31,32,33,34,35,36,39,41,42,43,44,45,46,48,49,50,52,53,55,56,57,58,66,69,70,72,73,74,77,78,79],"wherea":[8,32,55],"wherev":66,"whet":52,"whether":[1,2,4,5,6,7,8,10,11,12,13,14,27,36,46,59,66,70,71,72,73,74,77,78,79],"which":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,22,23,24,27,30,31,32,33,34,35,36,39,43,44,45,46,48,49,51,52,53,56,58,63,66,67,69,70,71,72,73,74,75,77,78,79],"while":[3,5,8,9,13,18,19,21,24,27,37,44,54,56,58,59,66,70,71,72,74,75,78,79],"white":[30,35],"who":[0,8,14,17,18,62],"whole":66,"whom":[24,66],"whose":[4,5,6,9,10,11,45,70],"why":[7,13,24,73,78,79],"wi":[55,56,57,58],"wide":7,"width":[18,20,24,47,52],"wikipedia":13,"william":62,"willing":14,"wilson":[18,20,23,25,26,29,33,34,62],"win":54,"window":63,"wire":20,"wireless":54,"wish":[11,78],"within":[13,14,22,24,27,32,42,52,66,78],"without":[0,3,4,7,8,10,12,14,24,32,38,45,66,70,73,77,78,79],"wmax":20,"won":[24,73],"word":[7,57,70],"work":[5,14,18,19,23,24,25,26,29,33,34,64,66,69,70,71,78,79],"worker":21,"world":[54,57,62,77],"worldwid":66,"worst":54,"would":[3,4,6,7,14,17,19,24,27,31,38,40,42,43,44,50,59,70,72,73,74,75,77,78,79],"wrap":[1,2],"wrapper":[1,2,4,7,14,69,73,78],"write":[0,5,6,8,10,12,13,17,18,24,36,52,59,66,69,75,76,77,79],"write_mp":78,"written":[9,15,23,24,63,66,71,73,75,78],"www":[7,10,12,14,22,25,32,46,66],"x":[1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,18,19,20,21,22,24,25,26,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,48,50,51,52,53,55,56,57,58,59,60,61,62,63,69,70,71,72,73,74,75,77,78,79],"x0":[34,38,42],"x1":[11,60,61,72,75],"x11":[72,75],"x1q":[72,75],"x2":11,"x3":11,"x_":[2,4,32,48,50,60,61,72,75,77],"x_0":32,"x_1":[2,4,11,20,45,60,61,72,75],"x_1x_2":50,"x_2":[11,20,45,46,72],"x_3":11,"x_hat":43,"x_i":[4,15,20,21,22,26,31,34,36,56,58,60,61,75],"x_iy_j":50,"x_j":[15,24,38,60,61,72],"x_k":[2,15],"x_l1":34,"x_log":34,"x_m":[4,20,50],"x_n":[2,4,32,45,46,60,61,72,75],"x_order":19,"x_param":45,"x_rml":22,"x_rnd":22,"x_slack":45,"x_star":53,"x_t":32,"x_test":[55,56,57,58],"x_train":[55,57],"x_true":[22,32],"x_uncensor":19,"x_valu":77,"xarea":20,"xbar":21,"xcode":63,"xdelai":20,"xexp":[1,60,61,72,75,79],"xi":[20,21,77],"xk":[60,61,72,75],"xlabel":[18,19,20,23,25,29,34,36,45,55,56,57,58,73,77],"xlim":[18,20,23,34,36],"xlogi":15,"xmax":[24,31],"xmin":[24,31],"xnpt":20,"xp1":[72,75],"xpq":[72,75],"xpress":[67,70,79],"xscale":[55,56,57,58,77],"xsol":31,"xt":20,"xtick":36,"xy":[24,31,43,50,60,61,72,74],"xyz":43,"xz":43,"y":[1,2,3,4,5,9,13,14,15,16,18,19,20,22,24,25,29,30,31,32,33,35,36,43,44,45,46,50,51,52,55,56,57,58,60,61,69,70,71,72,73,74,75,77,78,79],"y_":[32,45,75],"y_1":[33,45],"y_2":45,"y_censor":19,"y_hat":43,"y_i":[15,33,45,56,58,75],"y_init":29,"y_j":33,"y_k":75,"y_m":45,"y_n":33,"y_order":19,"y_sampl":33,"y_t":32,"y_test":[55,56,57,58],"y_train":[55,57],"yaxi":32,"ye":[5,59],"year":[59,62,64,79],"yearli":24,"yellow":31,"yet":[9,79],"yield":[8,47,57],"ylabel":[18,19,20,23,25,29,34,36,45,56,73,77],"ylim":[18,20,23,34,36],"ymax":[18,24,31],"ymin":[18,24,31],"you":[0,1,3,4,5,6,7,8,10,11,12,13,14,35,39,43,46,59,62,63,64,66,69,70,71,72,73,74,77,78,79],"your":[0,7,9,10,11,12,14,59,62,63,66,70,72,73,74,77,78,79],"yourself":7,"ython":[59,64],"yx":29,"yy":33,"yz":43,"z":[4,5,7,9,13,14,21,39,43,45,46,56,70,72,74,78],"z_hat":43,"z_i":[45,56,58],"zero":[4,6,7,9,10,12,14,15,16,18,20,21,24,27,29,31,32,33,34,35,42,44,45,55,56,57,58,69,70,71,78],"zero_grad":45,"zero_offset":[10,12],"zero_tol":78,"zerodb":18,"zeropoint":78,"zeros_lik":24,"zeroth":23,"zhang":62,"zico":64,"zip":[24,48],"zo13":20,"zo24":20,"zurich":[22,32,78],"zymni":[20,29],"\u03b1":[27,30,36],"\u03b1_i":36,"\u03b2":30,"\u03b5":27,"\u03c3":27,"\u2119":15,"\u211d":15},"titles":["API Documentation","Atoms","Affine Atoms","cvxpy.atoms.elementwise package","Other Atoms","Constraints","Expressions","Problems","Reductions","Back-End Reductions","cvxpy.reductions.dcp2cone package","Middle-End Reductions","cvxpy.reductions.qp2quad_form package","Transforms","Contributing","Capacity of a Communication Channel","Method of multipliers","Object Oriented Convex Optimization","Minimize beamwidth of an array with arbitrary 2-D geometry","Fitting censored data","Sizing of clock meshes","Consensus optimization","Fault detection","Chebychev design of an FIR filter given a desired <span class=\"math notranslate nohighlight\">\\(H(\\omega)\\)</span>","TODO","<span class=\"math notranslate nohighlight\">\\(\\ell_1\\)</span> trend filtering","Entropy maximization","Power Assignment in a Wireless Communication System","Minimizing Condition Number by Scaling","Nonnegative matrix factorization","Optimal Power and Bandwidth Allocation in a Gaussian Channel","Optimal parade route","Robust Kalman filtering for vehicle tracking","Sparse covariance estimation for Gaussian variables","Computing a sparse solution of a set of linear inequalities","Total variation in-painting","Water Filling in Communications","Least-squares","Linear program","Mixed-integer quadratic program","Quadratic program","Semidefinite program","Second-order cone program","Derivatives fundamentals","Queuing design","Structured prediction","DGP fundamentals","Maximizing the volume of a box","Perron-Frobenius matrix completion","Power control","Rank-one nonnegative matrix factorization","Fractional optimization","Aerospace Design via Quasiconvex Optimization","Minimum-length least squares","Examples","Machine Learning: Lasso Regression","Logistic regression with <span class=\"math notranslate nohighlight\">\\(\\ell_1\\)</span> regularization","Machine Learning: Ridge Regression","Support vector machine classifier with <span class=\"math notranslate nohighlight\">\\(\\ell_1\\)</span>-regularization","FAQ","&lt;no title&gt;","Functions","Welcome to CVXPY 1.7","Install","Citing CVXPY","Resources","License","Related Projects","CVXPY Short Course","Advanced Features","Advanced Constraints","Disciplined Convex Programming","Disciplined Geometric Programming","Disciplined Parametrized Programming","Disciplined Quasiconvex Programming","Atomic Functions","User Guide","What is CVXPY?","Solver Features","Changes to CVXPY"],"titleterms":{"":[14,24,59],"0":79,"1":[46,62,71,79],"1d":32,"2":[18,46,59,71,79],"3":[46,79],"4":[46,79],"5":79,"6":79,"7":[62,79],"The":73,"ab":3,"about":59,"account":19,"addexpress":2,"addit":[9,63],"advanc":[54,69,70],"aerospac":52,"affin":2,"algorithm":18,"alloc":[24,30],"along":75,"alpha":33,"altern":[14,29],"an":[14,18,23,75],"analysi":[43,44,73],"antenna":18,"api":0,"applic":54,"approach":22,"ar":59,"arbitrari":18,"arithmet":69,"arrai":[18,79],"assign":27,"assumpt":9,"atom":[1,2,3,4,46,61,72,74,75,79],"attribut":[70,79],"axi":75,"back":9,"backend":69,"bandwidth":30,"basic":54,"beamwidth":18,"benchmark":14,"between":59,"bisect":18,"bmat":2,"boolean":59,"box":47,"break":79,"broadcast_to":2,"bug":79,"bugfix":79,"build":24,"bump":79,"callbackparam":6,"can":59,"cannot":59,"canonic":69,"capac":15,"catch":24,"cbc":[63,78],"censor":19,"cgl":63,"chain":8,"chang":[77,79],"channel":[15,30],"chebychev":23,"checklist":14,"choos":78,"cite":[59,64],"clarabel":78,"clarif":75,"class":8,"classifi":58,"clock":20,"clp":63,"code":14,"color":35,"commun":[15,27,36],"compat":79,"compil":59,"complet":48,"complex":70,"complex2r":11,"compon":45,"composit":74,"comput":34,"conclus":19,"condit":28,"cone":42,"cone_matrix_stuf":10,"conic":14,"conj":2,"consensu":21,"constant":6,"constrain":59,"constraint":[5,19,59,70,77,79],"content":[10,12],"contribut":14,"control":49,"conv":79,"convex":[17,59,71],"convolv":2,"copi":59,"copt":[63,78],"core":8,"cours":68,"covari":33,"cplex":[63,78],"creat":59,"cuclarabel":63,"cummax":4,"cumprod":4,"cumsum":2,"cuopt":[63,78],"curvatur":[46,71,72,74],"custom":78,"cvar":4,"cvxattr2constr":11,"cvxopt":[63,78],"cvxpy":[3,10,12,14,59,62,64,68,77,79],"d":18,"daqp":78,"data":[18,19,20,23,26,29,32,33,34,45,55,57],"dcp":[59,71],"dcp2cone":[9,10],"dcperror":59,"default":[63,79],"depend":79,"deprec":79,"deriv":[43,54],"design":[23,44,52],"desir":23,"destin":24,"detail":9,"detect":22,"develop":14,"dgp":[46,72],"dgp2dcp":11,"diag":2,"diff":2,"diff_po":4,"differ":59,"dimens":59,"dimension":69,"disciplin":[54,71,72,73,74,78],"disclaim":8,"displai":20,"divexpress":2,"do":59,"document":0,"doe":59,"dotsort":4,"dpp":73,"dqcp":74,"drop":79,"dual":[14,69],"dualiz":9,"each":45,"eco":[78,79],"effort":24,"elementwis":[3,72,75],"ell_1":[25,31,34,56,58],"end":[9,11],"entr":3,"entropi":26,"environ":14,"error":59,"estim":33,"evalparam":11,"evalu":[22,55,57,59],"exampl":[15,22,24,27,28,30,31,32,36,37,38,39,40,41,42,54,58,71],"except":59,"exp":3,"expcon":5,"express":[6,59,69,70,71],"eye_minus_inv":4,"factor":[29,50],"faq":59,"fault":22,"featur":[55,69,78,79],"fill":36,"filter":[23,25,32],"financ":54,"find":59,"finiteset":5,"fir":23,"fit":[19,45,55,57],"fix":79,"flipobject":11,"form":[14,69],"format":9,"formul":[24,25,26,31],"fraction":51,"framework":67,"frobeniu":48,"from":46,"function":[20,24,32,46,55,57,59,61,72,75],"fundament":[43,46],"game":24,"gaussian":[30,33],"gener":[14,18,19,20,26,29,33,34,45,55,57,79],"geo_mean":4,"geometr":[46,54,72,78],"geometri":18,"get":[59,69],"given":23,"glop":[63,78],"glpk":63,"gmatmul":4,"gpu":79,"gradient":[43,73],"grayscal":35,"guard":24,"guid":76,"gurobi":[63,78],"h":23,"ha":59,"harmonic_mean":4,"help":59,"helper":[20,24,32],"heurist":[31,34],"high":[63,78],"highlight":79,"how":59,"hstack":2,"huber":3,"i":[59,73,77],"imag":[2,35],"import":[20,70],"improv":79,"index":[2,75],"inequ":34,"infeas":77,"infix":[71,72],"initi":23,"instal":63,"integ":[39,70],"interdict":24,"interfac":[14,79],"introduct":[18,20,23,25,26,29,33,34],"inv_po":3,"inv_prod":4,"issu":79,"iter":[31,34],"kalman":32,"kl_div":3,"know":59,"known":79,"kron":2,"lambda_max":4,"lambda_min":4,"lambda_sum_largest":4,"lambda_sum_smallest":4,"lasso":55,"leaf":6,"learn":[54,55,57,59],"least":[37,53],"length":53,"licens":[14,66],"linear":[34,38],"log":[3,34,46,72],"log1p":3,"log_det":4,"log_normcdf":3,"log_sum_exp":4,"loggamma":3,"logist":[3,56],"long":59,"m":59,"machin":[54,55,57,58],"map":43,"mathemat":24,"matmul":2,"matric":[59,70,77],"matrix":[29,48,50,59,72,75],"matrix_frac":4,"max":[4,24],"maxim":[7,26,47],"maximum":3,"mean":2,"mesh":20,"method":[16,78],"middl":11,"min":[4,24],"minim":[7,18,28,29],"minimax":23,"minimum":[3,53],"mix":[39,70],"mixed_norm":4,"model":[32,55,57,67],"modul":[10,12],"monomi":45,"more":59,"mosek":[63,78],"moveaxi":2,"mpax":[63,78],"mulexpress":2,"multipl":[24,59,70],"multipli":[2,16],"my":59,"n":69,"nag":[63,78],"neg":3,"negexpress":2,"new":79,"next":46,"nonneg":[29,50],"nonpo":[5,79],"norm":[4,34],"norm1":4,"norm2":4,"norm_inf":4,"normnuc":4,"notabl":79,"note":[3,4,9,70,78,79],"number":28,"numpi":[59,79],"object":[17,24,55,57,59],"ol":19,"omega":23,"one":50,"one_minus_po":4,"oper":[71,72,75],"oprelentrconequad":5,"optim":[17,21,30,31,51,52,59],"option":78,"order":[42,79],"orient":17,"osqp":78,"other":[4,13,77],"outer":2,"output":[29,78],"overview":79,"packag":[3,10,12,20],"paint":35,"parad":31,"paramet":[6,77],"parametr":73,"partial_trac":2,"partial_transpos":2,"patch":79,"path":[24,55,57],"pdlp":[63,78],"perform":29,"permute_dim":2,"perron":48,"perspect":4,"perturb":44,"pf_eigenvalu":4,"piqp":[63,78],"placement":24,"plot":[18,23,25,33,34],"pnorm":4,"po":3,"posit":59,"powcone3d":5,"powconend":5,"power":[3,27,30,49,72,75],"predict":45,"primal_var":9,"principl":14,"problem":[7,18,20,22,23,25,26,29,31,32,33,34,46,59,69,71,72,73,74,77],"prod":4,"program":[38,39,40,41,42,46,54,70,71,72,73,74,78],"project":67,"promot":2,"properti":59,"proxqp":[63,78],"psd":5,"psd_wrap":2,"ptp":4,"qoco":[63,78],"qp2quad_form":12,"qp2symbolic_qp":12,"qp2symbolicqp":9,"qp_matrix_stuf":12,"quad_form":4,"quad_over_lin":4,"quadrat":[39,40],"quasiconvex":[52,54,74],"queu":44,"rank":50,"read":70,"real":2,"recoveri":[22,32],"reduct":[8,9,10,11,12,79],"refer":[22,24,31,46],"regist":14,"regress":[55,56,57],"regular":[19,55,56,57,58],"rel_entr":3,"relat":67,"relax":31,"relentrconequad":5,"repeatedli":73,"represent":1,"requir":9,"reshap":[2,79],"resolv":4,"resourc":65,"result":[18,20,23,25,29,33,34],"ridg":57,"robust":32,"rout":31,"rule":[71,72,74],"ruleset":[46,73],"run":[14,63],"sc":78,"scalar":[13,72,75],"scale":28,"scalen":3,"scip":[63,78],"scipi":[59,63,78,79],"sdpa":[63,78],"sdpt3":63,"second":42,"secur":24,"select":[18,55],"semidefinit":[41,59,70],"sensit":[43,73],"sensitv":44,"set":[34,78],"setup":[19,20],"sever":33,"short":68,"sigma_max":4,"sign":71,"simul":32,"sinc":79,"size":20,"sizemetr":7,"slack":9,"slice":75,"smuggler":24,"so":59,"soc":5,"solut":[8,9,22,34,43],"solv":[18,20,23,24,25,26,33,46,73,74,78],"solver":[14,59,63,67,78,79],"solvererror":59,"solverstat":7,"solvingchain":8,"sourc":24,"spars":[33,34,59,70,79],"sparsiti":70,"special":59,"specif":18,"sqrt":3,"squar":[3,37,53],"standard":69,"start":78,"stat":78,"statement":[22,31,32],"status":77,"std":4,"step":46,"structur":45,"style":14,"submodul":[10,12],"subpackag":[10,12],"suit":63,"sum":2,"sum_largest":4,"sum_smallest":4,"sum_squar":4,"suppfunc":13,"suppfuncatom":4,"support":[58,59,63,79],"swapax":2,"symmetr":59,"system":[27,79],"tabl":61,"take":[19,59],"test":[14,63],"than":59,"todo":24,"topic":[22,24,31],"total":35,"tr_inv":4,"trace":2,"track":32,"transform":[13,24,69,79],"transpos":[2,72,75],"trend":25,"truth":59,"tv":4,"type":8,"unbound":77,"uncensor":19,"unit":14,"updat":79,"upper_tri":2,"us":[18,19,59],"usag":9,"user":76,"valu":[33,59,70],"var":4,"variabl":[6,14,33,59,69],"variat":35,"vdot":2,"vec":2,"vec_to_upper_tri":2,"vector":[58,72,75,77],"vehicl":32,"version":59,"via":52,"view":78,"volum":47,"von_neumann_entr":4,"vstack":2,"warm":78,"warn":[14,69,78,79],"water":36,"weight":31,"welcom":62,"what":[59,73,77],"where":59,"which":59,"why":59,"wireless":27,"wishlist":14,"without":63,"work":59,"write":[14,55,57,70],"xexp":3,"xpress":[63,78],"zero":5}})