name: build

on:
    pull_request:
    push:
        branches:
            - master

jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master'"
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, macos-10.15 ]
        python-version: [ 3.5, 3.6, 3.7, 3.9 ]
        include:
          - os: ubuntu-18.04
            python-version: 3.8
            openmp: "True"
          - os: ubuntu-18.04
            python-version: 3.8
            openmp: "False"
          - os: macos-10.15
            python-version: 3.8
            openmp: "False"
            deploy_pypi_source: "True"

    env:
      RUNNER_OS: ${{ matrix.os }}
      PYTHON_VERSION: ${{ matrix.python-version }}
      COVERAGE: "False"
      DEPLOY_PYPI_SOURCE: "${{ matrix.deploy_pypi_source == 'True' && 'True' || 'False' }}"
      USE_OPENMP: "${{ matrix.openmp == 'True' && 'True' || 'False' }}"
      PYPI_SERVER: ${{ secrets.PYPI_SERVER }}
      PYPI_USER: ${{ secrets.PYPI_USER }}
      PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

    steps:
      - uses: actions/checkout@v2
      - name: Set Subversion Env
        run: echo "PYTHON_SUBVERSION=$(echo $PYTHON_VERSION | cut -c 3-)" >> $GITHUB_ENV
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,anaconda
      - name: Install
        run: |
          if [ "$RUNNER_OS" = "macOS" ]; then CC=gcc ; fi
          if [ "$RUNNER_OS" = "macOS" ]; then CXX=g++; fi
          source continuous_integration/GitHub/install_dependencies.sh
      - name: Test
        run: |
          flake8 .
          bash continuous_integration/GitHub/test_script.sh
      - name: Coverage
        run: if [[ "$COVERAGE" == "True" ]]; then coveralls; fi

      - name: Build wheels
        if: ${{ env.USE_OPENMP != 'True'}}
        env:
          CIBW_BUILD: "cp3${{env.PYTHON_SUBVERSION}}-*"
          CIBW_SKIP: "*-win32 *-manylinux_i686"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
        uses: joerick/cibuildwheel@v1.11.0

      - name: Build source
        if: ${{env.DEPLOY_PYPI_SOURCE == 'True'}}
        run: |
          python setup.py sdist --dist-dir=wheelhouse

      - name: Release to pypi
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        run: |
          python -m pip install --upgrade twine
          twine upload -repository-url $PYPI_SERVER wheelhouse/* -u $PYPI_USER -p $PYPI_PASSWORD

      - name: Upload artifacts to github
        if: ${{ env.USE_OPENMP != 'True'}}
        uses: actions/upload-artifact@v1
        with:
          name: wheels
          path: ./wheelhouse
